/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExpenseClaim type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseClaim{}

// ExpenseClaim struct for ExpenseClaim
type ExpenseClaim struct {
	// Xero generated unique identifier for an expense claim
	ExpenseClaimID *string `json:"ExpenseClaimID,omitempty"`
	// Current status of an expense claim â€“ see status types
	Status *string `json:"Status,omitempty"`
	// See Payments
	Payments []Payment `json:"Payments,omitempty"`
	User *User `json:"User,omitempty"`
	Receipts []Receipt `json:"Receipts,omitempty"`
	// Last modified date UTC format
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	// The total of an expense claim being paid
	Total *float64 `json:"Total,omitempty"`
	// The amount due to be paid for an expense claim
	AmountDue *float64 `json:"AmountDue,omitempty"`
	// The amount still to pay for an expense claim
	AmountPaid *float64 `json:"AmountPaid,omitempty"`
	// The date when the expense claim is due to be paid YYYY-MM-DD
	PaymentDueDate *string `json:"PaymentDueDate,omitempty"`
	// The date the expense claim will be reported in Xero YYYY-MM-DD
	ReportingDate *string `json:"ReportingDate,omitempty"`
	// The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9
	ReceiptID *string `json:"ReceiptID,omitempty"`
}

// NewExpenseClaim instantiates a new ExpenseClaim object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseClaim() *ExpenseClaim {
	this := ExpenseClaim{}
	return &this
}

// NewExpenseClaimWithDefaults instantiates a new ExpenseClaim object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseClaimWithDefaults() *ExpenseClaim {
	this := ExpenseClaim{}
	return &this
}

// GetExpenseClaimID returns the ExpenseClaimID field value if set, zero value otherwise.
func (o *ExpenseClaim) GetExpenseClaimID() string {
	if o == nil || IsNil(o.ExpenseClaimID) {
		var ret string
		return ret
	}
	return *o.ExpenseClaimID
}

// GetExpenseClaimIDOk returns a tuple with the ExpenseClaimID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetExpenseClaimIDOk() (*string, bool) {
	if o == nil || IsNil(o.ExpenseClaimID) {
		return nil, false
	}
	return o.ExpenseClaimID, true
}

// HasExpenseClaimID returns a boolean if a field has been set.
func (o *ExpenseClaim) HasExpenseClaimID() bool {
	if o != nil && !IsNil(o.ExpenseClaimID) {
		return true
	}

	return false
}

// SetExpenseClaimID gets a reference to the given string and assigns it to the ExpenseClaimID field.
func (o *ExpenseClaim) SetExpenseClaimID(v string) {
	o.ExpenseClaimID = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExpenseClaim) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExpenseClaim) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExpenseClaim) SetStatus(v string) {
	o.Status = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *ExpenseClaim) GetPayments() []Payment {
	if o == nil || IsNil(o.Payments) {
		var ret []Payment
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetPaymentsOk() ([]Payment, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *ExpenseClaim) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []Payment and assigns it to the Payments field.
func (o *ExpenseClaim) SetPayments(v []Payment) {
	o.Payments = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ExpenseClaim) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ExpenseClaim) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *ExpenseClaim) SetUser(v User) {
	o.User = &v
}

// GetReceipts returns the Receipts field value if set, zero value otherwise.
func (o *ExpenseClaim) GetReceipts() []Receipt {
	if o == nil || IsNil(o.Receipts) {
		var ret []Receipt
		return ret
	}
	return o.Receipts
}

// GetReceiptsOk returns a tuple with the Receipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetReceiptsOk() ([]Receipt, bool) {
	if o == nil || IsNil(o.Receipts) {
		return nil, false
	}
	return o.Receipts, true
}

// HasReceipts returns a boolean if a field has been set.
func (o *ExpenseClaim) HasReceipts() bool {
	if o != nil && !IsNil(o.Receipts) {
		return true
	}

	return false
}

// SetReceipts gets a reference to the given []Receipt and assigns it to the Receipts field.
func (o *ExpenseClaim) SetReceipts(v []Receipt) {
	o.Receipts = v
}

// GetUpdatedDateUTC returns the UpdatedDateUTC field value if set, zero value otherwise.
func (o *ExpenseClaim) GetUpdatedDateUTC() string {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		var ret string
		return ret
	}
	return *o.UpdatedDateUTC
}

// GetUpdatedDateUTCOk returns a tuple with the UpdatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetUpdatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		return nil, false
	}
	return o.UpdatedDateUTC, true
}

// HasUpdatedDateUTC returns a boolean if a field has been set.
func (o *ExpenseClaim) HasUpdatedDateUTC() bool {
	if o != nil && !IsNil(o.UpdatedDateUTC) {
		return true
	}

	return false
}

// SetUpdatedDateUTC gets a reference to the given string and assigns it to the UpdatedDateUTC field.
func (o *ExpenseClaim) SetUpdatedDateUTC(v string) {
	o.UpdatedDateUTC = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ExpenseClaim) GetTotal() float64 {
	if o == nil || IsNil(o.Total) {
		var ret float64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ExpenseClaim) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float64 and assigns it to the Total field.
func (o *ExpenseClaim) SetTotal(v float64) {
	o.Total = &v
}

// GetAmountDue returns the AmountDue field value if set, zero value otherwise.
func (o *ExpenseClaim) GetAmountDue() float64 {
	if o == nil || IsNil(o.AmountDue) {
		var ret float64
		return ret
	}
	return *o.AmountDue
}

// GetAmountDueOk returns a tuple with the AmountDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetAmountDueOk() (*float64, bool) {
	if o == nil || IsNil(o.AmountDue) {
		return nil, false
	}
	return o.AmountDue, true
}

// HasAmountDue returns a boolean if a field has been set.
func (o *ExpenseClaim) HasAmountDue() bool {
	if o != nil && !IsNil(o.AmountDue) {
		return true
	}

	return false
}

// SetAmountDue gets a reference to the given float64 and assigns it to the AmountDue field.
func (o *ExpenseClaim) SetAmountDue(v float64) {
	o.AmountDue = &v
}

// GetAmountPaid returns the AmountPaid field value if set, zero value otherwise.
func (o *ExpenseClaim) GetAmountPaid() float64 {
	if o == nil || IsNil(o.AmountPaid) {
		var ret float64
		return ret
	}
	return *o.AmountPaid
}

// GetAmountPaidOk returns a tuple with the AmountPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetAmountPaidOk() (*float64, bool) {
	if o == nil || IsNil(o.AmountPaid) {
		return nil, false
	}
	return o.AmountPaid, true
}

// HasAmountPaid returns a boolean if a field has been set.
func (o *ExpenseClaim) HasAmountPaid() bool {
	if o != nil && !IsNil(o.AmountPaid) {
		return true
	}

	return false
}

// SetAmountPaid gets a reference to the given float64 and assigns it to the AmountPaid field.
func (o *ExpenseClaim) SetAmountPaid(v float64) {
	o.AmountPaid = &v
}

// GetPaymentDueDate returns the PaymentDueDate field value if set, zero value otherwise.
func (o *ExpenseClaim) GetPaymentDueDate() string {
	if o == nil || IsNil(o.PaymentDueDate) {
		var ret string
		return ret
	}
	return *o.PaymentDueDate
}

// GetPaymentDueDateOk returns a tuple with the PaymentDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetPaymentDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentDueDate) {
		return nil, false
	}
	return o.PaymentDueDate, true
}

// HasPaymentDueDate returns a boolean if a field has been set.
func (o *ExpenseClaim) HasPaymentDueDate() bool {
	if o != nil && !IsNil(o.PaymentDueDate) {
		return true
	}

	return false
}

// SetPaymentDueDate gets a reference to the given string and assigns it to the PaymentDueDate field.
func (o *ExpenseClaim) SetPaymentDueDate(v string) {
	o.PaymentDueDate = &v
}

// GetReportingDate returns the ReportingDate field value if set, zero value otherwise.
func (o *ExpenseClaim) GetReportingDate() string {
	if o == nil || IsNil(o.ReportingDate) {
		var ret string
		return ret
	}
	return *o.ReportingDate
}

// GetReportingDateOk returns a tuple with the ReportingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetReportingDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReportingDate) {
		return nil, false
	}
	return o.ReportingDate, true
}

// HasReportingDate returns a boolean if a field has been set.
func (o *ExpenseClaim) HasReportingDate() bool {
	if o != nil && !IsNil(o.ReportingDate) {
		return true
	}

	return false
}

// SetReportingDate gets a reference to the given string and assigns it to the ReportingDate field.
func (o *ExpenseClaim) SetReportingDate(v string) {
	o.ReportingDate = &v
}

// GetReceiptID returns the ReceiptID field value if set, zero value otherwise.
func (o *ExpenseClaim) GetReceiptID() string {
	if o == nil || IsNil(o.ReceiptID) {
		var ret string
		return ret
	}
	return *o.ReceiptID
}

// GetReceiptIDOk returns a tuple with the ReceiptID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaim) GetReceiptIDOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiptID) {
		return nil, false
	}
	return o.ReceiptID, true
}

// HasReceiptID returns a boolean if a field has been set.
func (o *ExpenseClaim) HasReceiptID() bool {
	if o != nil && !IsNil(o.ReceiptID) {
		return true
	}

	return false
}

// SetReceiptID gets a reference to the given string and assigns it to the ReceiptID field.
func (o *ExpenseClaim) SetReceiptID(v string) {
	o.ReceiptID = &v
}

func (o ExpenseClaim) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseClaim) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpenseClaimID) {
		toSerialize["ExpenseClaimID"] = o.ExpenseClaimID
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.Payments) {
		toSerialize["Payments"] = o.Payments
	}
	if !IsNil(o.User) {
		toSerialize["User"] = o.User
	}
	if !IsNil(o.Receipts) {
		toSerialize["Receipts"] = o.Receipts
	}
	if !IsNil(o.UpdatedDateUTC) {
		toSerialize["UpdatedDateUTC"] = o.UpdatedDateUTC
	}
	if !IsNil(o.Total) {
		toSerialize["Total"] = o.Total
	}
	if !IsNil(o.AmountDue) {
		toSerialize["AmountDue"] = o.AmountDue
	}
	if !IsNil(o.AmountPaid) {
		toSerialize["AmountPaid"] = o.AmountPaid
	}
	if !IsNil(o.PaymentDueDate) {
		toSerialize["PaymentDueDate"] = o.PaymentDueDate
	}
	if !IsNil(o.ReportingDate) {
		toSerialize["ReportingDate"] = o.ReportingDate
	}
	if !IsNil(o.ReceiptID) {
		toSerialize["ReceiptID"] = o.ReceiptID
	}
	return toSerialize, nil
}

type NullableExpenseClaim struct {
	value *ExpenseClaim
	isSet bool
}

func (v NullableExpenseClaim) Get() *ExpenseClaim {
	return v.value
}

func (v *NullableExpenseClaim) Set(val *ExpenseClaim) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseClaim(val *ExpenseClaim) *NullableExpenseClaim {
	return &NullableExpenseClaim{value: val, isSet: true}
}

func (v NullableExpenseClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


