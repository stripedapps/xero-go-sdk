/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Quotes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quotes{}

// Quotes struct for Quotes
type Quotes struct {
	Quotes []Quote `json:"Quotes,omitempty"`
}

// NewQuotes instantiates a new Quotes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotes() *Quotes {
	this := Quotes{}
	return &this
}

// NewQuotesWithDefaults instantiates a new Quotes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotesWithDefaults() *Quotes {
	this := Quotes{}
	return &this
}

// GetQuotes returns the Quotes field value if set, zero value otherwise.
func (o *Quotes) GetQuotes() []Quote {
	if o == nil || IsNil(o.Quotes) {
		var ret []Quote
		return ret
	}
	return o.Quotes
}

// GetQuotesOk returns a tuple with the Quotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quotes) GetQuotesOk() ([]Quote, bool) {
	if o == nil || IsNil(o.Quotes) {
		return nil, false
	}
	return o.Quotes, true
}

// HasQuotes returns a boolean if a field has been set.
func (o *Quotes) HasQuotes() bool {
	if o != nil && !IsNil(o.Quotes) {
		return true
	}

	return false
}

// SetQuotes gets a reference to the given []Quote and assigns it to the Quotes field.
func (o *Quotes) SetQuotes(v []Quote) {
	o.Quotes = v
}

func (o Quotes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quotes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Quotes) {
		toSerialize["Quotes"] = o.Quotes
	}
	return toSerialize, nil
}

type NullableQuotes struct {
	value *Quotes
	isSet bool
}

func (v NullableQuotes) Get() *Quotes {
	return v.value
}

func (v *NullableQuotes) Set(val *Quotes) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotes) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotes(val *Quotes) *NullableQuotes {
	return &NullableQuotes{value: val, isSet: true}
}

func (v NullableQuotes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


