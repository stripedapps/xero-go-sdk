/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InvoiceReminder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoiceReminder{}

// InvoiceReminder struct for InvoiceReminder
type InvoiceReminder struct {
	// setting for on or off
	Enabled *bool `json:"Enabled,omitempty"`
}

// NewInvoiceReminder instantiates a new InvoiceReminder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceReminder() *InvoiceReminder {
	this := InvoiceReminder{}
	return &this
}

// NewInvoiceReminderWithDefaults instantiates a new InvoiceReminder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceReminderWithDefaults() *InvoiceReminder {
	this := InvoiceReminder{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *InvoiceReminder) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceReminder) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *InvoiceReminder) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *InvoiceReminder) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o InvoiceReminder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoiceReminder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableInvoiceReminder struct {
	value *InvoiceReminder
	isSet bool
}

func (v NullableInvoiceReminder) Get() *InvoiceReminder {
	return v.value
}

func (v *NullableInvoiceReminder) Set(val *InvoiceReminder) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceReminder) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceReminder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceReminder(val *InvoiceReminder) *NullableInvoiceReminder {
	return &NullableInvoiceReminder{value: val, isSet: true}
}

func (v NullableInvoiceReminder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceReminder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


