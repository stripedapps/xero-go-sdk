/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LineItemItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineItemItem{}

// LineItemItem struct for LineItemItem
type LineItemItem struct {
	// User defined item code (max length = 30)
	Code *string `json:"Code,omitempty"`
	// The name of the item (max length = 50)
	Name *string `json:"Name,omitempty"`
	// The Xero identifier for an Item
	ItemID *string `json:"ItemID,omitempty"`
}

// NewLineItemItem instantiates a new LineItemItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineItemItem() *LineItemItem {
	this := LineItemItem{}
	return &this
}

// NewLineItemItemWithDefaults instantiates a new LineItemItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineItemItemWithDefaults() *LineItemItem {
	this := LineItemItem{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *LineItemItem) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemItem) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *LineItemItem) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *LineItemItem) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LineItemItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LineItemItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LineItemItem) SetName(v string) {
	o.Name = &v
}

// GetItemID returns the ItemID field value if set, zero value otherwise.
func (o *LineItemItem) GetItemID() string {
	if o == nil || IsNil(o.ItemID) {
		var ret string
		return ret
	}
	return *o.ItemID
}

// GetItemIDOk returns a tuple with the ItemID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemItem) GetItemIDOk() (*string, bool) {
	if o == nil || IsNil(o.ItemID) {
		return nil, false
	}
	return o.ItemID, true
}

// HasItemID returns a boolean if a field has been set.
func (o *LineItemItem) HasItemID() bool {
	if o != nil && !IsNil(o.ItemID) {
		return true
	}

	return false
}

// SetItemID gets a reference to the given string and assigns it to the ItemID field.
func (o *LineItemItem) SetItemID(v string) {
	o.ItemID = &v
}

func (o LineItemItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineItemItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.ItemID) {
		toSerialize["ItemID"] = o.ItemID
	}
	return toSerialize, nil
}

type NullableLineItemItem struct {
	value *LineItemItem
	isSet bool
}

func (v NullableLineItemItem) Get() *LineItemItem {
	return v.value
}

func (v *NullableLineItemItem) Set(val *LineItemItem) {
	v.value = val
	v.isSet = true
}

func (v NullableLineItemItem) IsSet() bool {
	return v.isSet
}

func (v *NullableLineItemItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineItemItem(val *LineItemItem) *NullableLineItemItem {
	return &NullableLineItemItem{value: val, isSet: true}
}

func (v NullableLineItemItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineItemItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


