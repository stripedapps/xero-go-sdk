/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PaymentTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentTerm{}

// PaymentTerm struct for PaymentTerm
type PaymentTerm struct {
	Bills *Bill `json:"Bills,omitempty"`
	Sales *Bill `json:"Sales,omitempty"`
}

// NewPaymentTerm instantiates a new PaymentTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentTerm() *PaymentTerm {
	this := PaymentTerm{}
	return &this
}

// NewPaymentTermWithDefaults instantiates a new PaymentTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentTermWithDefaults() *PaymentTerm {
	this := PaymentTerm{}
	return &this
}

// GetBills returns the Bills field value if set, zero value otherwise.
func (o *PaymentTerm) GetBills() Bill {
	if o == nil || IsNil(o.Bills) {
		var ret Bill
		return ret
	}
	return *o.Bills
}

// GetBillsOk returns a tuple with the Bills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTerm) GetBillsOk() (*Bill, bool) {
	if o == nil || IsNil(o.Bills) {
		return nil, false
	}
	return o.Bills, true
}

// HasBills returns a boolean if a field has been set.
func (o *PaymentTerm) HasBills() bool {
	if o != nil && !IsNil(o.Bills) {
		return true
	}

	return false
}

// SetBills gets a reference to the given Bill and assigns it to the Bills field.
func (o *PaymentTerm) SetBills(v Bill) {
	o.Bills = &v
}

// GetSales returns the Sales field value if set, zero value otherwise.
func (o *PaymentTerm) GetSales() Bill {
	if o == nil || IsNil(o.Sales) {
		var ret Bill
		return ret
	}
	return *o.Sales
}

// GetSalesOk returns a tuple with the Sales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentTerm) GetSalesOk() (*Bill, bool) {
	if o == nil || IsNil(o.Sales) {
		return nil, false
	}
	return o.Sales, true
}

// HasSales returns a boolean if a field has been set.
func (o *PaymentTerm) HasSales() bool {
	if o != nil && !IsNil(o.Sales) {
		return true
	}

	return false
}

// SetSales gets a reference to the given Bill and assigns it to the Sales field.
func (o *PaymentTerm) SetSales(v Bill) {
	o.Sales = &v
}

func (o PaymentTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bills) {
		toSerialize["Bills"] = o.Bills
	}
	if !IsNil(o.Sales) {
		toSerialize["Sales"] = o.Sales
	}
	return toSerialize, nil
}

type NullablePaymentTerm struct {
	value *PaymentTerm
	isSet bool
}

func (v NullablePaymentTerm) Get() *PaymentTerm {
	return v.value
}

func (v *NullablePaymentTerm) Set(val *PaymentTerm) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTerm) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTerm(val *PaymentTerm) *NullablePaymentTerm {
	return &NullablePaymentTerm{value: val, isSet: true}
}

func (v NullablePaymentTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


