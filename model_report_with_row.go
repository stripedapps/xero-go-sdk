/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReportWithRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportWithRow{}

// ReportWithRow struct for ReportWithRow
type ReportWithRow struct {
	// ID of the Report
	ReportID *string `json:"ReportID,omitempty"`
	// Name of the report
	ReportName *string `json:"ReportName,omitempty"`
	// Title of the report
	ReportTitle *string `json:"ReportTitle,omitempty"`
	// The type of report (BalanceSheet,ProfitLoss, etc)
	ReportType *string `json:"ReportType,omitempty"`
	// Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report)
	ReportTitles []string `json:"ReportTitles,omitempty"`
	// Date of report
	ReportDate *string `json:"ReportDate,omitempty"`
	Rows []ReportRows `json:"Rows,omitempty"`
	// Updated Date
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	Fields []ReportFields `json:"Fields,omitempty"`
}

// NewReportWithRow instantiates a new ReportWithRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportWithRow() *ReportWithRow {
	this := ReportWithRow{}
	return &this
}

// NewReportWithRowWithDefaults instantiates a new ReportWithRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportWithRowWithDefaults() *ReportWithRow {
	this := ReportWithRow{}
	return &this
}

// GetReportID returns the ReportID field value if set, zero value otherwise.
func (o *ReportWithRow) GetReportID() string {
	if o == nil || IsNil(o.ReportID) {
		var ret string
		return ret
	}
	return *o.ReportID
}

// GetReportIDOk returns a tuple with the ReportID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRow) GetReportIDOk() (*string, bool) {
	if o == nil || IsNil(o.ReportID) {
		return nil, false
	}
	return o.ReportID, true
}

// HasReportID returns a boolean if a field has been set.
func (o *ReportWithRow) HasReportID() bool {
	if o != nil && !IsNil(o.ReportID) {
		return true
	}

	return false
}

// SetReportID gets a reference to the given string and assigns it to the ReportID field.
func (o *ReportWithRow) SetReportID(v string) {
	o.ReportID = &v
}

// GetReportName returns the ReportName field value if set, zero value otherwise.
func (o *ReportWithRow) GetReportName() string {
	if o == nil || IsNil(o.ReportName) {
		var ret string
		return ret
	}
	return *o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRow) GetReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportName) {
		return nil, false
	}
	return o.ReportName, true
}

// HasReportName returns a boolean if a field has been set.
func (o *ReportWithRow) HasReportName() bool {
	if o != nil && !IsNil(o.ReportName) {
		return true
	}

	return false
}

// SetReportName gets a reference to the given string and assigns it to the ReportName field.
func (o *ReportWithRow) SetReportName(v string) {
	o.ReportName = &v
}

// GetReportTitle returns the ReportTitle field value if set, zero value otherwise.
func (o *ReportWithRow) GetReportTitle() string {
	if o == nil || IsNil(o.ReportTitle) {
		var ret string
		return ret
	}
	return *o.ReportTitle
}

// GetReportTitleOk returns a tuple with the ReportTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRow) GetReportTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ReportTitle) {
		return nil, false
	}
	return o.ReportTitle, true
}

// HasReportTitle returns a boolean if a field has been set.
func (o *ReportWithRow) HasReportTitle() bool {
	if o != nil && !IsNil(o.ReportTitle) {
		return true
	}

	return false
}

// SetReportTitle gets a reference to the given string and assigns it to the ReportTitle field.
func (o *ReportWithRow) SetReportTitle(v string) {
	o.ReportTitle = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *ReportWithRow) GetReportType() string {
	if o == nil || IsNil(o.ReportType) {
		var ret string
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRow) GetReportTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReportType) {
		return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *ReportWithRow) HasReportType() bool {
	if o != nil && !IsNil(o.ReportType) {
		return true
	}

	return false
}

// SetReportType gets a reference to the given string and assigns it to the ReportType field.
func (o *ReportWithRow) SetReportType(v string) {
	o.ReportType = &v
}

// GetReportTitles returns the ReportTitles field value if set, zero value otherwise.
func (o *ReportWithRow) GetReportTitles() []string {
	if o == nil || IsNil(o.ReportTitles) {
		var ret []string
		return ret
	}
	return o.ReportTitles
}

// GetReportTitlesOk returns a tuple with the ReportTitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRow) GetReportTitlesOk() ([]string, bool) {
	if o == nil || IsNil(o.ReportTitles) {
		return nil, false
	}
	return o.ReportTitles, true
}

// HasReportTitles returns a boolean if a field has been set.
func (o *ReportWithRow) HasReportTitles() bool {
	if o != nil && !IsNil(o.ReportTitles) {
		return true
	}

	return false
}

// SetReportTitles gets a reference to the given []string and assigns it to the ReportTitles field.
func (o *ReportWithRow) SetReportTitles(v []string) {
	o.ReportTitles = v
}

// GetReportDate returns the ReportDate field value if set, zero value otherwise.
func (o *ReportWithRow) GetReportDate() string {
	if o == nil || IsNil(o.ReportDate) {
		var ret string
		return ret
	}
	return *o.ReportDate
}

// GetReportDateOk returns a tuple with the ReportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRow) GetReportDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReportDate) {
		return nil, false
	}
	return o.ReportDate, true
}

// HasReportDate returns a boolean if a field has been set.
func (o *ReportWithRow) HasReportDate() bool {
	if o != nil && !IsNil(o.ReportDate) {
		return true
	}

	return false
}

// SetReportDate gets a reference to the given string and assigns it to the ReportDate field.
func (o *ReportWithRow) SetReportDate(v string) {
	o.ReportDate = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *ReportWithRow) GetRows() []ReportRows {
	if o == nil || IsNil(o.Rows) {
		var ret []ReportRows
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRow) GetRowsOk() ([]ReportRows, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *ReportWithRow) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []ReportRows and assigns it to the Rows field.
func (o *ReportWithRow) SetRows(v []ReportRows) {
	o.Rows = v
}

// GetUpdatedDateUTC returns the UpdatedDateUTC field value if set, zero value otherwise.
func (o *ReportWithRow) GetUpdatedDateUTC() string {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		var ret string
		return ret
	}
	return *o.UpdatedDateUTC
}

// GetUpdatedDateUTCOk returns a tuple with the UpdatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRow) GetUpdatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		return nil, false
	}
	return o.UpdatedDateUTC, true
}

// HasUpdatedDateUTC returns a boolean if a field has been set.
func (o *ReportWithRow) HasUpdatedDateUTC() bool {
	if o != nil && !IsNil(o.UpdatedDateUTC) {
		return true
	}

	return false
}

// SetUpdatedDateUTC gets a reference to the given string and assigns it to the UpdatedDateUTC field.
func (o *ReportWithRow) SetUpdatedDateUTC(v string) {
	o.UpdatedDateUTC = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ReportWithRow) GetFields() []ReportFields {
	if o == nil || IsNil(o.Fields) {
		var ret []ReportFields
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRow) GetFieldsOk() ([]ReportFields, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ReportWithRow) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []ReportFields and assigns it to the Fields field.
func (o *ReportWithRow) SetFields(v []ReportFields) {
	o.Fields = v
}

func (o ReportWithRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportWithRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReportID) {
		toSerialize["ReportID"] = o.ReportID
	}
	if !IsNil(o.ReportName) {
		toSerialize["ReportName"] = o.ReportName
	}
	if !IsNil(o.ReportTitle) {
		toSerialize["ReportTitle"] = o.ReportTitle
	}
	if !IsNil(o.ReportType) {
		toSerialize["ReportType"] = o.ReportType
	}
	if !IsNil(o.ReportTitles) {
		toSerialize["ReportTitles"] = o.ReportTitles
	}
	if !IsNil(o.ReportDate) {
		toSerialize["ReportDate"] = o.ReportDate
	}
	if !IsNil(o.Rows) {
		toSerialize["Rows"] = o.Rows
	}
	if !IsNil(o.UpdatedDateUTC) {
		toSerialize["UpdatedDateUTC"] = o.UpdatedDateUTC
	}
	if !IsNil(o.Fields) {
		toSerialize["Fields"] = o.Fields
	}
	return toSerialize, nil
}

type NullableReportWithRow struct {
	value *ReportWithRow
	isSet bool
}

func (v NullableReportWithRow) Get() *ReportWithRow {
	return v.value
}

func (v *NullableReportWithRow) Set(val *ReportWithRow) {
	v.value = val
	v.isSet = true
}

func (v NullableReportWithRow) IsSet() bool {
	return v.isSet
}

func (v *NullableReportWithRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportWithRow(val *ReportWithRow) *NullableReportWithRow {
	return &NullableReportWithRow{value: val, isSet: true}
}

func (v NullableReportWithRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportWithRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


