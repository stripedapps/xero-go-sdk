/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Balances type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Balances{}

// Balances The raw AccountsReceivable(sales invoices) and AccountsPayable(bills) outstanding and overdue amounts, not converted to base currency (read only)
type Balances struct {
	AccountsReceivable *AccountsReceivable `json:"AccountsReceivable,omitempty"`
	AccountsPayable *AccountsPayable `json:"AccountsPayable,omitempty"`
}

// NewBalances instantiates a new Balances object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalances() *Balances {
	this := Balances{}
	return &this
}

// NewBalancesWithDefaults instantiates a new Balances object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalancesWithDefaults() *Balances {
	this := Balances{}
	return &this
}

// GetAccountsReceivable returns the AccountsReceivable field value if set, zero value otherwise.
func (o *Balances) GetAccountsReceivable() AccountsReceivable {
	if o == nil || IsNil(o.AccountsReceivable) {
		var ret AccountsReceivable
		return ret
	}
	return *o.AccountsReceivable
}

// GetAccountsReceivableOk returns a tuple with the AccountsReceivable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Balances) GetAccountsReceivableOk() (*AccountsReceivable, bool) {
	if o == nil || IsNil(o.AccountsReceivable) {
		return nil, false
	}
	return o.AccountsReceivable, true
}

// HasAccountsReceivable returns a boolean if a field has been set.
func (o *Balances) HasAccountsReceivable() bool {
	if o != nil && !IsNil(o.AccountsReceivable) {
		return true
	}

	return false
}

// SetAccountsReceivable gets a reference to the given AccountsReceivable and assigns it to the AccountsReceivable field.
func (o *Balances) SetAccountsReceivable(v AccountsReceivable) {
	o.AccountsReceivable = &v
}

// GetAccountsPayable returns the AccountsPayable field value if set, zero value otherwise.
func (o *Balances) GetAccountsPayable() AccountsPayable {
	if o == nil || IsNil(o.AccountsPayable) {
		var ret AccountsPayable
		return ret
	}
	return *o.AccountsPayable
}

// GetAccountsPayableOk returns a tuple with the AccountsPayable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Balances) GetAccountsPayableOk() (*AccountsPayable, bool) {
	if o == nil || IsNil(o.AccountsPayable) {
		return nil, false
	}
	return o.AccountsPayable, true
}

// HasAccountsPayable returns a boolean if a field has been set.
func (o *Balances) HasAccountsPayable() bool {
	if o != nil && !IsNil(o.AccountsPayable) {
		return true
	}

	return false
}

// SetAccountsPayable gets a reference to the given AccountsPayable and assigns it to the AccountsPayable field.
func (o *Balances) SetAccountsPayable(v AccountsPayable) {
	o.AccountsPayable = &v
}

func (o Balances) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Balances) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountsReceivable) {
		toSerialize["AccountsReceivable"] = o.AccountsReceivable
	}
	if !IsNil(o.AccountsPayable) {
		toSerialize["AccountsPayable"] = o.AccountsPayable
	}
	return toSerialize, nil
}

type NullableBalances struct {
	value *Balances
	isSet bool
}

func (v NullableBalances) Get() *Balances {
	return v.value
}

func (v *NullableBalances) Set(val *Balances) {
	v.value = val
	v.isSet = true
}

func (v NullableBalances) IsSet() bool {
	return v.isSet
}

func (v *NullableBalances) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalances(val *Balances) *NullableBalances {
	return &NullableBalances{value: val, isSet: true}
}

func (v NullableBalances) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalances) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


