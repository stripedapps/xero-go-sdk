/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchPayments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchPayments{}

// BatchPayments struct for BatchPayments
type BatchPayments struct {
	BatchPayments []BatchPayment `json:"BatchPayments,omitempty"`
}

// NewBatchPayments instantiates a new BatchPayments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchPayments() *BatchPayments {
	this := BatchPayments{}
	return &this
}

// NewBatchPaymentsWithDefaults instantiates a new BatchPayments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchPaymentsWithDefaults() *BatchPayments {
	this := BatchPayments{}
	return &this
}

// GetBatchPayments returns the BatchPayments field value if set, zero value otherwise.
func (o *BatchPayments) GetBatchPayments() []BatchPayment {
	if o == nil || IsNil(o.BatchPayments) {
		var ret []BatchPayment
		return ret
	}
	return o.BatchPayments
}

// GetBatchPaymentsOk returns a tuple with the BatchPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayments) GetBatchPaymentsOk() ([]BatchPayment, bool) {
	if o == nil || IsNil(o.BatchPayments) {
		return nil, false
	}
	return o.BatchPayments, true
}

// HasBatchPayments returns a boolean if a field has been set.
func (o *BatchPayments) HasBatchPayments() bool {
	if o != nil && !IsNil(o.BatchPayments) {
		return true
	}

	return false
}

// SetBatchPayments gets a reference to the given []BatchPayment and assigns it to the BatchPayments field.
func (o *BatchPayments) SetBatchPayments(v []BatchPayment) {
	o.BatchPayments = v
}

func (o BatchPayments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchPayments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchPayments) {
		toSerialize["BatchPayments"] = o.BatchPayments
	}
	return toSerialize, nil
}

type NullableBatchPayments struct {
	value *BatchPayments
	isSet bool
}

func (v NullableBatchPayments) Get() *BatchPayments {
	return v.value
}

func (v *NullableBatchPayments) Set(val *BatchPayments) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchPayments) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchPayments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchPayments(val *BatchPayments) *NullableBatchPayments {
	return &NullableBatchPayments{value: val, isSet: true}
}

func (v NullableBatchPayments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchPayments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


