/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BrandingTheme type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrandingTheme{}

// BrandingTheme struct for BrandingTheme
type BrandingTheme struct {
	// Xero identifier
	BrandingThemeID *string `json:"BrandingThemeID,omitempty"`
	// Name of branding theme
	Name *string `json:"Name,omitempty"`
	// The location of the image file used as the logo on this branding theme
	LogoUrl *string `json:"LogoUrl,omitempty"`
	// Always INVOICE
	Type *string `json:"Type,omitempty"`
	// Integer â€“ ranked order of branding theme. The default branding theme has a value of 0
	SortOrder *int32 `json:"SortOrder,omitempty"`
	// UTC timestamp of creation date of branding theme
	CreatedDateUTC *string `json:"CreatedDateUTC,omitempty"`
}

// NewBrandingTheme instantiates a new BrandingTheme object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandingTheme() *BrandingTheme {
	this := BrandingTheme{}
	return &this
}

// NewBrandingThemeWithDefaults instantiates a new BrandingTheme object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandingThemeWithDefaults() *BrandingTheme {
	this := BrandingTheme{}
	return &this
}

// GetBrandingThemeID returns the BrandingThemeID field value if set, zero value otherwise.
func (o *BrandingTheme) GetBrandingThemeID() string {
	if o == nil || IsNil(o.BrandingThemeID) {
		var ret string
		return ret
	}
	return *o.BrandingThemeID
}

// GetBrandingThemeIDOk returns a tuple with the BrandingThemeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingTheme) GetBrandingThemeIDOk() (*string, bool) {
	if o == nil || IsNil(o.BrandingThemeID) {
		return nil, false
	}
	return o.BrandingThemeID, true
}

// HasBrandingThemeID returns a boolean if a field has been set.
func (o *BrandingTheme) HasBrandingThemeID() bool {
	if o != nil && !IsNil(o.BrandingThemeID) {
		return true
	}

	return false
}

// SetBrandingThemeID gets a reference to the given string and assigns it to the BrandingThemeID field.
func (o *BrandingTheme) SetBrandingThemeID(v string) {
	o.BrandingThemeID = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BrandingTheme) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingTheme) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BrandingTheme) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BrandingTheme) SetName(v string) {
	o.Name = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *BrandingTheme) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingTheme) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *BrandingTheme) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *BrandingTheme) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BrandingTheme) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingTheme) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BrandingTheme) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BrandingTheme) SetType(v string) {
	o.Type = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *BrandingTheme) GetSortOrder() int32 {
	if o == nil || IsNil(o.SortOrder) {
		var ret int32
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingTheme) GetSortOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *BrandingTheme) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int32 and assigns it to the SortOrder field.
func (o *BrandingTheme) SetSortOrder(v int32) {
	o.SortOrder = &v
}

// GetCreatedDateUTC returns the CreatedDateUTC field value if set, zero value otherwise.
func (o *BrandingTheme) GetCreatedDateUTC() string {
	if o == nil || IsNil(o.CreatedDateUTC) {
		var ret string
		return ret
	}
	return *o.CreatedDateUTC
}

// GetCreatedDateUTCOk returns a tuple with the CreatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingTheme) GetCreatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDateUTC) {
		return nil, false
	}
	return o.CreatedDateUTC, true
}

// HasCreatedDateUTC returns a boolean if a field has been set.
func (o *BrandingTheme) HasCreatedDateUTC() bool {
	if o != nil && !IsNil(o.CreatedDateUTC) {
		return true
	}

	return false
}

// SetCreatedDateUTC gets a reference to the given string and assigns it to the CreatedDateUTC field.
func (o *BrandingTheme) SetCreatedDateUTC(v string) {
	o.CreatedDateUTC = &v
}

func (o BrandingTheme) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrandingTheme) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrandingThemeID) {
		toSerialize["BrandingThemeID"] = o.BrandingThemeID
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["LogoUrl"] = o.LogoUrl
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.SortOrder) {
		toSerialize["SortOrder"] = o.SortOrder
	}
	if !IsNil(o.CreatedDateUTC) {
		toSerialize["CreatedDateUTC"] = o.CreatedDateUTC
	}
	return toSerialize, nil
}

type NullableBrandingTheme struct {
	value *BrandingTheme
	isSet bool
}

func (v NullableBrandingTheme) Get() *BrandingTheme {
	return v.value
}

func (v *NullableBrandingTheme) Set(val *BrandingTheme) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandingTheme) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandingTheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandingTheme(val *BrandingTheme) *NullableBrandingTheme {
	return &NullableBrandingTheme{value: val, isSet: true}
}

func (v NullableBrandingTheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandingTheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


