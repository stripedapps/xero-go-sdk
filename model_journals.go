/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Journals type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Journals{}

// Journals struct for Journals
type Journals struct {
	Journals []Journal `json:"Journals,omitempty"`
}

// NewJournals instantiates a new Journals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJournals() *Journals {
	this := Journals{}
	return &this
}

// NewJournalsWithDefaults instantiates a new Journals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJournalsWithDefaults() *Journals {
	this := Journals{}
	return &this
}

// GetJournals returns the Journals field value if set, zero value otherwise.
func (o *Journals) GetJournals() []Journal {
	if o == nil || IsNil(o.Journals) {
		var ret []Journal
		return ret
	}
	return o.Journals
}

// GetJournalsOk returns a tuple with the Journals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journals) GetJournalsOk() ([]Journal, bool) {
	if o == nil || IsNil(o.Journals) {
		return nil, false
	}
	return o.Journals, true
}

// HasJournals returns a boolean if a field has been set.
func (o *Journals) HasJournals() bool {
	if o != nil && !IsNil(o.Journals) {
		return true
	}

	return false
}

// SetJournals gets a reference to the given []Journal and assigns it to the Journals field.
func (o *Journals) SetJournals(v []Journal) {
	o.Journals = v
}

func (o Journals) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Journals) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Journals) {
		toSerialize["Journals"] = o.Journals
	}
	return toSerialize, nil
}

type NullableJournals struct {
	value *Journals
	isSet bool
}

func (v NullableJournals) Get() *Journals {
	return v.value
}

func (v *NullableJournals) Set(val *Journals) {
	v.value = val
	v.isSet = true
}

func (v NullableJournals) IsSet() bool {
	return v.isSet
}

func (v *NullableJournals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJournals(val *Journals) *NullableJournals {
	return &NullableJournals{value: val, isSet: true}
}

func (v NullableJournals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJournals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


