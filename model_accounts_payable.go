/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountsPayable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountsPayable{}

// AccountsPayable struct for AccountsPayable
type AccountsPayable struct {
	Outstanding *float64 `json:"Outstanding,omitempty"`
	Overdue *float64 `json:"Overdue,omitempty"`
}

// NewAccountsPayable instantiates a new AccountsPayable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountsPayable() *AccountsPayable {
	this := AccountsPayable{}
	return &this
}

// NewAccountsPayableWithDefaults instantiates a new AccountsPayable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountsPayableWithDefaults() *AccountsPayable {
	this := AccountsPayable{}
	return &this
}

// GetOutstanding returns the Outstanding field value if set, zero value otherwise.
func (o *AccountsPayable) GetOutstanding() float64 {
	if o == nil || IsNil(o.Outstanding) {
		var ret float64
		return ret
	}
	return *o.Outstanding
}

// GetOutstandingOk returns a tuple with the Outstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountsPayable) GetOutstandingOk() (*float64, bool) {
	if o == nil || IsNil(o.Outstanding) {
		return nil, false
	}
	return o.Outstanding, true
}

// HasOutstanding returns a boolean if a field has been set.
func (o *AccountsPayable) HasOutstanding() bool {
	if o != nil && !IsNil(o.Outstanding) {
		return true
	}

	return false
}

// SetOutstanding gets a reference to the given float64 and assigns it to the Outstanding field.
func (o *AccountsPayable) SetOutstanding(v float64) {
	o.Outstanding = &v
}

// GetOverdue returns the Overdue field value if set, zero value otherwise.
func (o *AccountsPayable) GetOverdue() float64 {
	if o == nil || IsNil(o.Overdue) {
		var ret float64
		return ret
	}
	return *o.Overdue
}

// GetOverdueOk returns a tuple with the Overdue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountsPayable) GetOverdueOk() (*float64, bool) {
	if o == nil || IsNil(o.Overdue) {
		return nil, false
	}
	return o.Overdue, true
}

// HasOverdue returns a boolean if a field has been set.
func (o *AccountsPayable) HasOverdue() bool {
	if o != nil && !IsNil(o.Overdue) {
		return true
	}

	return false
}

// SetOverdue gets a reference to the given float64 and assigns it to the Overdue field.
func (o *AccountsPayable) SetOverdue(v float64) {
	o.Overdue = &v
}

func (o AccountsPayable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountsPayable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Outstanding) {
		toSerialize["Outstanding"] = o.Outstanding
	}
	if !IsNil(o.Overdue) {
		toSerialize["Overdue"] = o.Overdue
	}
	return toSerialize, nil
}

type NullableAccountsPayable struct {
	value *AccountsPayable
	isSet bool
}

func (v NullableAccountsPayable) Get() *AccountsPayable {
	return v.value
}

func (v *NullableAccountsPayable) Set(val *AccountsPayable) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountsPayable) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountsPayable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountsPayable(val *AccountsPayable) *NullableAccountsPayable {
	return &NullableAccountsPayable{value: val, isSet: true}
}

func (v NullableAccountsPayable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountsPayable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


