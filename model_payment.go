/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Payment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Payment{}

// Payment struct for Payment
type Payment struct {
	Invoice *Invoice `json:"Invoice,omitempty"`
	CreditNote *CreditNote `json:"CreditNote,omitempty"`
	Prepayment *Prepayment `json:"Prepayment,omitempty"`
	Overpayment *Overpayment `json:"Overpayment,omitempty"`
	// Number of invoice or credit note you are applying payment to e.g.INV-4003
	InvoiceNumber *string `json:"InvoiceNumber,omitempty"`
	// Number of invoice or credit note you are applying payment to e.g. INV-4003
	CreditNoteNumber *string `json:"CreditNoteNumber,omitempty"`
	BatchPayment *BatchPayment `json:"BatchPayment,omitempty"`
	Account *Account `json:"Account,omitempty"`
	// Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value)
	Code *string `json:"Code,omitempty"`
	// Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
	Date *string `json:"Date,omitempty"`
	// Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
	CurrencyRate *float64 `json:"CurrencyRate,omitempty"`
	// The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
	Amount *float64 `json:"Amount,omitempty"`
	// The amount of the payment in the currency of the bank account.
	BankAmount *float64 `json:"BankAmount,omitempty"`
	// An optional description for the payment e.g. Direct Debit
	Reference *string `json:"Reference,omitempty"`
	// An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET
	IsReconciled *bool `json:"IsReconciled,omitempty"`
	// The status of the payment.
	Status *string `json:"Status,omitempty"`
	// See Payment Types.
	PaymentType *string `json:"PaymentType,omitempty"`
	// UTC timestamp of last update to the payment
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	// The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
	PaymentID *string `json:"PaymentID,omitempty"`
	// Present if the payment was created as part of a batch.
	BatchPaymentID *string `json:"BatchPaymentID,omitempty"`
	// The suppliers bank account number the payment is being made to
	BankAccountNumber *string `json:"BankAccountNumber,omitempty"`
	// The suppliers bank account number the payment is being made to
	Particulars *string `json:"Particulars,omitempty"`
	// The information to appear on the supplier's bank account
	Details *string `json:"Details,omitempty"`
	// A boolean to indicate if a contact has an validation errors
	HasAccount *bool `json:"HasAccount,omitempty"`
	// A boolean to indicate if a contact has an validation errors
	HasValidationErrors *bool `json:"HasValidationErrors,omitempty"`
	// A string to indicate if a invoice status
	StatusAttributeString *string `json:"StatusAttributeString,omitempty"`
	// Displays array of validation error messages from the API
	ValidationErrors []ValidationError `json:"ValidationErrors,omitempty"`
}

// NewPayment instantiates a new Payment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayment() *Payment {
	this := Payment{}
	var hasAccount bool = false
	this.HasAccount = &hasAccount
	var hasValidationErrors bool = false
	this.HasValidationErrors = &hasValidationErrors
	return &this
}

// NewPaymentWithDefaults instantiates a new Payment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentWithDefaults() *Payment {
	this := Payment{}
	var hasAccount bool = false
	this.HasAccount = &hasAccount
	var hasValidationErrors bool = false
	this.HasValidationErrors = &hasValidationErrors
	return &this
}

// GetInvoice returns the Invoice field value if set, zero value otherwise.
func (o *Payment) GetInvoice() Invoice {
	if o == nil || IsNil(o.Invoice) {
		var ret Invoice
		return ret
	}
	return *o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetInvoiceOk() (*Invoice, bool) {
	if o == nil || IsNil(o.Invoice) {
		return nil, false
	}
	return o.Invoice, true
}

// HasInvoice returns a boolean if a field has been set.
func (o *Payment) HasInvoice() bool {
	if o != nil && !IsNil(o.Invoice) {
		return true
	}

	return false
}

// SetInvoice gets a reference to the given Invoice and assigns it to the Invoice field.
func (o *Payment) SetInvoice(v Invoice) {
	o.Invoice = &v
}

// GetCreditNote returns the CreditNote field value if set, zero value otherwise.
func (o *Payment) GetCreditNote() CreditNote {
	if o == nil || IsNil(o.CreditNote) {
		var ret CreditNote
		return ret
	}
	return *o.CreditNote
}

// GetCreditNoteOk returns a tuple with the CreditNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCreditNoteOk() (*CreditNote, bool) {
	if o == nil || IsNil(o.CreditNote) {
		return nil, false
	}
	return o.CreditNote, true
}

// HasCreditNote returns a boolean if a field has been set.
func (o *Payment) HasCreditNote() bool {
	if o != nil && !IsNil(o.CreditNote) {
		return true
	}

	return false
}

// SetCreditNote gets a reference to the given CreditNote and assigns it to the CreditNote field.
func (o *Payment) SetCreditNote(v CreditNote) {
	o.CreditNote = &v
}

// GetPrepayment returns the Prepayment field value if set, zero value otherwise.
func (o *Payment) GetPrepayment() Prepayment {
	if o == nil || IsNil(o.Prepayment) {
		var ret Prepayment
		return ret
	}
	return *o.Prepayment
}

// GetPrepaymentOk returns a tuple with the Prepayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetPrepaymentOk() (*Prepayment, bool) {
	if o == nil || IsNil(o.Prepayment) {
		return nil, false
	}
	return o.Prepayment, true
}

// HasPrepayment returns a boolean if a field has been set.
func (o *Payment) HasPrepayment() bool {
	if o != nil && !IsNil(o.Prepayment) {
		return true
	}

	return false
}

// SetPrepayment gets a reference to the given Prepayment and assigns it to the Prepayment field.
func (o *Payment) SetPrepayment(v Prepayment) {
	o.Prepayment = &v
}

// GetOverpayment returns the Overpayment field value if set, zero value otherwise.
func (o *Payment) GetOverpayment() Overpayment {
	if o == nil || IsNil(o.Overpayment) {
		var ret Overpayment
		return ret
	}
	return *o.Overpayment
}

// GetOverpaymentOk returns a tuple with the Overpayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetOverpaymentOk() (*Overpayment, bool) {
	if o == nil || IsNil(o.Overpayment) {
		return nil, false
	}
	return o.Overpayment, true
}

// HasOverpayment returns a boolean if a field has been set.
func (o *Payment) HasOverpayment() bool {
	if o != nil && !IsNil(o.Overpayment) {
		return true
	}

	return false
}

// SetOverpayment gets a reference to the given Overpayment and assigns it to the Overpayment field.
func (o *Payment) SetOverpayment(v Overpayment) {
	o.Overpayment = &v
}

// GetInvoiceNumber returns the InvoiceNumber field value if set, zero value otherwise.
func (o *Payment) GetInvoiceNumber() string {
	if o == nil || IsNil(o.InvoiceNumber) {
		var ret string
		return ret
	}
	return *o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceNumber) {
		return nil, false
	}
	return o.InvoiceNumber, true
}

// HasInvoiceNumber returns a boolean if a field has been set.
func (o *Payment) HasInvoiceNumber() bool {
	if o != nil && !IsNil(o.InvoiceNumber) {
		return true
	}

	return false
}

// SetInvoiceNumber gets a reference to the given string and assigns it to the InvoiceNumber field.
func (o *Payment) SetInvoiceNumber(v string) {
	o.InvoiceNumber = &v
}

// GetCreditNoteNumber returns the CreditNoteNumber field value if set, zero value otherwise.
func (o *Payment) GetCreditNoteNumber() string {
	if o == nil || IsNil(o.CreditNoteNumber) {
		var ret string
		return ret
	}
	return *o.CreditNoteNumber
}

// GetCreditNoteNumberOk returns a tuple with the CreditNoteNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCreditNoteNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CreditNoteNumber) {
		return nil, false
	}
	return o.CreditNoteNumber, true
}

// HasCreditNoteNumber returns a boolean if a field has been set.
func (o *Payment) HasCreditNoteNumber() bool {
	if o != nil && !IsNil(o.CreditNoteNumber) {
		return true
	}

	return false
}

// SetCreditNoteNumber gets a reference to the given string and assigns it to the CreditNoteNumber field.
func (o *Payment) SetCreditNoteNumber(v string) {
	o.CreditNoteNumber = &v
}

// GetBatchPayment returns the BatchPayment field value if set, zero value otherwise.
func (o *Payment) GetBatchPayment() BatchPayment {
	if o == nil || IsNil(o.BatchPayment) {
		var ret BatchPayment
		return ret
	}
	return *o.BatchPayment
}

// GetBatchPaymentOk returns a tuple with the BatchPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetBatchPaymentOk() (*BatchPayment, bool) {
	if o == nil || IsNil(o.BatchPayment) {
		return nil, false
	}
	return o.BatchPayment, true
}

// HasBatchPayment returns a boolean if a field has been set.
func (o *Payment) HasBatchPayment() bool {
	if o != nil && !IsNil(o.BatchPayment) {
		return true
	}

	return false
}

// SetBatchPayment gets a reference to the given BatchPayment and assigns it to the BatchPayment field.
func (o *Payment) SetBatchPayment(v BatchPayment) {
	o.BatchPayment = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Payment) GetAccount() Account {
	if o == nil || IsNil(o.Account) {
		var ret Account
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetAccountOk() (*Account, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Payment) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given Account and assigns it to the Account field.
func (o *Payment) SetAccount(v Account) {
	o.Account = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Payment) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Payment) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Payment) SetCode(v string) {
	o.Code = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Payment) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Payment) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *Payment) SetDate(v string) {
	o.Date = &v
}

// GetCurrencyRate returns the CurrencyRate field value if set, zero value otherwise.
func (o *Payment) GetCurrencyRate() float64 {
	if o == nil || IsNil(o.CurrencyRate) {
		var ret float64
		return ret
	}
	return *o.CurrencyRate
}

// GetCurrencyRateOk returns a tuple with the CurrencyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCurrencyRateOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrencyRate) {
		return nil, false
	}
	return o.CurrencyRate, true
}

// HasCurrencyRate returns a boolean if a field has been set.
func (o *Payment) HasCurrencyRate() bool {
	if o != nil && !IsNil(o.CurrencyRate) {
		return true
	}

	return false
}

// SetCurrencyRate gets a reference to the given float64 and assigns it to the CurrencyRate field.
func (o *Payment) SetCurrencyRate(v float64) {
	o.CurrencyRate = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Payment) GetAmount() float64 {
	if o == nil || IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Payment) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *Payment) SetAmount(v float64) {
	o.Amount = &v
}

// GetBankAmount returns the BankAmount field value if set, zero value otherwise.
func (o *Payment) GetBankAmount() float64 {
	if o == nil || IsNil(o.BankAmount) {
		var ret float64
		return ret
	}
	return *o.BankAmount
}

// GetBankAmountOk returns a tuple with the BankAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetBankAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.BankAmount) {
		return nil, false
	}
	return o.BankAmount, true
}

// HasBankAmount returns a boolean if a field has been set.
func (o *Payment) HasBankAmount() bool {
	if o != nil && !IsNil(o.BankAmount) {
		return true
	}

	return false
}

// SetBankAmount gets a reference to the given float64 and assigns it to the BankAmount field.
func (o *Payment) SetBankAmount(v float64) {
	o.BankAmount = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Payment) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Payment) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *Payment) SetReference(v string) {
	o.Reference = &v
}

// GetIsReconciled returns the IsReconciled field value if set, zero value otherwise.
func (o *Payment) GetIsReconciled() bool {
	if o == nil || IsNil(o.IsReconciled) {
		var ret bool
		return ret
	}
	return *o.IsReconciled
}

// GetIsReconciledOk returns a tuple with the IsReconciled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetIsReconciledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReconciled) {
		return nil, false
	}
	return o.IsReconciled, true
}

// HasIsReconciled returns a boolean if a field has been set.
func (o *Payment) HasIsReconciled() bool {
	if o != nil && !IsNil(o.IsReconciled) {
		return true
	}

	return false
}

// SetIsReconciled gets a reference to the given bool and assigns it to the IsReconciled field.
func (o *Payment) SetIsReconciled(v bool) {
	o.IsReconciled = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Payment) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Payment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Payment) SetStatus(v string) {
	o.Status = &v
}

// GetPaymentType returns the PaymentType field value if set, zero value otherwise.
func (o *Payment) GetPaymentType() string {
	if o == nil || IsNil(o.PaymentType) {
		var ret string
		return ret
	}
	return *o.PaymentType
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetPaymentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentType) {
		return nil, false
	}
	return o.PaymentType, true
}

// HasPaymentType returns a boolean if a field has been set.
func (o *Payment) HasPaymentType() bool {
	if o != nil && !IsNil(o.PaymentType) {
		return true
	}

	return false
}

// SetPaymentType gets a reference to the given string and assigns it to the PaymentType field.
func (o *Payment) SetPaymentType(v string) {
	o.PaymentType = &v
}

// GetUpdatedDateUTC returns the UpdatedDateUTC field value if set, zero value otherwise.
func (o *Payment) GetUpdatedDateUTC() string {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		var ret string
		return ret
	}
	return *o.UpdatedDateUTC
}

// GetUpdatedDateUTCOk returns a tuple with the UpdatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetUpdatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		return nil, false
	}
	return o.UpdatedDateUTC, true
}

// HasUpdatedDateUTC returns a boolean if a field has been set.
func (o *Payment) HasUpdatedDateUTC() bool {
	if o != nil && !IsNil(o.UpdatedDateUTC) {
		return true
	}

	return false
}

// SetUpdatedDateUTC gets a reference to the given string and assigns it to the UpdatedDateUTC field.
func (o *Payment) SetUpdatedDateUTC(v string) {
	o.UpdatedDateUTC = &v
}

// GetPaymentID returns the PaymentID field value if set, zero value otherwise.
func (o *Payment) GetPaymentID() string {
	if o == nil || IsNil(o.PaymentID) {
		var ret string
		return ret
	}
	return *o.PaymentID
}

// GetPaymentIDOk returns a tuple with the PaymentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetPaymentIDOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentID) {
		return nil, false
	}
	return o.PaymentID, true
}

// HasPaymentID returns a boolean if a field has been set.
func (o *Payment) HasPaymentID() bool {
	if o != nil && !IsNil(o.PaymentID) {
		return true
	}

	return false
}

// SetPaymentID gets a reference to the given string and assigns it to the PaymentID field.
func (o *Payment) SetPaymentID(v string) {
	o.PaymentID = &v
}

// GetBatchPaymentID returns the BatchPaymentID field value if set, zero value otherwise.
func (o *Payment) GetBatchPaymentID() string {
	if o == nil || IsNil(o.BatchPaymentID) {
		var ret string
		return ret
	}
	return *o.BatchPaymentID
}

// GetBatchPaymentIDOk returns a tuple with the BatchPaymentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetBatchPaymentIDOk() (*string, bool) {
	if o == nil || IsNil(o.BatchPaymentID) {
		return nil, false
	}
	return o.BatchPaymentID, true
}

// HasBatchPaymentID returns a boolean if a field has been set.
func (o *Payment) HasBatchPaymentID() bool {
	if o != nil && !IsNil(o.BatchPaymentID) {
		return true
	}

	return false
}

// SetBatchPaymentID gets a reference to the given string and assigns it to the BatchPaymentID field.
func (o *Payment) SetBatchPaymentID(v string) {
	o.BatchPaymentID = &v
}

// GetBankAccountNumber returns the BankAccountNumber field value if set, zero value otherwise.
func (o *Payment) GetBankAccountNumber() string {
	if o == nil || IsNil(o.BankAccountNumber) {
		var ret string
		return ret
	}
	return *o.BankAccountNumber
}

// GetBankAccountNumberOk returns a tuple with the BankAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetBankAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BankAccountNumber) {
		return nil, false
	}
	return o.BankAccountNumber, true
}

// HasBankAccountNumber returns a boolean if a field has been set.
func (o *Payment) HasBankAccountNumber() bool {
	if o != nil && !IsNil(o.BankAccountNumber) {
		return true
	}

	return false
}

// SetBankAccountNumber gets a reference to the given string and assigns it to the BankAccountNumber field.
func (o *Payment) SetBankAccountNumber(v string) {
	o.BankAccountNumber = &v
}

// GetParticulars returns the Particulars field value if set, zero value otherwise.
func (o *Payment) GetParticulars() string {
	if o == nil || IsNil(o.Particulars) {
		var ret string
		return ret
	}
	return *o.Particulars
}

// GetParticularsOk returns a tuple with the Particulars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetParticularsOk() (*string, bool) {
	if o == nil || IsNil(o.Particulars) {
		return nil, false
	}
	return o.Particulars, true
}

// HasParticulars returns a boolean if a field has been set.
func (o *Payment) HasParticulars() bool {
	if o != nil && !IsNil(o.Particulars) {
		return true
	}

	return false
}

// SetParticulars gets a reference to the given string and assigns it to the Particulars field.
func (o *Payment) SetParticulars(v string) {
	o.Particulars = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Payment) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Payment) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *Payment) SetDetails(v string) {
	o.Details = &v
}

// GetHasAccount returns the HasAccount field value if set, zero value otherwise.
func (o *Payment) GetHasAccount() bool {
	if o == nil || IsNil(o.HasAccount) {
		var ret bool
		return ret
	}
	return *o.HasAccount
}

// GetHasAccountOk returns a tuple with the HasAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetHasAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAccount) {
		return nil, false
	}
	return o.HasAccount, true
}

// HasHasAccount returns a boolean if a field has been set.
func (o *Payment) HasHasAccount() bool {
	if o != nil && !IsNil(o.HasAccount) {
		return true
	}

	return false
}

// SetHasAccount gets a reference to the given bool and assigns it to the HasAccount field.
func (o *Payment) SetHasAccount(v bool) {
	o.HasAccount = &v
}

// GetHasValidationErrors returns the HasValidationErrors field value if set, zero value otherwise.
func (o *Payment) GetHasValidationErrors() bool {
	if o == nil || IsNil(o.HasValidationErrors) {
		var ret bool
		return ret
	}
	return *o.HasValidationErrors
}

// GetHasValidationErrorsOk returns a tuple with the HasValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetHasValidationErrorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasValidationErrors) {
		return nil, false
	}
	return o.HasValidationErrors, true
}

// HasHasValidationErrors returns a boolean if a field has been set.
func (o *Payment) HasHasValidationErrors() bool {
	if o != nil && !IsNil(o.HasValidationErrors) {
		return true
	}

	return false
}

// SetHasValidationErrors gets a reference to the given bool and assigns it to the HasValidationErrors field.
func (o *Payment) SetHasValidationErrors(v bool) {
	o.HasValidationErrors = &v
}

// GetStatusAttributeString returns the StatusAttributeString field value if set, zero value otherwise.
func (o *Payment) GetStatusAttributeString() string {
	if o == nil || IsNil(o.StatusAttributeString) {
		var ret string
		return ret
	}
	return *o.StatusAttributeString
}

// GetStatusAttributeStringOk returns a tuple with the StatusAttributeString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetStatusAttributeStringOk() (*string, bool) {
	if o == nil || IsNil(o.StatusAttributeString) {
		return nil, false
	}
	return o.StatusAttributeString, true
}

// HasStatusAttributeString returns a boolean if a field has been set.
func (o *Payment) HasStatusAttributeString() bool {
	if o != nil && !IsNil(o.StatusAttributeString) {
		return true
	}

	return false
}

// SetStatusAttributeString gets a reference to the given string and assigns it to the StatusAttributeString field.
func (o *Payment) SetStatusAttributeString(v string) {
	o.StatusAttributeString = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *Payment) GetValidationErrors() []ValidationError {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret []ValidationError
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetValidationErrorsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *Payment) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []ValidationError and assigns it to the ValidationErrors field.
func (o *Payment) SetValidationErrors(v []ValidationError) {
	o.ValidationErrors = v
}

func (o Payment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Payment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Invoice) {
		toSerialize["Invoice"] = o.Invoice
	}
	if !IsNil(o.CreditNote) {
		toSerialize["CreditNote"] = o.CreditNote
	}
	if !IsNil(o.Prepayment) {
		toSerialize["Prepayment"] = o.Prepayment
	}
	if !IsNil(o.Overpayment) {
		toSerialize["Overpayment"] = o.Overpayment
	}
	if !IsNil(o.InvoiceNumber) {
		toSerialize["InvoiceNumber"] = o.InvoiceNumber
	}
	if !IsNil(o.CreditNoteNumber) {
		toSerialize["CreditNoteNumber"] = o.CreditNoteNumber
	}
	if !IsNil(o.BatchPayment) {
		toSerialize["BatchPayment"] = o.BatchPayment
	}
	if !IsNil(o.Account) {
		toSerialize["Account"] = o.Account
	}
	if !IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.CurrencyRate) {
		toSerialize["CurrencyRate"] = o.CurrencyRate
	}
	if !IsNil(o.Amount) {
		toSerialize["Amount"] = o.Amount
	}
	if !IsNil(o.BankAmount) {
		toSerialize["BankAmount"] = o.BankAmount
	}
	if !IsNil(o.Reference) {
		toSerialize["Reference"] = o.Reference
	}
	if !IsNil(o.IsReconciled) {
		toSerialize["IsReconciled"] = o.IsReconciled
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.PaymentType) {
		toSerialize["PaymentType"] = o.PaymentType
	}
	if !IsNil(o.UpdatedDateUTC) {
		toSerialize["UpdatedDateUTC"] = o.UpdatedDateUTC
	}
	if !IsNil(o.PaymentID) {
		toSerialize["PaymentID"] = o.PaymentID
	}
	if !IsNil(o.BatchPaymentID) {
		toSerialize["BatchPaymentID"] = o.BatchPaymentID
	}
	if !IsNil(o.BankAccountNumber) {
		toSerialize["BankAccountNumber"] = o.BankAccountNumber
	}
	if !IsNil(o.Particulars) {
		toSerialize["Particulars"] = o.Particulars
	}
	if !IsNil(o.Details) {
		toSerialize["Details"] = o.Details
	}
	if !IsNil(o.HasAccount) {
		toSerialize["HasAccount"] = o.HasAccount
	}
	if !IsNil(o.HasValidationErrors) {
		toSerialize["HasValidationErrors"] = o.HasValidationErrors
	}
	if !IsNil(o.StatusAttributeString) {
		toSerialize["StatusAttributeString"] = o.StatusAttributeString
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["ValidationErrors"] = o.ValidationErrors
	}
	return toSerialize, nil
}

type NullablePayment struct {
	value *Payment
	isSet bool
}

func (v NullablePayment) Get() *Payment {
	return v.value
}

func (v *NullablePayment) Set(val *Payment) {
	v.value = val
	v.isSet = true
}

func (v NullablePayment) IsSet() bool {
	return v.isSet
}

func (v *NullablePayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayment(val *Payment) *NullablePayment {
	return &NullablePayment{value: val, isSet: true}
}

func (v NullablePayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


