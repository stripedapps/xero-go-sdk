/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Overpayments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Overpayments{}

// Overpayments struct for Overpayments
type Overpayments struct {
	Overpayments []Overpayment `json:"Overpayments,omitempty"`
}

// NewOverpayments instantiates a new Overpayments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverpayments() *Overpayments {
	this := Overpayments{}
	return &this
}

// NewOverpaymentsWithDefaults instantiates a new Overpayments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverpaymentsWithDefaults() *Overpayments {
	this := Overpayments{}
	return &this
}

// GetOverpayments returns the Overpayments field value if set, zero value otherwise.
func (o *Overpayments) GetOverpayments() []Overpayment {
	if o == nil || IsNil(o.Overpayments) {
		var ret []Overpayment
		return ret
	}
	return o.Overpayments
}

// GetOverpaymentsOk returns a tuple with the Overpayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Overpayments) GetOverpaymentsOk() ([]Overpayment, bool) {
	if o == nil || IsNil(o.Overpayments) {
		return nil, false
	}
	return o.Overpayments, true
}

// HasOverpayments returns a boolean if a field has been set.
func (o *Overpayments) HasOverpayments() bool {
	if o != nil && !IsNil(o.Overpayments) {
		return true
	}

	return false
}

// SetOverpayments gets a reference to the given []Overpayment and assigns it to the Overpayments field.
func (o *Overpayments) SetOverpayments(v []Overpayment) {
	o.Overpayments = v
}

func (o Overpayments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Overpayments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Overpayments) {
		toSerialize["Overpayments"] = o.Overpayments
	}
	return toSerialize, nil
}

type NullableOverpayments struct {
	value *Overpayments
	isSet bool
}

func (v NullableOverpayments) Get() *Overpayments {
	return v.value
}

func (v *NullableOverpayments) Set(val *Overpayments) {
	v.value = val
	v.isSet = true
}

func (v NullableOverpayments) IsSet() bool {
	return v.isSet
}

func (v *NullableOverpayments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverpayments(val *Overpayments) *NullableOverpayments {
	return &NullableOverpayments{value: val, isSet: true}
}

func (v NullableOverpayments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverpayments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


