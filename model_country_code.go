/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CountryCode the model 'CountryCode'
type CountryCode string

// List of CountryCode
const (
	AD CountryCode = "AD"
	AE CountryCode = "AE"
	AF CountryCode = "AF"
	AG CountryCode = "AG"
	AI CountryCode = "AI"
	AL CountryCode = "AL"
	AM CountryCode = "AM"
	AN CountryCode = "AN"
	AO CountryCode = "AO"
	AQ CountryCode = "AQ"
	AR CountryCode = "AR"
	AS CountryCode = "AS"
	AT CountryCode = "AT"
	AU CountryCode = "AU"
	AW CountryCode = "AW"
	AZ CountryCode = "AZ"
	BA CountryCode = "BA"
	BB CountryCode = "BB"
	BD CountryCode = "BD"
	BE CountryCode = "BE"
	BF CountryCode = "BF"
	BG CountryCode = "BG"
	BH CountryCode = "BH"
	BI CountryCode = "BI"
	BJ CountryCode = "BJ"
	BL CountryCode = "BL"
	BM CountryCode = "BM"
	BN CountryCode = "BN"
	BO CountryCode = "BO"
	BR CountryCode = "BR"
	BS CountryCode = "BS"
	BT CountryCode = "BT"
	BW CountryCode = "BW"
	BY CountryCode = "BY"
	BZ CountryCode = "BZ"
	CA CountryCode = "CA"
	CC CountryCode = "CC"
	CD CountryCode = "CD"
	CF CountryCode = "CF"
	CG CountryCode = "CG"
	CH CountryCode = "CH"
	CI CountryCode = "CI"
	CK CountryCode = "CK"
	CL CountryCode = "CL"
	CM CountryCode = "CM"
	CN CountryCode = "CN"
	CO CountryCode = "CO"
	CR CountryCode = "CR"
	CU CountryCode = "CU"
	CV CountryCode = "CV"
	CW CountryCode = "CW"
	CX CountryCode = "CX"
	CY CountryCode = "CY"
	CZ CountryCode = "CZ"
	DE CountryCode = "DE"
	DJ CountryCode = "DJ"
	DK CountryCode = "DK"
	DM CountryCode = "DM"
	DO CountryCode = "DO"
	DZ CountryCode = "DZ"
	EC CountryCode = "EC"
	EE CountryCode = "EE"
	EG CountryCode = "EG"
	EH CountryCode = "EH"
	ER CountryCode = "ER"
	ES CountryCode = "ES"
	ET CountryCode = "ET"
	FI CountryCode = "FI"
	FJ CountryCode = "FJ"
	FK CountryCode = "FK"
	FM CountryCode = "FM"
	FO CountryCode = "FO"
	FR CountryCode = "FR"
	GA CountryCode = "GA"
	GB CountryCode = "GB"
	GD CountryCode = "GD"
	GE CountryCode = "GE"
	GG CountryCode = "GG"
	GH CountryCode = "GH"
	GI CountryCode = "GI"
	GL CountryCode = "GL"
	GM CountryCode = "GM"
	GN CountryCode = "GN"
	GQ CountryCode = "GQ"
	GR CountryCode = "GR"
	GT CountryCode = "GT"
	GU CountryCode = "GU"
	GW CountryCode = "GW"
	GY CountryCode = "GY"
	HK CountryCode = "HK"
	HN CountryCode = "HN"
	HR CountryCode = "HR"
	HT CountryCode = "HT"
	HU CountryCode = "HU"
	ID CountryCode = "ID"
	IE CountryCode = "IE"
	IL CountryCode = "IL"
	IM CountryCode = "IM"
	IN CountryCode = "IN"
	IO CountryCode = "IO"
	IQ CountryCode = "IQ"
	IR CountryCode = "IR"
	IS CountryCode = "IS"
	IT CountryCode = "IT"
	JE CountryCode = "JE"
	JM CountryCode = "JM"
	JO CountryCode = "JO"
	JP CountryCode = "JP"
	KE CountryCode = "KE"
	KG CountryCode = "KG"
	KH CountryCode = "KH"
	KI CountryCode = "KI"
	KM CountryCode = "KM"
	KN CountryCode = "KN"
	KP CountryCode = "KP"
	KR CountryCode = "KR"
	KW CountryCode = "KW"
	KY CountryCode = "KY"
	KZ CountryCode = "KZ"
	LA CountryCode = "LA"
	LB CountryCode = "LB"
	LC CountryCode = "LC"
	LI CountryCode = "LI"
	LK CountryCode = "LK"
	LR CountryCode = "LR"
	LS CountryCode = "LS"
	LT CountryCode = "LT"
	LU CountryCode = "LU"
	LV CountryCode = "LV"
	LY CountryCode = "LY"
	MA CountryCode = "MA"
	MC CountryCode = "MC"
	MD CountryCode = "MD"
	ME CountryCode = "ME"
	MF CountryCode = "MF"
	MG CountryCode = "MG"
	MH CountryCode = "MH"
	MK CountryCode = "MK"
	ML CountryCode = "ML"
	MM CountryCode = "MM"
	MN CountryCode = "MN"
	MO CountryCode = "MO"
	MP CountryCode = "MP"
	MR CountryCode = "MR"
	MS CountryCode = "MS"
	MT CountryCode = "MT"
	MU CountryCode = "MU"
	MV CountryCode = "MV"
	MW CountryCode = "MW"
	MX CountryCode = "MX"
	MY CountryCode = "MY"
	MZ CountryCode = "MZ"
	NA CountryCode = "NA"
	NC CountryCode = "NC"
	NE CountryCode = "NE"
	NG CountryCode = "NG"
	NI CountryCode = "NI"
	NL CountryCode = "NL"
	NO CountryCode = "NO"
	NP CountryCode = "NP"
	NR CountryCode = "NR"
	NU CountryCode = "NU"
	NZ CountryCode = "NZ"
	OM CountryCode = "OM"
	PA CountryCode = "PA"
	PE CountryCode = "PE"
	PF CountryCode = "PF"
	PG CountryCode = "PG"
	PH CountryCode = "PH"
	PK CountryCode = "PK"
	PL CountryCode = "PL"
	PM CountryCode = "PM"
	PN CountryCode = "PN"
	PR CountryCode = "PR"
	PS CountryCode = "PS"
	PT CountryCode = "PT"
	PW CountryCode = "PW"
	PY CountryCode = "PY"
	QA CountryCode = "QA"
	RE CountryCode = "RE"
	RO CountryCode = "RO"
	RS CountryCode = "RS"
	RU CountryCode = "RU"
	RW CountryCode = "RW"
	SA CountryCode = "SA"
	SB CountryCode = "SB"
	SC CountryCode = "SC"
	SD CountryCode = "SD"
	SE CountryCode = "SE"
	SG CountryCode = "SG"
	SH CountryCode = "SH"
	SI CountryCode = "SI"
	SJ CountryCode = "SJ"
	SK CountryCode = "SK"
	SL CountryCode = "SL"
	SM CountryCode = "SM"
	SN CountryCode = "SN"
	SO CountryCode = "SO"
	SR CountryCode = "SR"
	SS CountryCode = "SS"
	ST CountryCode = "ST"
	SV CountryCode = "SV"
	SX CountryCode = "SX"
	SY CountryCode = "SY"
	SZ CountryCode = "SZ"
	TC CountryCode = "TC"
	TD CountryCode = "TD"
	TG CountryCode = "TG"
	TH CountryCode = "TH"
	TJ CountryCode = "TJ"
	TK CountryCode = "TK"
	TL CountryCode = "TL"
	TM CountryCode = "TM"
	TN CountryCode = "TN"
	TO CountryCode = "TO"
	TR CountryCode = "TR"
	TT CountryCode = "TT"
	TV CountryCode = "TV"
	TW CountryCode = "TW"
	TZ CountryCode = "TZ"
	UA CountryCode = "UA"
	UG CountryCode = "UG"
	US CountryCode = "US"
	UY CountryCode = "UY"
	UZ CountryCode = "UZ"
	VA CountryCode = "VA"
	VC CountryCode = "VC"
	VE CountryCode = "VE"
	VG CountryCode = "VG"
	VI CountryCode = "VI"
	VN CountryCode = "VN"
	VU CountryCode = "VU"
	WF CountryCode = "WF"
	WS CountryCode = "WS"
	XK CountryCode = "XK"
	YE CountryCode = "YE"
	YT CountryCode = "YT"
	ZA CountryCode = "ZA"
	ZM CountryCode = "ZM"
	ZW CountryCode = "ZW"
)

// All allowed values of CountryCode enum
var AllowedCountryCodeEnumValues = []CountryCode{
	"AD",
	"AE",
	"AF",
	"AG",
	"AI",
	"AL",
	"AM",
	"AN",
	"AO",
	"AQ",
	"AR",
	"AS",
	"AT",
	"AU",
	"AW",
	"AZ",
	"BA",
	"BB",
	"BD",
	"BE",
	"BF",
	"BG",
	"BH",
	"BI",
	"BJ",
	"BL",
	"BM",
	"BN",
	"BO",
	"BR",
	"BS",
	"BT",
	"BW",
	"BY",
	"BZ",
	"CA",
	"CC",
	"CD",
	"CF",
	"CG",
	"CH",
	"CI",
	"CK",
	"CL",
	"CM",
	"CN",
	"CO",
	"CR",
	"CU",
	"CV",
	"CW",
	"CX",
	"CY",
	"CZ",
	"DE",
	"DJ",
	"DK",
	"DM",
	"DO",
	"DZ",
	"EC",
	"EE",
	"EG",
	"EH",
	"ER",
	"ES",
	"ET",
	"FI",
	"FJ",
	"FK",
	"FM",
	"FO",
	"FR",
	"GA",
	"GB",
	"GD",
	"GE",
	"GG",
	"GH",
	"GI",
	"GL",
	"GM",
	"GN",
	"GQ",
	"GR",
	"GT",
	"GU",
	"GW",
	"GY",
	"HK",
	"HN",
	"HR",
	"HT",
	"HU",
	"ID",
	"IE",
	"IL",
	"IM",
	"IN",
	"IO",
	"IQ",
	"IR",
	"IS",
	"IT",
	"JE",
	"JM",
	"JO",
	"JP",
	"KE",
	"KG",
	"KH",
	"KI",
	"KM",
	"KN",
	"KP",
	"KR",
	"KW",
	"KY",
	"KZ",
	"LA",
	"LB",
	"LC",
	"LI",
	"LK",
	"LR",
	"LS",
	"LT",
	"LU",
	"LV",
	"LY",
	"MA",
	"MC",
	"MD",
	"ME",
	"MF",
	"MG",
	"MH",
	"MK",
	"ML",
	"MM",
	"MN",
	"MO",
	"MP",
	"MR",
	"MS",
	"MT",
	"MU",
	"MV",
	"MW",
	"MX",
	"MY",
	"MZ",
	"NA",
	"NC",
	"NE",
	"NG",
	"NI",
	"NL",
	"NO",
	"NP",
	"NR",
	"NU",
	"NZ",
	"OM",
	"PA",
	"PE",
	"PF",
	"PG",
	"PH",
	"PK",
	"PL",
	"PM",
	"PN",
	"PR",
	"PS",
	"PT",
	"PW",
	"PY",
	"QA",
	"RE",
	"RO",
	"RS",
	"RU",
	"RW",
	"SA",
	"SB",
	"SC",
	"SD",
	"SE",
	"SG",
	"SH",
	"SI",
	"SJ",
	"SK",
	"SL",
	"SM",
	"SN",
	"SO",
	"SR",
	"SS",
	"ST",
	"SV",
	"SX",
	"SY",
	"SZ",
	"TC",
	"TD",
	"TG",
	"TH",
	"TJ",
	"TK",
	"TL",
	"TM",
	"TN",
	"TO",
	"TR",
	"TT",
	"TV",
	"TW",
	"TZ",
	"UA",
	"UG",
	"US",
	"UY",
	"UZ",
	"VA",
	"VC",
	"VE",
	"VG",
	"VI",
	"VN",
	"VU",
	"WF",
	"WS",
	"XK",
	"YE",
	"YT",
	"ZA",
	"ZM",
	"ZW",
}

func (v *CountryCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CountryCode(value)
	for _, existing := range AllowedCountryCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CountryCode", value)
}

// NewCountryCodeFromValue returns a pointer to a valid CountryCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCountryCodeFromValue(v string) (*CountryCode, error) {
	ev := CountryCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CountryCode: valid values are %v", v, AllowedCountryCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CountryCode) IsValid() bool {
	for _, existing := range AllowedCountryCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CountryCode value
func (v CountryCode) Ptr() *CountryCode {
	return &v
}

type NullableCountryCode struct {
	value *CountryCode
	isSet bool
}

func (v NullableCountryCode) Get() *CountryCode {
	return v.value
}

func (v *NullableCountryCode) Set(val *CountryCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryCode(val *CountryCode) *NullableCountryCode {
	return &NullableCountryCode{value: val, isSet: true}
}

func (v NullableCountryCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

