/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TrackingCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackingCategory{}

// TrackingCategory struct for TrackingCategory
type TrackingCategory struct {
	// The Xero identifier for a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
	TrackingCategoryID *string `json:"TrackingCategoryID,omitempty"`
	// The Xero identifier for a tracking option e.g. dc54c220-0140-495a-b925-3246adc0075f
	TrackingOptionID *string `json:"TrackingOptionID,omitempty"`
	// The name of the tracking category e.g. Department, Region (max length = 100)
	Name *string `json:"Name,omitempty"`
	// The option name of the tracking option e.g. East, West (max length = 100)
	Option *string `json:"Option,omitempty"`
	// The status of a tracking category
	Status *string `json:"Status,omitempty"`
	// See Tracking Options
	Options []TrackingOption `json:"Options,omitempty"`
}

// NewTrackingCategory instantiates a new TrackingCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingCategory() *TrackingCategory {
	this := TrackingCategory{}
	return &this
}

// NewTrackingCategoryWithDefaults instantiates a new TrackingCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingCategoryWithDefaults() *TrackingCategory {
	this := TrackingCategory{}
	return &this
}

// GetTrackingCategoryID returns the TrackingCategoryID field value if set, zero value otherwise.
func (o *TrackingCategory) GetTrackingCategoryID() string {
	if o == nil || IsNil(o.TrackingCategoryID) {
		var ret string
		return ret
	}
	return *o.TrackingCategoryID
}

// GetTrackingCategoryIDOk returns a tuple with the TrackingCategoryID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingCategory) GetTrackingCategoryIDOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingCategoryID) {
		return nil, false
	}
	return o.TrackingCategoryID, true
}

// HasTrackingCategoryID returns a boolean if a field has been set.
func (o *TrackingCategory) HasTrackingCategoryID() bool {
	if o != nil && !IsNil(o.TrackingCategoryID) {
		return true
	}

	return false
}

// SetTrackingCategoryID gets a reference to the given string and assigns it to the TrackingCategoryID field.
func (o *TrackingCategory) SetTrackingCategoryID(v string) {
	o.TrackingCategoryID = &v
}

// GetTrackingOptionID returns the TrackingOptionID field value if set, zero value otherwise.
func (o *TrackingCategory) GetTrackingOptionID() string {
	if o == nil || IsNil(o.TrackingOptionID) {
		var ret string
		return ret
	}
	return *o.TrackingOptionID
}

// GetTrackingOptionIDOk returns a tuple with the TrackingOptionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingCategory) GetTrackingOptionIDOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingOptionID) {
		return nil, false
	}
	return o.TrackingOptionID, true
}

// HasTrackingOptionID returns a boolean if a field has been set.
func (o *TrackingCategory) HasTrackingOptionID() bool {
	if o != nil && !IsNil(o.TrackingOptionID) {
		return true
	}

	return false
}

// SetTrackingOptionID gets a reference to the given string and assigns it to the TrackingOptionID field.
func (o *TrackingCategory) SetTrackingOptionID(v string) {
	o.TrackingOptionID = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TrackingCategory) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingCategory) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TrackingCategory) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TrackingCategory) SetName(v string) {
	o.Name = &v
}

// GetOption returns the Option field value if set, zero value otherwise.
func (o *TrackingCategory) GetOption() string {
	if o == nil || IsNil(o.Option) {
		var ret string
		return ret
	}
	return *o.Option
}

// GetOptionOk returns a tuple with the Option field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingCategory) GetOptionOk() (*string, bool) {
	if o == nil || IsNil(o.Option) {
		return nil, false
	}
	return o.Option, true
}

// HasOption returns a boolean if a field has been set.
func (o *TrackingCategory) HasOption() bool {
	if o != nil && !IsNil(o.Option) {
		return true
	}

	return false
}

// SetOption gets a reference to the given string and assigns it to the Option field.
func (o *TrackingCategory) SetOption(v string) {
	o.Option = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TrackingCategory) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingCategory) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TrackingCategory) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TrackingCategory) SetStatus(v string) {
	o.Status = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *TrackingCategory) GetOptions() []TrackingOption {
	if o == nil || IsNil(o.Options) {
		var ret []TrackingOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingCategory) GetOptionsOk() ([]TrackingOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *TrackingCategory) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []TrackingOption and assigns it to the Options field.
func (o *TrackingCategory) SetOptions(v []TrackingOption) {
	o.Options = v
}

func (o TrackingCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackingCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackingCategoryID) {
		toSerialize["TrackingCategoryID"] = o.TrackingCategoryID
	}
	if !IsNil(o.TrackingOptionID) {
		toSerialize["TrackingOptionID"] = o.TrackingOptionID
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Option) {
		toSerialize["Option"] = o.Option
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.Options) {
		toSerialize["Options"] = o.Options
	}
	return toSerialize, nil
}

type NullableTrackingCategory struct {
	value *TrackingCategory
	isSet bool
}

func (v NullableTrackingCategory) Get() *TrackingCategory {
	return v.value
}

func (v *NullableTrackingCategory) Set(val *TrackingCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingCategory(val *TrackingCategory) *NullableTrackingCategory {
	return &NullableTrackingCategory{value: val, isSet: true}
}

func (v NullableTrackingCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


