/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaxRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxRate{}

// TaxRate struct for TaxRate
type TaxRate struct {
	// Name of tax rate
	Name *string `json:"Name,omitempty"`
	// The tax type
	TaxType *string `json:"TaxType,omitempty"`
	// See TaxComponents
	TaxComponents []TaxComponent `json:"TaxComponents,omitempty"`
	// See Status Codes
	Status *string `json:"Status,omitempty"`
	// See ReportTaxTypes
	ReportTaxType *string `json:"ReportTaxType,omitempty"`
	// Boolean to describe if tax rate can be used for asset accounts i.e.  true,false
	CanApplyToAssets *bool `json:"CanApplyToAssets,omitempty"`
	// Boolean to describe if tax rate can be used for equity accounts i.e true,false
	CanApplyToEquity *bool `json:"CanApplyToEquity,omitempty"`
	// Boolean to describe if tax rate can be used for expense accounts  i.e. true,false
	CanApplyToExpenses *bool `json:"CanApplyToExpenses,omitempty"`
	// Boolean to describe if tax rate can be used for liability accounts  i.e. true,false
	CanApplyToLiabilities *bool `json:"CanApplyToLiabilities,omitempty"`
	// Boolean to describe if tax rate can be used for revenue accounts i.e. true,false
	CanApplyToRevenue *bool `json:"CanApplyToRevenue,omitempty"`
	// Tax Rate (decimal to 4dp) e.g 12.5000
	DisplayTaxRate *float64 `json:"DisplayTaxRate,omitempty"`
	// Effective Tax Rate (decimal to 4dp) e.g 12.5000
	EffectiveRate *float64 `json:"EffectiveRate,omitempty"`
}

// NewTaxRate instantiates a new TaxRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxRate() *TaxRate {
	this := TaxRate{}
	return &this
}

// NewTaxRateWithDefaults instantiates a new TaxRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxRateWithDefaults() *TaxRate {
	this := TaxRate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaxRate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaxRate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaxRate) SetName(v string) {
	o.Name = &v
}

// GetTaxType returns the TaxType field value if set, zero value otherwise.
func (o *TaxRate) GetTaxType() string {
	if o == nil || IsNil(o.TaxType) {
		var ret string
		return ret
	}
	return *o.TaxType
}

// GetTaxTypeOk returns a tuple with the TaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetTaxTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TaxType) {
		return nil, false
	}
	return o.TaxType, true
}

// HasTaxType returns a boolean if a field has been set.
func (o *TaxRate) HasTaxType() bool {
	if o != nil && !IsNil(o.TaxType) {
		return true
	}

	return false
}

// SetTaxType gets a reference to the given string and assigns it to the TaxType field.
func (o *TaxRate) SetTaxType(v string) {
	o.TaxType = &v
}

// GetTaxComponents returns the TaxComponents field value if set, zero value otherwise.
func (o *TaxRate) GetTaxComponents() []TaxComponent {
	if o == nil || IsNil(o.TaxComponents) {
		var ret []TaxComponent
		return ret
	}
	return o.TaxComponents
}

// GetTaxComponentsOk returns a tuple with the TaxComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetTaxComponentsOk() ([]TaxComponent, bool) {
	if o == nil || IsNil(o.TaxComponents) {
		return nil, false
	}
	return o.TaxComponents, true
}

// HasTaxComponents returns a boolean if a field has been set.
func (o *TaxRate) HasTaxComponents() bool {
	if o != nil && !IsNil(o.TaxComponents) {
		return true
	}

	return false
}

// SetTaxComponents gets a reference to the given []TaxComponent and assigns it to the TaxComponents field.
func (o *TaxRate) SetTaxComponents(v []TaxComponent) {
	o.TaxComponents = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaxRate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaxRate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TaxRate) SetStatus(v string) {
	o.Status = &v
}

// GetReportTaxType returns the ReportTaxType field value if set, zero value otherwise.
func (o *TaxRate) GetReportTaxType() string {
	if o == nil || IsNil(o.ReportTaxType) {
		var ret string
		return ret
	}
	return *o.ReportTaxType
}

// GetReportTaxTypeOk returns a tuple with the ReportTaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetReportTaxTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReportTaxType) {
		return nil, false
	}
	return o.ReportTaxType, true
}

// HasReportTaxType returns a boolean if a field has been set.
func (o *TaxRate) HasReportTaxType() bool {
	if o != nil && !IsNil(o.ReportTaxType) {
		return true
	}

	return false
}

// SetReportTaxType gets a reference to the given string and assigns it to the ReportTaxType field.
func (o *TaxRate) SetReportTaxType(v string) {
	o.ReportTaxType = &v
}

// GetCanApplyToAssets returns the CanApplyToAssets field value if set, zero value otherwise.
func (o *TaxRate) GetCanApplyToAssets() bool {
	if o == nil || IsNil(o.CanApplyToAssets) {
		var ret bool
		return ret
	}
	return *o.CanApplyToAssets
}

// GetCanApplyToAssetsOk returns a tuple with the CanApplyToAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetCanApplyToAssetsOk() (*bool, bool) {
	if o == nil || IsNil(o.CanApplyToAssets) {
		return nil, false
	}
	return o.CanApplyToAssets, true
}

// HasCanApplyToAssets returns a boolean if a field has been set.
func (o *TaxRate) HasCanApplyToAssets() bool {
	if o != nil && !IsNil(o.CanApplyToAssets) {
		return true
	}

	return false
}

// SetCanApplyToAssets gets a reference to the given bool and assigns it to the CanApplyToAssets field.
func (o *TaxRate) SetCanApplyToAssets(v bool) {
	o.CanApplyToAssets = &v
}

// GetCanApplyToEquity returns the CanApplyToEquity field value if set, zero value otherwise.
func (o *TaxRate) GetCanApplyToEquity() bool {
	if o == nil || IsNil(o.CanApplyToEquity) {
		var ret bool
		return ret
	}
	return *o.CanApplyToEquity
}

// GetCanApplyToEquityOk returns a tuple with the CanApplyToEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetCanApplyToEquityOk() (*bool, bool) {
	if o == nil || IsNil(o.CanApplyToEquity) {
		return nil, false
	}
	return o.CanApplyToEquity, true
}

// HasCanApplyToEquity returns a boolean if a field has been set.
func (o *TaxRate) HasCanApplyToEquity() bool {
	if o != nil && !IsNil(o.CanApplyToEquity) {
		return true
	}

	return false
}

// SetCanApplyToEquity gets a reference to the given bool and assigns it to the CanApplyToEquity field.
func (o *TaxRate) SetCanApplyToEquity(v bool) {
	o.CanApplyToEquity = &v
}

// GetCanApplyToExpenses returns the CanApplyToExpenses field value if set, zero value otherwise.
func (o *TaxRate) GetCanApplyToExpenses() bool {
	if o == nil || IsNil(o.CanApplyToExpenses) {
		var ret bool
		return ret
	}
	return *o.CanApplyToExpenses
}

// GetCanApplyToExpensesOk returns a tuple with the CanApplyToExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetCanApplyToExpensesOk() (*bool, bool) {
	if o == nil || IsNil(o.CanApplyToExpenses) {
		return nil, false
	}
	return o.CanApplyToExpenses, true
}

// HasCanApplyToExpenses returns a boolean if a field has been set.
func (o *TaxRate) HasCanApplyToExpenses() bool {
	if o != nil && !IsNil(o.CanApplyToExpenses) {
		return true
	}

	return false
}

// SetCanApplyToExpenses gets a reference to the given bool and assigns it to the CanApplyToExpenses field.
func (o *TaxRate) SetCanApplyToExpenses(v bool) {
	o.CanApplyToExpenses = &v
}

// GetCanApplyToLiabilities returns the CanApplyToLiabilities field value if set, zero value otherwise.
func (o *TaxRate) GetCanApplyToLiabilities() bool {
	if o == nil || IsNil(o.CanApplyToLiabilities) {
		var ret bool
		return ret
	}
	return *o.CanApplyToLiabilities
}

// GetCanApplyToLiabilitiesOk returns a tuple with the CanApplyToLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetCanApplyToLiabilitiesOk() (*bool, bool) {
	if o == nil || IsNil(o.CanApplyToLiabilities) {
		return nil, false
	}
	return o.CanApplyToLiabilities, true
}

// HasCanApplyToLiabilities returns a boolean if a field has been set.
func (o *TaxRate) HasCanApplyToLiabilities() bool {
	if o != nil && !IsNil(o.CanApplyToLiabilities) {
		return true
	}

	return false
}

// SetCanApplyToLiabilities gets a reference to the given bool and assigns it to the CanApplyToLiabilities field.
func (o *TaxRate) SetCanApplyToLiabilities(v bool) {
	o.CanApplyToLiabilities = &v
}

// GetCanApplyToRevenue returns the CanApplyToRevenue field value if set, zero value otherwise.
func (o *TaxRate) GetCanApplyToRevenue() bool {
	if o == nil || IsNil(o.CanApplyToRevenue) {
		var ret bool
		return ret
	}
	return *o.CanApplyToRevenue
}

// GetCanApplyToRevenueOk returns a tuple with the CanApplyToRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetCanApplyToRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.CanApplyToRevenue) {
		return nil, false
	}
	return o.CanApplyToRevenue, true
}

// HasCanApplyToRevenue returns a boolean if a field has been set.
func (o *TaxRate) HasCanApplyToRevenue() bool {
	if o != nil && !IsNil(o.CanApplyToRevenue) {
		return true
	}

	return false
}

// SetCanApplyToRevenue gets a reference to the given bool and assigns it to the CanApplyToRevenue field.
func (o *TaxRate) SetCanApplyToRevenue(v bool) {
	o.CanApplyToRevenue = &v
}

// GetDisplayTaxRate returns the DisplayTaxRate field value if set, zero value otherwise.
func (o *TaxRate) GetDisplayTaxRate() float64 {
	if o == nil || IsNil(o.DisplayTaxRate) {
		var ret float64
		return ret
	}
	return *o.DisplayTaxRate
}

// GetDisplayTaxRateOk returns a tuple with the DisplayTaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetDisplayTaxRateOk() (*float64, bool) {
	if o == nil || IsNil(o.DisplayTaxRate) {
		return nil, false
	}
	return o.DisplayTaxRate, true
}

// HasDisplayTaxRate returns a boolean if a field has been set.
func (o *TaxRate) HasDisplayTaxRate() bool {
	if o != nil && !IsNil(o.DisplayTaxRate) {
		return true
	}

	return false
}

// SetDisplayTaxRate gets a reference to the given float64 and assigns it to the DisplayTaxRate field.
func (o *TaxRate) SetDisplayTaxRate(v float64) {
	o.DisplayTaxRate = &v
}

// GetEffectiveRate returns the EffectiveRate field value if set, zero value otherwise.
func (o *TaxRate) GetEffectiveRate() float64 {
	if o == nil || IsNil(o.EffectiveRate) {
		var ret float64
		return ret
	}
	return *o.EffectiveRate
}

// GetEffectiveRateOk returns a tuple with the EffectiveRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRate) GetEffectiveRateOk() (*float64, bool) {
	if o == nil || IsNil(o.EffectiveRate) {
		return nil, false
	}
	return o.EffectiveRate, true
}

// HasEffectiveRate returns a boolean if a field has been set.
func (o *TaxRate) HasEffectiveRate() bool {
	if o != nil && !IsNil(o.EffectiveRate) {
		return true
	}

	return false
}

// SetEffectiveRate gets a reference to the given float64 and assigns it to the EffectiveRate field.
func (o *TaxRate) SetEffectiveRate(v float64) {
	o.EffectiveRate = &v
}

func (o TaxRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.TaxType) {
		toSerialize["TaxType"] = o.TaxType
	}
	if !IsNil(o.TaxComponents) {
		toSerialize["TaxComponents"] = o.TaxComponents
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.ReportTaxType) {
		toSerialize["ReportTaxType"] = o.ReportTaxType
	}
	if !IsNil(o.CanApplyToAssets) {
		toSerialize["CanApplyToAssets"] = o.CanApplyToAssets
	}
	if !IsNil(o.CanApplyToEquity) {
		toSerialize["CanApplyToEquity"] = o.CanApplyToEquity
	}
	if !IsNil(o.CanApplyToExpenses) {
		toSerialize["CanApplyToExpenses"] = o.CanApplyToExpenses
	}
	if !IsNil(o.CanApplyToLiabilities) {
		toSerialize["CanApplyToLiabilities"] = o.CanApplyToLiabilities
	}
	if !IsNil(o.CanApplyToRevenue) {
		toSerialize["CanApplyToRevenue"] = o.CanApplyToRevenue
	}
	if !IsNil(o.DisplayTaxRate) {
		toSerialize["DisplayTaxRate"] = o.DisplayTaxRate
	}
	if !IsNil(o.EffectiveRate) {
		toSerialize["EffectiveRate"] = o.EffectiveRate
	}
	return toSerialize, nil
}

type NullableTaxRate struct {
	value *TaxRate
	isSet bool
}

func (v NullableTaxRate) Get() *TaxRate {
	return v.value
}

func (v *NullableTaxRate) Set(val *TaxRate) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxRate) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxRate(val *TaxRate) *NullableTaxRate {
	return &NullableTaxRate{value: val, isSet: true}
}

func (v NullableTaxRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


