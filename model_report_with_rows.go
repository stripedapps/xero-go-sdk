/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReportWithRows type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportWithRows{}

// ReportWithRows struct for ReportWithRows
type ReportWithRows struct {
	Reports []ReportWithRow `json:"Reports,omitempty"`
}

// NewReportWithRows instantiates a new ReportWithRows object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportWithRows() *ReportWithRows {
	this := ReportWithRows{}
	return &this
}

// NewReportWithRowsWithDefaults instantiates a new ReportWithRows object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportWithRowsWithDefaults() *ReportWithRows {
	this := ReportWithRows{}
	return &this
}

// GetReports returns the Reports field value if set, zero value otherwise.
func (o *ReportWithRows) GetReports() []ReportWithRow {
	if o == nil || IsNil(o.Reports) {
		var ret []ReportWithRow
		return ret
	}
	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportWithRows) GetReportsOk() ([]ReportWithRow, bool) {
	if o == nil || IsNil(o.Reports) {
		return nil, false
	}
	return o.Reports, true
}

// HasReports returns a boolean if a field has been set.
func (o *ReportWithRows) HasReports() bool {
	if o != nil && !IsNil(o.Reports) {
		return true
	}

	return false
}

// SetReports gets a reference to the given []ReportWithRow and assigns it to the Reports field.
func (o *ReportWithRows) SetReports(v []ReportWithRow) {
	o.Reports = v
}

func (o ReportWithRows) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportWithRows) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reports) {
		toSerialize["Reports"] = o.Reports
	}
	return toSerialize, nil
}

type NullableReportWithRows struct {
	value *ReportWithRows
	isSet bool
}

func (v NullableReportWithRows) Get() *ReportWithRows {
	return v.value
}

func (v *NullableReportWithRows) Set(val *ReportWithRows) {
	v.value = val
	v.isSet = true
}

func (v NullableReportWithRows) IsSet() bool {
	return v.isSet
}

func (v *NullableReportWithRows) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportWithRows(val *ReportWithRows) *NullableReportWithRows {
	return &NullableReportWithRows{value: val, isSet: true}
}

func (v NullableReportWithRows) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportWithRows) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


