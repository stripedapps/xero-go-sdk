/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LineItemTracking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineItemTracking{}

// LineItemTracking struct for LineItemTracking
type LineItemTracking struct {
	// The Xero identifier for a tracking category
	TrackingCategoryID *string `json:"TrackingCategoryID,omitempty"`
	// The Xero identifier for a tracking category option
	TrackingOptionID *string `json:"TrackingOptionID,omitempty"`
	// The name of the tracking category
	Name *string `json:"Name,omitempty"`
	// See Tracking Options
	Option *string `json:"Option,omitempty"`
}

// NewLineItemTracking instantiates a new LineItemTracking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineItemTracking() *LineItemTracking {
	this := LineItemTracking{}
	return &this
}

// NewLineItemTrackingWithDefaults instantiates a new LineItemTracking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineItemTrackingWithDefaults() *LineItemTracking {
	this := LineItemTracking{}
	return &this
}

// GetTrackingCategoryID returns the TrackingCategoryID field value if set, zero value otherwise.
func (o *LineItemTracking) GetTrackingCategoryID() string {
	if o == nil || IsNil(o.TrackingCategoryID) {
		var ret string
		return ret
	}
	return *o.TrackingCategoryID
}

// GetTrackingCategoryIDOk returns a tuple with the TrackingCategoryID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemTracking) GetTrackingCategoryIDOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingCategoryID) {
		return nil, false
	}
	return o.TrackingCategoryID, true
}

// HasTrackingCategoryID returns a boolean if a field has been set.
func (o *LineItemTracking) HasTrackingCategoryID() bool {
	if o != nil && !IsNil(o.TrackingCategoryID) {
		return true
	}

	return false
}

// SetTrackingCategoryID gets a reference to the given string and assigns it to the TrackingCategoryID field.
func (o *LineItemTracking) SetTrackingCategoryID(v string) {
	o.TrackingCategoryID = &v
}

// GetTrackingOptionID returns the TrackingOptionID field value if set, zero value otherwise.
func (o *LineItemTracking) GetTrackingOptionID() string {
	if o == nil || IsNil(o.TrackingOptionID) {
		var ret string
		return ret
	}
	return *o.TrackingOptionID
}

// GetTrackingOptionIDOk returns a tuple with the TrackingOptionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemTracking) GetTrackingOptionIDOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingOptionID) {
		return nil, false
	}
	return o.TrackingOptionID, true
}

// HasTrackingOptionID returns a boolean if a field has been set.
func (o *LineItemTracking) HasTrackingOptionID() bool {
	if o != nil && !IsNil(o.TrackingOptionID) {
		return true
	}

	return false
}

// SetTrackingOptionID gets a reference to the given string and assigns it to the TrackingOptionID field.
func (o *LineItemTracking) SetTrackingOptionID(v string) {
	o.TrackingOptionID = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LineItemTracking) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemTracking) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LineItemTracking) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LineItemTracking) SetName(v string) {
	o.Name = &v
}

// GetOption returns the Option field value if set, zero value otherwise.
func (o *LineItemTracking) GetOption() string {
	if o == nil || IsNil(o.Option) {
		var ret string
		return ret
	}
	return *o.Option
}

// GetOptionOk returns a tuple with the Option field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemTracking) GetOptionOk() (*string, bool) {
	if o == nil || IsNil(o.Option) {
		return nil, false
	}
	return o.Option, true
}

// HasOption returns a boolean if a field has been set.
func (o *LineItemTracking) HasOption() bool {
	if o != nil && !IsNil(o.Option) {
		return true
	}

	return false
}

// SetOption gets a reference to the given string and assigns it to the Option field.
func (o *LineItemTracking) SetOption(v string) {
	o.Option = &v
}

func (o LineItemTracking) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineItemTracking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackingCategoryID) {
		toSerialize["TrackingCategoryID"] = o.TrackingCategoryID
	}
	if !IsNil(o.TrackingOptionID) {
		toSerialize["TrackingOptionID"] = o.TrackingOptionID
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Option) {
		toSerialize["Option"] = o.Option
	}
	return toSerialize, nil
}

type NullableLineItemTracking struct {
	value *LineItemTracking
	isSet bool
}

func (v NullableLineItemTracking) Get() *LineItemTracking {
	return v.value
}

func (v *NullableLineItemTracking) Set(val *LineItemTracking) {
	v.value = val
	v.isSet = true
}

func (v NullableLineItemTracking) IsSet() bool {
	return v.isSet
}

func (v *NullableLineItemTracking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineItemTracking(val *LineItemTracking) *NullableLineItemTracking {
	return &NullableLineItemTracking{value: val, isSet: true}
}

func (v NullableLineItemTracking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineItemTracking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


