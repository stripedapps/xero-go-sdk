/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReportCell type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportCell{}

// ReportCell struct for ReportCell
type ReportCell struct {
	Value *string `json:"Value,omitempty"`
	Attributes []ReportAttribute `json:"Attributes,omitempty"`
}

// NewReportCell instantiates a new ReportCell object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportCell() *ReportCell {
	this := ReportCell{}
	return &this
}

// NewReportCellWithDefaults instantiates a new ReportCell object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportCellWithDefaults() *ReportCell {
	this := ReportCell{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ReportCell) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportCell) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ReportCell) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ReportCell) SetValue(v string) {
	o.Value = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ReportCell) GetAttributes() []ReportAttribute {
	if o == nil || IsNil(o.Attributes) {
		var ret []ReportAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportCell) GetAttributesOk() ([]ReportAttribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ReportCell) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ReportAttribute and assigns it to the Attributes field.
func (o *ReportCell) SetAttributes(v []ReportAttribute) {
	o.Attributes = v
}

func (o ReportCell) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportCell) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	if !IsNil(o.Attributes) {
		toSerialize["Attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableReportCell struct {
	value *ReportCell
	isSet bool
}

func (v NullableReportCell) Get() *ReportCell {
	return v.value
}

func (v *NullableReportCell) Set(val *ReportCell) {
	v.value = val
	v.isSet = true
}

func (v NullableReportCell) IsSet() bool {
	return v.isSet
}

func (v *NullableReportCell) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportCell(val *ReportCell) *NullableReportCell {
	return &NullableReportCell{value: val, isSet: true}
}

func (v NullableReportCell) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportCell) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


