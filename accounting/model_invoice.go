/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Invoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invoice{}

// Invoice struct for Invoice
type Invoice struct {
	// See Invoice Types
	Type *string `json:"Type,omitempty"`
	Contact *Contact `json:"Contact,omitempty"`
	// See LineItems
	LineItems []LineItem `json:"LineItems,omitempty"`
	// Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
	Date *string `json:"Date,omitempty"`
	// Date invoice is due – YYYY-MM-DD
	DueDate *string `json:"DueDate,omitempty"`
	LineAmountTypes *LineAmountTypes `json:"LineAmountTypes,omitempty"`
	// ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length = 255)
	InvoiceNumber *string `json:"InvoiceNumber,omitempty"`
	// ACCREC only – additional reference number
	Reference *string `json:"Reference,omitempty"`
	// See BrandingThemes
	BrandingThemeID *string `json:"BrandingThemeID,omitempty"`
	// URL link to a source document – shown as “Go to [appName]” in the Xero app
	Url *string `json:"Url,omitempty"`
	CurrencyCode *CurrencyCode `json:"CurrencyCode,omitempty"`
	// The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length = [18].[6])
	CurrencyRate *float64 `json:"CurrencyRate,omitempty"`
	// See Invoice Status Codes
	Status *string `json:"Status,omitempty"`
	// Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved
	SentToContact *bool `json:"SentToContact,omitempty"`
	// Shown on sales invoices (Accounts Receivable) when this has been set
	ExpectedPaymentDate *string `json:"ExpectedPaymentDate,omitempty"`
	// Shown on bills (Accounts Payable) when this has been set
	PlannedPaymentDate *string `json:"PlannedPaymentDate,omitempty"`
	// CIS deduction for UK contractors
	CISDeduction *float64 `json:"CISDeduction,omitempty"`
	// CIS Deduction rate for the organisation
	CISRate *float64 `json:"CISRate,omitempty"`
	// Total of invoice excluding taxes
	SubTotal *float64 `json:"SubTotal,omitempty"`
	// Total tax on invoice
	TotalTax *float64 `json:"TotalTax,omitempty"`
	// Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
	Total *float64 `json:"Total,omitempty"`
	// Total of discounts applied on the invoice line items
	TotalDiscount *float64 `json:"TotalDiscount,omitempty"`
	// Xero generated unique identifier for invoice
	InvoiceID *string `json:"InvoiceID,omitempty"`
	// Xero generated unique identifier for repeating invoices
	RepeatingInvoiceID *string `json:"RepeatingInvoiceID,omitempty"`
	// boolean to indicate if an invoice has an attachment
	HasAttachmentsField *bool `json:"HasAttachments,omitempty"`
	// boolean to indicate if an invoice has a discount
	IsDiscounted *bool `json:"IsDiscounted,omitempty"`
	// See Payments
	Payments []Payment `json:"Payments,omitempty"`
	// See Prepayments
	Prepayments []Prepayment `json:"Prepayments,omitempty"`
	// See Overpayments
	Overpayments []Overpayment `json:"Overpayments,omitempty"`
	// Amount remaining to be paid on invoice
	AmountDue *float64 `json:"AmountDue,omitempty"`
	// Sum of payments received for invoice
	AmountPaid *float64 `json:"AmountPaid,omitempty"`
	// The date the invoice was fully paid. Only returned on fully paid invoices
	FullyPaidOnDate *string `json:"FullyPaidOnDate,omitempty"`
	// Sum of all credit notes, over-payments and pre-payments applied to invoice
	AmountCredited *float64 `json:"AmountCredited,omitempty"`
	// Last modified date UTC format
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	// Details of credit notes that have been applied to an invoice
	CreditNotes []CreditNote `json:"CreditNotes,omitempty"`
	// Displays array of attachments from the API
	Attachments []Attachment `json:"Attachments,omitempty"`
	// A boolean to indicate if a invoice has an validation errors
	HasErrors *bool `json:"HasErrors,omitempty"`
	// A string to indicate if a invoice status
	StatusAttributeString *string `json:"StatusAttributeString,omitempty"`
	// Displays array of validation error messages from the API
	ValidationErrors []ValidationError `json:"ValidationErrors,omitempty"`
	// Displays array of warning messages from the API
	Warnings []ValidationError `json:"Warnings,omitempty"`
}

// NewInvoice instantiates a new Invoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoice() *Invoice {
	this := Invoice{}
	var hasErrors bool = false
	this.HasErrors = &hasErrors
	return &this
}

// NewInvoiceWithDefaults instantiates a new Invoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceWithDefaults() *Invoice {
	this := Invoice{}
	var hasErrors bool = false
	this.HasErrors = &hasErrors
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Invoice) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Invoice) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Invoice) SetType(v string) {
	o.Type = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *Invoice) GetContact() Contact {
	if o == nil || IsNil(o.Contact) {
		var ret Contact
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *Invoice) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given Contact and assigns it to the Contact field.
func (o *Invoice) SetContact(v Contact) {
	o.Contact = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *Invoice) GetLineItems() []LineItem {
	if o == nil || IsNil(o.LineItems) {
		var ret []LineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLineItemsOk() ([]LineItem, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *Invoice) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []LineItem and assigns it to the LineItems field.
func (o *Invoice) SetLineItems(v []LineItem) {
	o.LineItems = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Invoice) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Invoice) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *Invoice) SetDate(v string) {
	o.Date = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Invoice) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Invoice) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *Invoice) SetDueDate(v string) {
	o.DueDate = &v
}

// GetLineAmountTypes returns the LineAmountTypes field value if set, zero value otherwise.
func (o *Invoice) GetLineAmountTypes() LineAmountTypes {
	if o == nil || IsNil(o.LineAmountTypes) {
		var ret LineAmountTypes
		return ret
	}
	return *o.LineAmountTypes
}

// GetLineAmountTypesOk returns a tuple with the LineAmountTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLineAmountTypesOk() (*LineAmountTypes, bool) {
	if o == nil || IsNil(o.LineAmountTypes) {
		return nil, false
	}
	return o.LineAmountTypes, true
}

// HasLineAmountTypes returns a boolean if a field has been set.
func (o *Invoice) HasLineAmountTypes() bool {
	if o != nil && !IsNil(o.LineAmountTypes) {
		return true
	}

	return false
}

// SetLineAmountTypes gets a reference to the given LineAmountTypes and assigns it to the LineAmountTypes field.
func (o *Invoice) SetLineAmountTypes(v LineAmountTypes) {
	o.LineAmountTypes = &v
}

// GetInvoiceNumber returns the InvoiceNumber field value if set, zero value otherwise.
func (o *Invoice) GetInvoiceNumber() string {
	if o == nil || IsNil(o.InvoiceNumber) {
		var ret string
		return ret
	}
	return *o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceNumber) {
		return nil, false
	}
	return o.InvoiceNumber, true
}

// HasInvoiceNumber returns a boolean if a field has been set.
func (o *Invoice) HasInvoiceNumber() bool {
	if o != nil && !IsNil(o.InvoiceNumber) {
		return true
	}

	return false
}

// SetInvoiceNumber gets a reference to the given string and assigns it to the InvoiceNumber field.
func (o *Invoice) SetInvoiceNumber(v string) {
	o.InvoiceNumber = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Invoice) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Invoice) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *Invoice) SetReference(v string) {
	o.Reference = &v
}

// GetBrandingThemeID returns the BrandingThemeID field value if set, zero value otherwise.
func (o *Invoice) GetBrandingThemeID() string {
	if o == nil || IsNil(o.BrandingThemeID) {
		var ret string
		return ret
	}
	return *o.BrandingThemeID
}

// GetBrandingThemeIDOk returns a tuple with the BrandingThemeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetBrandingThemeIDOk() (*string, bool) {
	if o == nil || IsNil(o.BrandingThemeID) {
		return nil, false
	}
	return o.BrandingThemeID, true
}

// HasBrandingThemeID returns a boolean if a field has been set.
func (o *Invoice) HasBrandingThemeID() bool {
	if o != nil && !IsNil(o.BrandingThemeID) {
		return true
	}

	return false
}

// SetBrandingThemeID gets a reference to the given string and assigns it to the BrandingThemeID field.
func (o *Invoice) SetBrandingThemeID(v string) {
	o.BrandingThemeID = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Invoice) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Invoice) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Invoice) SetUrl(v string) {
	o.Url = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *Invoice) GetCurrencyCode() CurrencyCode {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret CurrencyCode
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCurrencyCodeOk() (*CurrencyCode, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *Invoice) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given CurrencyCode and assigns it to the CurrencyCode field.
func (o *Invoice) SetCurrencyCode(v CurrencyCode) {
	o.CurrencyCode = &v
}

// GetCurrencyRate returns the CurrencyRate field value if set, zero value otherwise.
func (o *Invoice) GetCurrencyRate() float64 {
	if o == nil || IsNil(o.CurrencyRate) {
		var ret float64
		return ret
	}
	return *o.CurrencyRate
}

// GetCurrencyRateOk returns a tuple with the CurrencyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCurrencyRateOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrencyRate) {
		return nil, false
	}
	return o.CurrencyRate, true
}

// HasCurrencyRate returns a boolean if a field has been set.
func (o *Invoice) HasCurrencyRate() bool {
	if o != nil && !IsNil(o.CurrencyRate) {
		return true
	}

	return false
}

// SetCurrencyRate gets a reference to the given float64 and assigns it to the CurrencyRate field.
func (o *Invoice) SetCurrencyRate(v float64) {
	o.CurrencyRate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Invoice) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Invoice) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Invoice) SetStatus(v string) {
	o.Status = &v
}

// GetSentToContact returns the SentToContact field value if set, zero value otherwise.
func (o *Invoice) GetSentToContact() bool {
	if o == nil || IsNil(o.SentToContact) {
		var ret bool
		return ret
	}
	return *o.SentToContact
}

// GetSentToContactOk returns a tuple with the SentToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetSentToContactOk() (*bool, bool) {
	if o == nil || IsNil(o.SentToContact) {
		return nil, false
	}
	return o.SentToContact, true
}

// HasSentToContact returns a boolean if a field has been set.
func (o *Invoice) HasSentToContact() bool {
	if o != nil && !IsNil(o.SentToContact) {
		return true
	}

	return false
}

// SetSentToContact gets a reference to the given bool and assigns it to the SentToContact field.
func (o *Invoice) SetSentToContact(v bool) {
	o.SentToContact = &v
}

// GetExpectedPaymentDate returns the ExpectedPaymentDate field value if set, zero value otherwise.
func (o *Invoice) GetExpectedPaymentDate() string {
	if o == nil || IsNil(o.ExpectedPaymentDate) {
		var ret string
		return ret
	}
	return *o.ExpectedPaymentDate
}

// GetExpectedPaymentDateOk returns a tuple with the ExpectedPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetExpectedPaymentDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedPaymentDate) {
		return nil, false
	}
	return o.ExpectedPaymentDate, true
}

// HasExpectedPaymentDate returns a boolean if a field has been set.
func (o *Invoice) HasExpectedPaymentDate() bool {
	if o != nil && !IsNil(o.ExpectedPaymentDate) {
		return true
	}

	return false
}

// SetExpectedPaymentDate gets a reference to the given string and assigns it to the ExpectedPaymentDate field.
func (o *Invoice) SetExpectedPaymentDate(v string) {
	o.ExpectedPaymentDate = &v
}

// GetPlannedPaymentDate returns the PlannedPaymentDate field value if set, zero value otherwise.
func (o *Invoice) GetPlannedPaymentDate() string {
	if o == nil || IsNil(o.PlannedPaymentDate) {
		var ret string
		return ret
	}
	return *o.PlannedPaymentDate
}

// GetPlannedPaymentDateOk returns a tuple with the PlannedPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetPlannedPaymentDateOk() (*string, bool) {
	if o == nil || IsNil(o.PlannedPaymentDate) {
		return nil, false
	}
	return o.PlannedPaymentDate, true
}

// HasPlannedPaymentDate returns a boolean if a field has been set.
func (o *Invoice) HasPlannedPaymentDate() bool {
	if o != nil && !IsNil(o.PlannedPaymentDate) {
		return true
	}

	return false
}

// SetPlannedPaymentDate gets a reference to the given string and assigns it to the PlannedPaymentDate field.
func (o *Invoice) SetPlannedPaymentDate(v string) {
	o.PlannedPaymentDate = &v
}

// GetCISDeduction returns the CISDeduction field value if set, zero value otherwise.
func (o *Invoice) GetCISDeduction() float64 {
	if o == nil || IsNil(o.CISDeduction) {
		var ret float64
		return ret
	}
	return *o.CISDeduction
}

// GetCISDeductionOk returns a tuple with the CISDeduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCISDeductionOk() (*float64, bool) {
	if o == nil || IsNil(o.CISDeduction) {
		return nil, false
	}
	return o.CISDeduction, true
}

// HasCISDeduction returns a boolean if a field has been set.
func (o *Invoice) HasCISDeduction() bool {
	if o != nil && !IsNil(o.CISDeduction) {
		return true
	}

	return false
}

// SetCISDeduction gets a reference to the given float64 and assigns it to the CISDeduction field.
func (o *Invoice) SetCISDeduction(v float64) {
	o.CISDeduction = &v
}

// GetCISRate returns the CISRate field value if set, zero value otherwise.
func (o *Invoice) GetCISRate() float64 {
	if o == nil || IsNil(o.CISRate) {
		var ret float64
		return ret
	}
	return *o.CISRate
}

// GetCISRateOk returns a tuple with the CISRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCISRateOk() (*float64, bool) {
	if o == nil || IsNil(o.CISRate) {
		return nil, false
	}
	return o.CISRate, true
}

// HasCISRate returns a boolean if a field has been set.
func (o *Invoice) HasCISRate() bool {
	if o != nil && !IsNil(o.CISRate) {
		return true
	}

	return false
}

// SetCISRate gets a reference to the given float64 and assigns it to the CISRate field.
func (o *Invoice) SetCISRate(v float64) {
	o.CISRate = &v
}

// GetSubTotal returns the SubTotal field value if set, zero value otherwise.
func (o *Invoice) GetSubTotal() float64 {
	if o == nil || IsNil(o.SubTotal) {
		var ret float64
		return ret
	}
	return *o.SubTotal
}

// GetSubTotalOk returns a tuple with the SubTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetSubTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.SubTotal) {
		return nil, false
	}
	return o.SubTotal, true
}

// HasSubTotal returns a boolean if a field has been set.
func (o *Invoice) HasSubTotal() bool {
	if o != nil && !IsNil(o.SubTotal) {
		return true
	}

	return false
}

// SetSubTotal gets a reference to the given float64 and assigns it to the SubTotal field.
func (o *Invoice) SetSubTotal(v float64) {
	o.SubTotal = &v
}

// GetTotalTax returns the TotalTax field value if set, zero value otherwise.
func (o *Invoice) GetTotalTax() float64 {
	if o == nil || IsNil(o.TotalTax) {
		var ret float64
		return ret
	}
	return *o.TotalTax
}

// GetTotalTaxOk returns a tuple with the TotalTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTotalTaxOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalTax) {
		return nil, false
	}
	return o.TotalTax, true
}

// HasTotalTax returns a boolean if a field has been set.
func (o *Invoice) HasTotalTax() bool {
	if o != nil && !IsNil(o.TotalTax) {
		return true
	}

	return false
}

// SetTotalTax gets a reference to the given float64 and assigns it to the TotalTax field.
func (o *Invoice) SetTotalTax(v float64) {
	o.TotalTax = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Invoice) GetTotal() float64 {
	if o == nil || IsNil(o.Total) {
		var ret float64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Invoice) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float64 and assigns it to the Total field.
func (o *Invoice) SetTotal(v float64) {
	o.Total = &v
}

// GetTotalDiscount returns the TotalDiscount field value if set, zero value otherwise.
func (o *Invoice) GetTotalDiscount() float64 {
	if o == nil || IsNil(o.TotalDiscount) {
		var ret float64
		return ret
	}
	return *o.TotalDiscount
}

// GetTotalDiscountOk returns a tuple with the TotalDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetTotalDiscountOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalDiscount) {
		return nil, false
	}
	return o.TotalDiscount, true
}

// HasTotalDiscount returns a boolean if a field has been set.
func (o *Invoice) HasTotalDiscount() bool {
	if o != nil && !IsNil(o.TotalDiscount) {
		return true
	}

	return false
}

// SetTotalDiscount gets a reference to the given float64 and assigns it to the TotalDiscount field.
func (o *Invoice) SetTotalDiscount(v float64) {
	o.TotalDiscount = &v
}

// GetInvoiceID returns the InvoiceID field value if set, zero value otherwise.
func (o *Invoice) GetInvoiceID() string {
	if o == nil || IsNil(o.InvoiceID) {
		var ret string
		return ret
	}
	return *o.InvoiceID
}

// GetInvoiceIDOk returns a tuple with the InvoiceID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetInvoiceIDOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceID) {
		return nil, false
	}
	return o.InvoiceID, true
}

// HasInvoiceID returns a boolean if a field has been set.
func (o *Invoice) HasInvoiceID() bool {
	if o != nil && !IsNil(o.InvoiceID) {
		return true
	}

	return false
}

// SetInvoiceID gets a reference to the given string and assigns it to the InvoiceID field.
func (o *Invoice) SetInvoiceID(v string) {
	o.InvoiceID = &v
}

// GetRepeatingInvoiceID returns the RepeatingInvoiceID field value if set, zero value otherwise.
func (o *Invoice) GetRepeatingInvoiceID() string {
	if o == nil || IsNil(o.RepeatingInvoiceID) {
		var ret string
		return ret
	}
	return *o.RepeatingInvoiceID
}

// GetRepeatingInvoiceIDOk returns a tuple with the RepeatingInvoiceID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRepeatingInvoiceIDOk() (*string, bool) {
	if o == nil || IsNil(o.RepeatingInvoiceID) {
		return nil, false
	}
	return o.RepeatingInvoiceID, true
}

// HasRepeatingInvoiceID returns a boolean if a field has been set.
func (o *Invoice) HasRepeatingInvoiceID() bool {
	if o != nil && !IsNil(o.RepeatingInvoiceID) {
		return true
	}

	return false
}

// SetRepeatingInvoiceID gets a reference to the given string and assigns it to the RepeatingInvoiceID field.
func (o *Invoice) SetRepeatingInvoiceID(v string) {
	o.RepeatingInvoiceID = &v
}

// GetHasAttachmentsField returns the HasAttachmentsField field value if set, zero value otherwise.
func (o *Invoice) GetHasAttachmentsField() bool {
	if o == nil || IsNil(o.HasAttachmentsField) {
		var ret bool
		return ret
	}
	return *o.HasAttachmentsField
}

// GetHasAttachmentsFieldOk returns a tuple with the HasAttachmentsField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetHasAttachmentsFieldOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAttachmentsField) {
		return nil, false
	}
	return o.HasAttachmentsField, true
}

// HasHasAttachmentsField returns a boolean if a field has been set.
func (o *Invoice) HasHasAttachmentsField() bool {
	if o != nil && !IsNil(o.HasAttachmentsField) {
		return true
	}

	return false
}

// SetHasAttachmentsField gets a reference to the given bool and assigns it to the HasAttachmentsField field.
func (o *Invoice) SetHasAttachmentsField(v bool) {
	o.HasAttachmentsField = &v
}

// GetIsDiscounted returns the IsDiscounted field value if set, zero value otherwise.
func (o *Invoice) GetIsDiscounted() bool {
	if o == nil || IsNil(o.IsDiscounted) {
		var ret bool
		return ret
	}
	return *o.IsDiscounted
}

// GetIsDiscountedOk returns a tuple with the IsDiscounted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetIsDiscountedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDiscounted) {
		return nil, false
	}
	return o.IsDiscounted, true
}

// HasIsDiscounted returns a boolean if a field has been set.
func (o *Invoice) HasIsDiscounted() bool {
	if o != nil && !IsNil(o.IsDiscounted) {
		return true
	}

	return false
}

// SetIsDiscounted gets a reference to the given bool and assigns it to the IsDiscounted field.
func (o *Invoice) SetIsDiscounted(v bool) {
	o.IsDiscounted = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *Invoice) GetPayments() []Payment {
	if o == nil || IsNil(o.Payments) {
		var ret []Payment
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetPaymentsOk() ([]Payment, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *Invoice) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []Payment and assigns it to the Payments field.
func (o *Invoice) SetPayments(v []Payment) {
	o.Payments = v
}

// GetPrepayments returns the Prepayments field value if set, zero value otherwise.
func (o *Invoice) GetPrepayments() []Prepayment {
	if o == nil || IsNil(o.Prepayments) {
		var ret []Prepayment
		return ret
	}
	return o.Prepayments
}

// GetPrepaymentsOk returns a tuple with the Prepayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetPrepaymentsOk() ([]Prepayment, bool) {
	if o == nil || IsNil(o.Prepayments) {
		return nil, false
	}
	return o.Prepayments, true
}

// HasPrepayments returns a boolean if a field has been set.
func (o *Invoice) HasPrepayments() bool {
	if o != nil && !IsNil(o.Prepayments) {
		return true
	}

	return false
}

// SetPrepayments gets a reference to the given []Prepayment and assigns it to the Prepayments field.
func (o *Invoice) SetPrepayments(v []Prepayment) {
	o.Prepayments = v
}

// GetOverpayments returns the Overpayments field value if set, zero value otherwise.
func (o *Invoice) GetOverpayments() []Overpayment {
	if o == nil || IsNil(o.Overpayments) {
		var ret []Overpayment
		return ret
	}
	return o.Overpayments
}

// GetOverpaymentsOk returns a tuple with the Overpayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetOverpaymentsOk() ([]Overpayment, bool) {
	if o == nil || IsNil(o.Overpayments) {
		return nil, false
	}
	return o.Overpayments, true
}

// HasOverpayments returns a boolean if a field has been set.
func (o *Invoice) HasOverpayments() bool {
	if o != nil && !IsNil(o.Overpayments) {
		return true
	}

	return false
}

// SetOverpayments gets a reference to the given []Overpayment and assigns it to the Overpayments field.
func (o *Invoice) SetOverpayments(v []Overpayment) {
	o.Overpayments = v
}

// GetAmountDue returns the AmountDue field value if set, zero value otherwise.
func (o *Invoice) GetAmountDue() float64 {
	if o == nil || IsNil(o.AmountDue) {
		var ret float64
		return ret
	}
	return *o.AmountDue
}

// GetAmountDueOk returns a tuple with the AmountDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAmountDueOk() (*float64, bool) {
	if o == nil || IsNil(o.AmountDue) {
		return nil, false
	}
	return o.AmountDue, true
}

// HasAmountDue returns a boolean if a field has been set.
func (o *Invoice) HasAmountDue() bool {
	if o != nil && !IsNil(o.AmountDue) {
		return true
	}

	return false
}

// SetAmountDue gets a reference to the given float64 and assigns it to the AmountDue field.
func (o *Invoice) SetAmountDue(v float64) {
	o.AmountDue = &v
}

// GetAmountPaid returns the AmountPaid field value if set, zero value otherwise.
func (o *Invoice) GetAmountPaid() float64 {
	if o == nil || IsNil(o.AmountPaid) {
		var ret float64
		return ret
	}
	return *o.AmountPaid
}

// GetAmountPaidOk returns a tuple with the AmountPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAmountPaidOk() (*float64, bool) {
	if o == nil || IsNil(o.AmountPaid) {
		return nil, false
	}
	return o.AmountPaid, true
}

// HasAmountPaid returns a boolean if a field has been set.
func (o *Invoice) HasAmountPaid() bool {
	if o != nil && !IsNil(o.AmountPaid) {
		return true
	}

	return false
}

// SetAmountPaid gets a reference to the given float64 and assigns it to the AmountPaid field.
func (o *Invoice) SetAmountPaid(v float64) {
	o.AmountPaid = &v
}

// GetFullyPaidOnDate returns the FullyPaidOnDate field value if set, zero value otherwise.
func (o *Invoice) GetFullyPaidOnDate() string {
	if o == nil || IsNil(o.FullyPaidOnDate) {
		var ret string
		return ret
	}
	return *o.FullyPaidOnDate
}

// GetFullyPaidOnDateOk returns a tuple with the FullyPaidOnDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetFullyPaidOnDateOk() (*string, bool) {
	if o == nil || IsNil(o.FullyPaidOnDate) {
		return nil, false
	}
	return o.FullyPaidOnDate, true
}

// HasFullyPaidOnDate returns a boolean if a field has been set.
func (o *Invoice) HasFullyPaidOnDate() bool {
	if o != nil && !IsNil(o.FullyPaidOnDate) {
		return true
	}

	return false
}

// SetFullyPaidOnDate gets a reference to the given string and assigns it to the FullyPaidOnDate field.
func (o *Invoice) SetFullyPaidOnDate(v string) {
	o.FullyPaidOnDate = &v
}

// GetAmountCredited returns the AmountCredited field value if set, zero value otherwise.
func (o *Invoice) GetAmountCredited() float64 {
	if o == nil || IsNil(o.AmountCredited) {
		var ret float64
		return ret
	}
	return *o.AmountCredited
}

// GetAmountCreditedOk returns a tuple with the AmountCredited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAmountCreditedOk() (*float64, bool) {
	if o == nil || IsNil(o.AmountCredited) {
		return nil, false
	}
	return o.AmountCredited, true
}

// HasAmountCredited returns a boolean if a field has been set.
func (o *Invoice) HasAmountCredited() bool {
	if o != nil && !IsNil(o.AmountCredited) {
		return true
	}

	return false
}

// SetAmountCredited gets a reference to the given float64 and assigns it to the AmountCredited field.
func (o *Invoice) SetAmountCredited(v float64) {
	o.AmountCredited = &v
}

// GetUpdatedDateUTC returns the UpdatedDateUTC field value if set, zero value otherwise.
func (o *Invoice) GetUpdatedDateUTC() string {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		var ret string
		return ret
	}
	return *o.UpdatedDateUTC
}

// GetUpdatedDateUTCOk returns a tuple with the UpdatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetUpdatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		return nil, false
	}
	return o.UpdatedDateUTC, true
}

// HasUpdatedDateUTC returns a boolean if a field has been set.
func (o *Invoice) HasUpdatedDateUTC() bool {
	if o != nil && !IsNil(o.UpdatedDateUTC) {
		return true
	}

	return false
}

// SetUpdatedDateUTC gets a reference to the given string and assigns it to the UpdatedDateUTC field.
func (o *Invoice) SetUpdatedDateUTC(v string) {
	o.UpdatedDateUTC = &v
}

// GetCreditNotes returns the CreditNotes field value if set, zero value otherwise.
func (o *Invoice) GetCreditNotes() []CreditNote {
	if o == nil || IsNil(o.CreditNotes) {
		var ret []CreditNote
		return ret
	}
	return o.CreditNotes
}

// GetCreditNotesOk returns a tuple with the CreditNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCreditNotesOk() ([]CreditNote, bool) {
	if o == nil || IsNil(o.CreditNotes) {
		return nil, false
	}
	return o.CreditNotes, true
}

// HasCreditNotes returns a boolean if a field has been set.
func (o *Invoice) HasCreditNotes() bool {
	if o != nil && !IsNil(o.CreditNotes) {
		return true
	}

	return false
}

// SetCreditNotes gets a reference to the given []CreditNote and assigns it to the CreditNotes field.
func (o *Invoice) SetCreditNotes(v []CreditNote) {
	o.CreditNotes = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *Invoice) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *Invoice) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *Invoice) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetHasErrors returns the HasErrors field value if set, zero value otherwise.
func (o *Invoice) GetHasErrors() bool {
	if o == nil || IsNil(o.HasErrors) {
		var ret bool
		return ret
	}
	return *o.HasErrors
}

// GetHasErrorsOk returns a tuple with the HasErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetHasErrorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasErrors) {
		return nil, false
	}
	return o.HasErrors, true
}

// HasHasErrors returns a boolean if a field has been set.
func (o *Invoice) HasHasErrors() bool {
	if o != nil && !IsNil(o.HasErrors) {
		return true
	}

	return false
}

// SetHasErrors gets a reference to the given bool and assigns it to the HasErrors field.
func (o *Invoice) SetHasErrors(v bool) {
	o.HasErrors = &v
}

// GetStatusAttributeString returns the StatusAttributeString field value if set, zero value otherwise.
func (o *Invoice) GetStatusAttributeString() string {
	if o == nil || IsNil(o.StatusAttributeString) {
		var ret string
		return ret
	}
	return *o.StatusAttributeString
}

// GetStatusAttributeStringOk returns a tuple with the StatusAttributeString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStatusAttributeStringOk() (*string, bool) {
	if o == nil || IsNil(o.StatusAttributeString) {
		return nil, false
	}
	return o.StatusAttributeString, true
}

// HasStatusAttributeString returns a boolean if a field has been set.
func (o *Invoice) HasStatusAttributeString() bool {
	if o != nil && !IsNil(o.StatusAttributeString) {
		return true
	}

	return false
}

// SetStatusAttributeString gets a reference to the given string and assigns it to the StatusAttributeString field.
func (o *Invoice) SetStatusAttributeString(v string) {
	o.StatusAttributeString = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *Invoice) GetValidationErrors() []ValidationError {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret []ValidationError
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetValidationErrorsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *Invoice) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []ValidationError and assigns it to the ValidationErrors field.
func (o *Invoice) SetValidationErrors(v []ValidationError) {
	o.ValidationErrors = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *Invoice) GetWarnings() []ValidationError {
	if o == nil || IsNil(o.Warnings) {
		var ret []ValidationError
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetWarningsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *Invoice) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []ValidationError and assigns it to the Warnings field.
func (o *Invoice) SetWarnings(v []ValidationError) {
	o.Warnings = v
}

func (o Invoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Contact) {
		toSerialize["Contact"] = o.Contact
	}
	if !IsNil(o.LineItems) {
		toSerialize["LineItems"] = o.LineItems
	}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.DueDate) {
		toSerialize["DueDate"] = o.DueDate
	}
	if !IsNil(o.LineAmountTypes) {
		toSerialize["LineAmountTypes"] = o.LineAmountTypes
	}
	if !IsNil(o.InvoiceNumber) {
		toSerialize["InvoiceNumber"] = o.InvoiceNumber
	}
	if !IsNil(o.Reference) {
		toSerialize["Reference"] = o.Reference
	}
	if !IsNil(o.BrandingThemeID) {
		toSerialize["BrandingThemeID"] = o.BrandingThemeID
	}
	if !IsNil(o.Url) {
		toSerialize["Url"] = o.Url
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["CurrencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencyRate) {
		toSerialize["CurrencyRate"] = o.CurrencyRate
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.SentToContact) {
		toSerialize["SentToContact"] = o.SentToContact
	}
	if !IsNil(o.ExpectedPaymentDate) {
		toSerialize["ExpectedPaymentDate"] = o.ExpectedPaymentDate
	}
	if !IsNil(o.PlannedPaymentDate) {
		toSerialize["PlannedPaymentDate"] = o.PlannedPaymentDate
	}
	if !IsNil(o.CISDeduction) {
		toSerialize["CISDeduction"] = o.CISDeduction
	}
	if !IsNil(o.CISRate) {
		toSerialize["CISRate"] = o.CISRate
	}
	if !IsNil(o.SubTotal) {
		toSerialize["SubTotal"] = o.SubTotal
	}
	if !IsNil(o.TotalTax) {
		toSerialize["TotalTax"] = o.TotalTax
	}
	if !IsNil(o.Total) {
		toSerialize["Total"] = o.Total
	}
	if !IsNil(o.TotalDiscount) {
		toSerialize["TotalDiscount"] = o.TotalDiscount
	}
	if !IsNil(o.InvoiceID) {
		toSerialize["InvoiceID"] = o.InvoiceID
	}
	if !IsNil(o.RepeatingInvoiceID) {
		toSerialize["RepeatingInvoiceID"] = o.RepeatingInvoiceID
	}
	if !IsNil(o.HasAttachmentsField) {
		toSerialize["HasAttachments"] = o.HasAttachmentsField
	}
	if !IsNil(o.IsDiscounted) {
		toSerialize["IsDiscounted"] = o.IsDiscounted
	}
	if !IsNil(o.Payments) {
		toSerialize["Payments"] = o.Payments
	}
	if !IsNil(o.Prepayments) {
		toSerialize["Prepayments"] = o.Prepayments
	}
	if !IsNil(o.Overpayments) {
		toSerialize["Overpayments"] = o.Overpayments
	}
	if !IsNil(o.AmountDue) {
		toSerialize["AmountDue"] = o.AmountDue
	}
	if !IsNil(o.AmountPaid) {
		toSerialize["AmountPaid"] = o.AmountPaid
	}
	if !IsNil(o.FullyPaidOnDate) {
		toSerialize["FullyPaidOnDate"] = o.FullyPaidOnDate
	}
	if !IsNil(o.AmountCredited) {
		toSerialize["AmountCredited"] = o.AmountCredited
	}
	if !IsNil(o.UpdatedDateUTC) {
		toSerialize["UpdatedDateUTC"] = o.UpdatedDateUTC
	}
	if !IsNil(o.CreditNotes) {
		toSerialize["CreditNotes"] = o.CreditNotes
	}
	if !IsNil(o.Attachments) {
		toSerialize["Attachments"] = o.Attachments
	}
	if !IsNil(o.HasErrors) {
		toSerialize["HasErrors"] = o.HasErrors
	}
	if !IsNil(o.StatusAttributeString) {
		toSerialize["StatusAttributeString"] = o.StatusAttributeString
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["ValidationErrors"] = o.ValidationErrors
	}
	if !IsNil(o.Warnings) {
		toSerialize["Warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableInvoice struct {
	value *Invoice
	isSet bool
}

func (v NullableInvoice) Get() *Invoice {
	return v.value
}

func (v *NullableInvoice) Set(val *Invoice) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoice) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoice(val *Invoice) *NullableInvoice {
	return &NullableInvoice{value: val, isSet: true}
}

func (v NullableInvoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


