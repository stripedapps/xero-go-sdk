/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LinkedTransactions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkedTransactions{}

// LinkedTransactions struct for LinkedTransactions
type LinkedTransactions struct {
	LinkedTransactions []LinkedTransaction `json:"LinkedTransactions,omitempty"`
}

// NewLinkedTransactions instantiates a new LinkedTransactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkedTransactions() *LinkedTransactions {
	this := LinkedTransactions{}
	return &this
}

// NewLinkedTransactionsWithDefaults instantiates a new LinkedTransactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkedTransactionsWithDefaults() *LinkedTransactions {
	this := LinkedTransactions{}
	return &this
}

// GetLinkedTransactions returns the LinkedTransactions field value if set, zero value otherwise.
func (o *LinkedTransactions) GetLinkedTransactions() []LinkedTransaction {
	if o == nil || IsNil(o.LinkedTransactions) {
		var ret []LinkedTransaction
		return ret
	}
	return o.LinkedTransactions
}

// GetLinkedTransactionsOk returns a tuple with the LinkedTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedTransactions) GetLinkedTransactionsOk() ([]LinkedTransaction, bool) {
	if o == nil || IsNil(o.LinkedTransactions) {
		return nil, false
	}
	return o.LinkedTransactions, true
}

// HasLinkedTransactions returns a boolean if a field has been set.
func (o *LinkedTransactions) HasLinkedTransactions() bool {
	if o != nil && !IsNil(o.LinkedTransactions) {
		return true
	}

	return false
}

// SetLinkedTransactions gets a reference to the given []LinkedTransaction and assigns it to the LinkedTransactions field.
func (o *LinkedTransactions) SetLinkedTransactions(v []LinkedTransaction) {
	o.LinkedTransactions = v
}

func (o LinkedTransactions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkedTransactions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LinkedTransactions) {
		toSerialize["LinkedTransactions"] = o.LinkedTransactions
	}
	return toSerialize, nil
}

type NullableLinkedTransactions struct {
	value *LinkedTransactions
	isSet bool
}

func (v NullableLinkedTransactions) Get() *LinkedTransactions {
	return v.value
}

func (v *NullableLinkedTransactions) Set(val *LinkedTransactions) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedTransactions(val *LinkedTransactions) *NullableLinkedTransactions {
	return &NullableLinkedTransactions{value: val, isSet: true}
}

func (v NullableLinkedTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


