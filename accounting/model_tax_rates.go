/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaxRates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxRates{}

// TaxRates struct for TaxRates
type TaxRates struct {
	TaxRates []TaxRate `json:"TaxRates,omitempty"`
}

// NewTaxRates instantiates a new TaxRates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxRates() *TaxRates {
	this := TaxRates{}
	return &this
}

// NewTaxRatesWithDefaults instantiates a new TaxRates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxRatesWithDefaults() *TaxRates {
	this := TaxRates{}
	return &this
}

// GetTaxRates returns the TaxRates field value if set, zero value otherwise.
func (o *TaxRates) GetTaxRates() []TaxRate {
	if o == nil || IsNil(o.TaxRates) {
		var ret []TaxRate
		return ret
	}
	return o.TaxRates
}

// GetTaxRatesOk returns a tuple with the TaxRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxRates) GetTaxRatesOk() ([]TaxRate, bool) {
	if o == nil || IsNil(o.TaxRates) {
		return nil, false
	}
	return o.TaxRates, true
}

// HasTaxRates returns a boolean if a field has been set.
func (o *TaxRates) HasTaxRates() bool {
	if o != nil && !IsNil(o.TaxRates) {
		return true
	}

	return false
}

// SetTaxRates gets a reference to the given []TaxRate and assigns it to the TaxRates field.
func (o *TaxRates) SetTaxRates(v []TaxRate) {
	o.TaxRates = v
}

func (o TaxRates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxRates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaxRates) {
		toSerialize["TaxRates"] = o.TaxRates
	}
	return toSerialize, nil
}

type NullableTaxRates struct {
	value *TaxRates
	isSet bool
}

func (v NullableTaxRates) Get() *TaxRates {
	return v.value
}

func (v *NullableTaxRates) Set(val *TaxRates) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxRates) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxRates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxRates(val *TaxRates) *NullableTaxRates {
	return &NullableTaxRates{value: val, isSet: true}
}

func (v NullableTaxRates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxRates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


