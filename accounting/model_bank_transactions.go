/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BankTransactions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BankTransactions{}

// BankTransactions struct for BankTransactions
type BankTransactions struct {
	BankTransactions []BankTransaction `json:"BankTransactions,omitempty"`
}

// NewBankTransactions instantiates a new BankTransactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankTransactions() *BankTransactions {
	this := BankTransactions{}
	return &this
}

// NewBankTransactionsWithDefaults instantiates a new BankTransactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankTransactionsWithDefaults() *BankTransactions {
	this := BankTransactions{}
	return &this
}

// GetBankTransactions returns the BankTransactions field value if set, zero value otherwise.
func (o *BankTransactions) GetBankTransactions() []BankTransaction {
	if o == nil || IsNil(o.BankTransactions) {
		var ret []BankTransaction
		return ret
	}
	return o.BankTransactions
}

// GetBankTransactionsOk returns a tuple with the BankTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransactions) GetBankTransactionsOk() ([]BankTransaction, bool) {
	if o == nil || IsNil(o.BankTransactions) {
		return nil, false
	}
	return o.BankTransactions, true
}

// HasBankTransactions returns a boolean if a field has been set.
func (o *BankTransactions) HasBankTransactions() bool {
	if o != nil && !IsNil(o.BankTransactions) {
		return true
	}

	return false
}

// SetBankTransactions gets a reference to the given []BankTransaction and assigns it to the BankTransactions field.
func (o *BankTransactions) SetBankTransactions(v []BankTransaction) {
	o.BankTransactions = v
}

func (o BankTransactions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankTransactions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankTransactions) {
		toSerialize["BankTransactions"] = o.BankTransactions
	}
	return toSerialize, nil
}

type NullableBankTransactions struct {
	value *BankTransactions
	isSet bool
}

func (v NullableBankTransactions) Get() *BankTransactions {
	return v.value
}

func (v *NullableBankTransactions) Set(val *BankTransactions) {
	v.value = val
	v.isSet = true
}

func (v NullableBankTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullableBankTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankTransactions(val *BankTransactions) *NullableBankTransactions {
	return &NullableBankTransactions{value: val, isSet: true}
}

func (v NullableBankTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


