/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Currencies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Currencies{}

// Currencies struct for Currencies
type Currencies struct {
	Currencies []Currency `json:"Currencies,omitempty"`
}

// NewCurrencies instantiates a new Currencies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencies() *Currencies {
	this := Currencies{}
	return &this
}

// NewCurrenciesWithDefaults instantiates a new Currencies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrenciesWithDefaults() *Currencies {
	this := Currencies{}
	return &this
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *Currencies) GetCurrencies() []Currency {
	if o == nil || IsNil(o.Currencies) {
		var ret []Currency
		return ret
	}
	return o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currencies) GetCurrenciesOk() ([]Currency, bool) {
	if o == nil || IsNil(o.Currencies) {
		return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *Currencies) HasCurrencies() bool {
	if o != nil && !IsNil(o.Currencies) {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given []Currency and assigns it to the Currencies field.
func (o *Currencies) SetCurrencies(v []Currency) {
	o.Currencies = v
}

func (o Currencies) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Currencies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currencies) {
		toSerialize["Currencies"] = o.Currencies
	}
	return toSerialize, nil
}

type NullableCurrencies struct {
	value *Currencies
	isSet bool
}

func (v NullableCurrencies) Get() *Currencies {
	return v.value
}

func (v *NullableCurrencies) Set(val *Currencies) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencies) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencies(val *Currencies) *NullableCurrencies {
	return &NullableCurrencies{value: val, isSet: true}
}

func (v NullableCurrencies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


