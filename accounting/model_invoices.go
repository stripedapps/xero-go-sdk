/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Invoices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invoices{}

// Invoices struct for Invoices
type Invoices struct {
	Invoices []Invoice `json:"Invoices,omitempty"`
}

// NewInvoices instantiates a new Invoices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoices() *Invoices {
	this := Invoices{}
	return &this
}

// NewInvoicesWithDefaults instantiates a new Invoices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoicesWithDefaults() *Invoices {
	this := Invoices{}
	return &this
}

// GetInvoices returns the Invoices field value if set, zero value otherwise.
func (o *Invoices) GetInvoices() []Invoice {
	if o == nil || IsNil(o.Invoices) {
		var ret []Invoice
		return ret
	}
	return o.Invoices
}

// GetInvoicesOk returns a tuple with the Invoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoices) GetInvoicesOk() ([]Invoice, bool) {
	if o == nil || IsNil(o.Invoices) {
		return nil, false
	}
	return o.Invoices, true
}

// HasInvoices returns a boolean if a field has been set.
func (o *Invoices) HasInvoices() bool {
	if o != nil && !IsNil(o.Invoices) {
		return true
	}

	return false
}

// SetInvoices gets a reference to the given []Invoice and assigns it to the Invoices field.
func (o *Invoices) SetInvoices(v []Invoice) {
	o.Invoices = v
}

func (o Invoices) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invoices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Invoices) {
		toSerialize["Invoices"] = o.Invoices
	}
	return toSerialize, nil
}

type NullableInvoices struct {
	value *Invoices
	isSet bool
}

func (v NullableInvoices) Get() *Invoices {
	return v.value
}

func (v *NullableInvoices) Set(val *Invoices) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoices) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoices(val *Invoices) *NullableInvoices {
	return &NullableInvoices{value: val, isSet: true}
}

func (v NullableInvoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


