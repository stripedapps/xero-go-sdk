/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BankTransfers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BankTransfers{}

// BankTransfers struct for BankTransfers
type BankTransfers struct {
	BankTransfers []BankTransfer `json:"BankTransfers,omitempty"`
}

// NewBankTransfers instantiates a new BankTransfers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankTransfers() *BankTransfers {
	this := BankTransfers{}
	return &this
}

// NewBankTransfersWithDefaults instantiates a new BankTransfers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankTransfersWithDefaults() *BankTransfers {
	this := BankTransfers{}
	return &this
}

// GetBankTransfers returns the BankTransfers field value if set, zero value otherwise.
func (o *BankTransfers) GetBankTransfers() []BankTransfer {
	if o == nil || IsNil(o.BankTransfers) {
		var ret []BankTransfer
		return ret
	}
	return o.BankTransfers
}

// GetBankTransfersOk returns a tuple with the BankTransfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransfers) GetBankTransfersOk() ([]BankTransfer, bool) {
	if o == nil || IsNil(o.BankTransfers) {
		return nil, false
	}
	return o.BankTransfers, true
}

// HasBankTransfers returns a boolean if a field has been set.
func (o *BankTransfers) HasBankTransfers() bool {
	if o != nil && !IsNil(o.BankTransfers) {
		return true
	}

	return false
}

// SetBankTransfers gets a reference to the given []BankTransfer and assigns it to the BankTransfers field.
func (o *BankTransfers) SetBankTransfers(v []BankTransfer) {
	o.BankTransfers = v
}

func (o BankTransfers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankTransfers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankTransfers) {
		toSerialize["BankTransfers"] = o.BankTransfers
	}
	return toSerialize, nil
}

type NullableBankTransfers struct {
	value *BankTransfers
	isSet bool
}

func (v NullableBankTransfers) Get() *BankTransfers {
	return v.value
}

func (v *NullableBankTransfers) Set(val *BankTransfers) {
	v.value = val
	v.isSet = true
}

func (v NullableBankTransfers) IsSet() bool {
	return v.isSet
}

func (v *NullableBankTransfers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankTransfers(val *BankTransfers) *NullableBankTransfers {
	return &NullableBankTransfers{value: val, isSet: true}
}

func (v NullableBankTransfers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankTransfers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


