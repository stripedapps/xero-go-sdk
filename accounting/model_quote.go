/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Quote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quote{}

// Quote struct for Quote
type Quote struct {
	// QuoteID GUID is automatically generated and is returned after create or GET.
	QuoteID *string `json:"QuoteID,omitempty"`
	// Unique alpha numeric code identifying a quote (Max Length = 255)
	QuoteNumber *string `json:"QuoteNumber,omitempty"`
	// Additional reference number
	Reference *string `json:"Reference,omitempty"`
	// Terms of the quote
	Terms *string `json:"Terms,omitempty"`
	Contact *Contact `json:"Contact,omitempty"`
	// See LineItems
	LineItems []LineItem `json:"LineItems,omitempty"`
	// Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation
	Date *string `json:"Date,omitempty"`
	// Date the quote was issued (YYYY-MM-DD)
	DateString *string `json:"DateString,omitempty"`
	// Date the quote expires – YYYY-MM-DD.
	ExpiryDate *string `json:"ExpiryDate,omitempty"`
	// Date the quote expires – YYYY-MM-DD.
	ExpiryDateString *string `json:"ExpiryDateString,omitempty"`
	Status *QuoteStatusCodes `json:"Status,omitempty"`
	CurrencyCode *CurrencyCode `json:"CurrencyCode,omitempty"`
	// The currency rate for a multicurrency quote
	CurrencyRate *float64 `json:"CurrencyRate,omitempty"`
	// Total of quote excluding taxes.
	SubTotal *float64 `json:"SubTotal,omitempty"`
	// Total tax on quote
	TotalTax *float64 `json:"TotalTax,omitempty"`
	// Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
	Total *float64 `json:"Total,omitempty"`
	// Total of discounts applied on the quote line items
	TotalDiscount *float64 `json:"TotalDiscount,omitempty"`
	// Title text for the quote
	Title *string `json:"Title,omitempty"`
	// Summary text for the quote
	Summary *string `json:"Summary,omitempty"`
	// See BrandingThemes
	BrandingThemeID *string `json:"BrandingThemeID,omitempty"`
	// Last modified date UTC format
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	LineAmountTypes *QuoteLineAmountTypes `json:"LineAmountTypes,omitempty"`
	// A string to indicate if a invoice status
	StatusAttributeString *string `json:"StatusAttributeString,omitempty"`
	// Displays array of validation error messages from the API
	ValidationErrors []ValidationError `json:"ValidationErrors,omitempty"`
}

// NewQuote instantiates a new Quote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuote() *Quote {
	this := Quote{}
	return &this
}

// NewQuoteWithDefaults instantiates a new Quote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteWithDefaults() *Quote {
	this := Quote{}
	return &this
}

// GetQuoteID returns the QuoteID field value if set, zero value otherwise.
func (o *Quote) GetQuoteID() string {
	if o == nil || IsNil(o.QuoteID) {
		var ret string
		return ret
	}
	return *o.QuoteID
}

// GetQuoteIDOk returns a tuple with the QuoteID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetQuoteIDOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteID) {
		return nil, false
	}
	return o.QuoteID, true
}

// HasQuoteID returns a boolean if a field has been set.
func (o *Quote) HasQuoteID() bool {
	if o != nil && !IsNil(o.QuoteID) {
		return true
	}

	return false
}

// SetQuoteID gets a reference to the given string and assigns it to the QuoteID field.
func (o *Quote) SetQuoteID(v string) {
	o.QuoteID = &v
}

// GetQuoteNumber returns the QuoteNumber field value if set, zero value otherwise.
func (o *Quote) GetQuoteNumber() string {
	if o == nil || IsNil(o.QuoteNumber) {
		var ret string
		return ret
	}
	return *o.QuoteNumber
}

// GetQuoteNumberOk returns a tuple with the QuoteNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetQuoteNumberOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteNumber) {
		return nil, false
	}
	return o.QuoteNumber, true
}

// HasQuoteNumber returns a boolean if a field has been set.
func (o *Quote) HasQuoteNumber() bool {
	if o != nil && !IsNil(o.QuoteNumber) {
		return true
	}

	return false
}

// SetQuoteNumber gets a reference to the given string and assigns it to the QuoteNumber field.
func (o *Quote) SetQuoteNumber(v string) {
	o.QuoteNumber = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Quote) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Quote) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *Quote) SetReference(v string) {
	o.Reference = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *Quote) GetTerms() string {
	if o == nil || IsNil(o.Terms) {
		var ret string
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetTermsOk() (*string, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *Quote) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given string and assigns it to the Terms field.
func (o *Quote) SetTerms(v string) {
	o.Terms = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *Quote) GetContact() Contact {
	if o == nil || IsNil(o.Contact) {
		var ret Contact
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *Quote) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given Contact and assigns it to the Contact field.
func (o *Quote) SetContact(v Contact) {
	o.Contact = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *Quote) GetLineItems() []LineItem {
	if o == nil || IsNil(o.LineItems) {
		var ret []LineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetLineItemsOk() ([]LineItem, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *Quote) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []LineItem and assigns it to the LineItems field.
func (o *Quote) SetLineItems(v []LineItem) {
	o.LineItems = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Quote) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Quote) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *Quote) SetDate(v string) {
	o.Date = &v
}

// GetDateString returns the DateString field value if set, zero value otherwise.
func (o *Quote) GetDateString() string {
	if o == nil || IsNil(o.DateString) {
		var ret string
		return ret
	}
	return *o.DateString
}

// GetDateStringOk returns a tuple with the DateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetDateStringOk() (*string, bool) {
	if o == nil || IsNil(o.DateString) {
		return nil, false
	}
	return o.DateString, true
}

// HasDateString returns a boolean if a field has been set.
func (o *Quote) HasDateString() bool {
	if o != nil && !IsNil(o.DateString) {
		return true
	}

	return false
}

// SetDateString gets a reference to the given string and assigns it to the DateString field.
func (o *Quote) SetDateString(v string) {
	o.DateString = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *Quote) GetExpiryDate() string {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret string
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetExpiryDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *Quote) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given string and assigns it to the ExpiryDate field.
func (o *Quote) SetExpiryDate(v string) {
	o.ExpiryDate = &v
}

// GetExpiryDateString returns the ExpiryDateString field value if set, zero value otherwise.
func (o *Quote) GetExpiryDateString() string {
	if o == nil || IsNil(o.ExpiryDateString) {
		var ret string
		return ret
	}
	return *o.ExpiryDateString
}

// GetExpiryDateStringOk returns a tuple with the ExpiryDateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetExpiryDateStringOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiryDateString) {
		return nil, false
	}
	return o.ExpiryDateString, true
}

// HasExpiryDateString returns a boolean if a field has been set.
func (o *Quote) HasExpiryDateString() bool {
	if o != nil && !IsNil(o.ExpiryDateString) {
		return true
	}

	return false
}

// SetExpiryDateString gets a reference to the given string and assigns it to the ExpiryDateString field.
func (o *Quote) SetExpiryDateString(v string) {
	o.ExpiryDateString = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Quote) GetStatus() QuoteStatusCodes {
	if o == nil || IsNil(o.Status) {
		var ret QuoteStatusCodes
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetStatusOk() (*QuoteStatusCodes, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Quote) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given QuoteStatusCodes and assigns it to the Status field.
func (o *Quote) SetStatus(v QuoteStatusCodes) {
	o.Status = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *Quote) GetCurrencyCode() CurrencyCode {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret CurrencyCode
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetCurrencyCodeOk() (*CurrencyCode, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *Quote) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given CurrencyCode and assigns it to the CurrencyCode field.
func (o *Quote) SetCurrencyCode(v CurrencyCode) {
	o.CurrencyCode = &v
}

// GetCurrencyRate returns the CurrencyRate field value if set, zero value otherwise.
func (o *Quote) GetCurrencyRate() float64 {
	if o == nil || IsNil(o.CurrencyRate) {
		var ret float64
		return ret
	}
	return *o.CurrencyRate
}

// GetCurrencyRateOk returns a tuple with the CurrencyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetCurrencyRateOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrencyRate) {
		return nil, false
	}
	return o.CurrencyRate, true
}

// HasCurrencyRate returns a boolean if a field has been set.
func (o *Quote) HasCurrencyRate() bool {
	if o != nil && !IsNil(o.CurrencyRate) {
		return true
	}

	return false
}

// SetCurrencyRate gets a reference to the given float64 and assigns it to the CurrencyRate field.
func (o *Quote) SetCurrencyRate(v float64) {
	o.CurrencyRate = &v
}

// GetSubTotal returns the SubTotal field value if set, zero value otherwise.
func (o *Quote) GetSubTotal() float64 {
	if o == nil || IsNil(o.SubTotal) {
		var ret float64
		return ret
	}
	return *o.SubTotal
}

// GetSubTotalOk returns a tuple with the SubTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetSubTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.SubTotal) {
		return nil, false
	}
	return o.SubTotal, true
}

// HasSubTotal returns a boolean if a field has been set.
func (o *Quote) HasSubTotal() bool {
	if o != nil && !IsNil(o.SubTotal) {
		return true
	}

	return false
}

// SetSubTotal gets a reference to the given float64 and assigns it to the SubTotal field.
func (o *Quote) SetSubTotal(v float64) {
	o.SubTotal = &v
}

// GetTotalTax returns the TotalTax field value if set, zero value otherwise.
func (o *Quote) GetTotalTax() float64 {
	if o == nil || IsNil(o.TotalTax) {
		var ret float64
		return ret
	}
	return *o.TotalTax
}

// GetTotalTaxOk returns a tuple with the TotalTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetTotalTaxOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalTax) {
		return nil, false
	}
	return o.TotalTax, true
}

// HasTotalTax returns a boolean if a field has been set.
func (o *Quote) HasTotalTax() bool {
	if o != nil && !IsNil(o.TotalTax) {
		return true
	}

	return false
}

// SetTotalTax gets a reference to the given float64 and assigns it to the TotalTax field.
func (o *Quote) SetTotalTax(v float64) {
	o.TotalTax = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Quote) GetTotal() float64 {
	if o == nil || IsNil(o.Total) {
		var ret float64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Quote) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float64 and assigns it to the Total field.
func (o *Quote) SetTotal(v float64) {
	o.Total = &v
}

// GetTotalDiscount returns the TotalDiscount field value if set, zero value otherwise.
func (o *Quote) GetTotalDiscount() float64 {
	if o == nil || IsNil(o.TotalDiscount) {
		var ret float64
		return ret
	}
	return *o.TotalDiscount
}

// GetTotalDiscountOk returns a tuple with the TotalDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetTotalDiscountOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalDiscount) {
		return nil, false
	}
	return o.TotalDiscount, true
}

// HasTotalDiscount returns a boolean if a field has been set.
func (o *Quote) HasTotalDiscount() bool {
	if o != nil && !IsNil(o.TotalDiscount) {
		return true
	}

	return false
}

// SetTotalDiscount gets a reference to the given float64 and assigns it to the TotalDiscount field.
func (o *Quote) SetTotalDiscount(v float64) {
	o.TotalDiscount = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Quote) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Quote) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Quote) SetTitle(v string) {
	o.Title = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *Quote) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *Quote) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *Quote) SetSummary(v string) {
	o.Summary = &v
}

// GetBrandingThemeID returns the BrandingThemeID field value if set, zero value otherwise.
func (o *Quote) GetBrandingThemeID() string {
	if o == nil || IsNil(o.BrandingThemeID) {
		var ret string
		return ret
	}
	return *o.BrandingThemeID
}

// GetBrandingThemeIDOk returns a tuple with the BrandingThemeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetBrandingThemeIDOk() (*string, bool) {
	if o == nil || IsNil(o.BrandingThemeID) {
		return nil, false
	}
	return o.BrandingThemeID, true
}

// HasBrandingThemeID returns a boolean if a field has been set.
func (o *Quote) HasBrandingThemeID() bool {
	if o != nil && !IsNil(o.BrandingThemeID) {
		return true
	}

	return false
}

// SetBrandingThemeID gets a reference to the given string and assigns it to the BrandingThemeID field.
func (o *Quote) SetBrandingThemeID(v string) {
	o.BrandingThemeID = &v
}

// GetUpdatedDateUTC returns the UpdatedDateUTC field value if set, zero value otherwise.
func (o *Quote) GetUpdatedDateUTC() string {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		var ret string
		return ret
	}
	return *o.UpdatedDateUTC
}

// GetUpdatedDateUTCOk returns a tuple with the UpdatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetUpdatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		return nil, false
	}
	return o.UpdatedDateUTC, true
}

// HasUpdatedDateUTC returns a boolean if a field has been set.
func (o *Quote) HasUpdatedDateUTC() bool {
	if o != nil && !IsNil(o.UpdatedDateUTC) {
		return true
	}

	return false
}

// SetUpdatedDateUTC gets a reference to the given string and assigns it to the UpdatedDateUTC field.
func (o *Quote) SetUpdatedDateUTC(v string) {
	o.UpdatedDateUTC = &v
}

// GetLineAmountTypes returns the LineAmountTypes field value if set, zero value otherwise.
func (o *Quote) GetLineAmountTypes() QuoteLineAmountTypes {
	if o == nil || IsNil(o.LineAmountTypes) {
		var ret QuoteLineAmountTypes
		return ret
	}
	return *o.LineAmountTypes
}

// GetLineAmountTypesOk returns a tuple with the LineAmountTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetLineAmountTypesOk() (*QuoteLineAmountTypes, bool) {
	if o == nil || IsNil(o.LineAmountTypes) {
		return nil, false
	}
	return o.LineAmountTypes, true
}

// HasLineAmountTypes returns a boolean if a field has been set.
func (o *Quote) HasLineAmountTypes() bool {
	if o != nil && !IsNil(o.LineAmountTypes) {
		return true
	}

	return false
}

// SetLineAmountTypes gets a reference to the given QuoteLineAmountTypes and assigns it to the LineAmountTypes field.
func (o *Quote) SetLineAmountTypes(v QuoteLineAmountTypes) {
	o.LineAmountTypes = &v
}

// GetStatusAttributeString returns the StatusAttributeString field value if set, zero value otherwise.
func (o *Quote) GetStatusAttributeString() string {
	if o == nil || IsNil(o.StatusAttributeString) {
		var ret string
		return ret
	}
	return *o.StatusAttributeString
}

// GetStatusAttributeStringOk returns a tuple with the StatusAttributeString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetStatusAttributeStringOk() (*string, bool) {
	if o == nil || IsNil(o.StatusAttributeString) {
		return nil, false
	}
	return o.StatusAttributeString, true
}

// HasStatusAttributeString returns a boolean if a field has been set.
func (o *Quote) HasStatusAttributeString() bool {
	if o != nil && !IsNil(o.StatusAttributeString) {
		return true
	}

	return false
}

// SetStatusAttributeString gets a reference to the given string and assigns it to the StatusAttributeString field.
func (o *Quote) SetStatusAttributeString(v string) {
	o.StatusAttributeString = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *Quote) GetValidationErrors() []ValidationError {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret []ValidationError
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetValidationErrorsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *Quote) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []ValidationError and assigns it to the ValidationErrors field.
func (o *Quote) SetValidationErrors(v []ValidationError) {
	o.ValidationErrors = v
}

func (o Quote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QuoteID) {
		toSerialize["QuoteID"] = o.QuoteID
	}
	if !IsNil(o.QuoteNumber) {
		toSerialize["QuoteNumber"] = o.QuoteNumber
	}
	if !IsNil(o.Reference) {
		toSerialize["Reference"] = o.Reference
	}
	if !IsNil(o.Terms) {
		toSerialize["Terms"] = o.Terms
	}
	if !IsNil(o.Contact) {
		toSerialize["Contact"] = o.Contact
	}
	if !IsNil(o.LineItems) {
		toSerialize["LineItems"] = o.LineItems
	}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.DateString) {
		toSerialize["DateString"] = o.DateString
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["ExpiryDate"] = o.ExpiryDate
	}
	if !IsNil(o.ExpiryDateString) {
		toSerialize["ExpiryDateString"] = o.ExpiryDateString
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["CurrencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencyRate) {
		toSerialize["CurrencyRate"] = o.CurrencyRate
	}
	if !IsNil(o.SubTotal) {
		toSerialize["SubTotal"] = o.SubTotal
	}
	if !IsNil(o.TotalTax) {
		toSerialize["TotalTax"] = o.TotalTax
	}
	if !IsNil(o.Total) {
		toSerialize["Total"] = o.Total
	}
	if !IsNil(o.TotalDiscount) {
		toSerialize["TotalDiscount"] = o.TotalDiscount
	}
	if !IsNil(o.Title) {
		toSerialize["Title"] = o.Title
	}
	if !IsNil(o.Summary) {
		toSerialize["Summary"] = o.Summary
	}
	if !IsNil(o.BrandingThemeID) {
		toSerialize["BrandingThemeID"] = o.BrandingThemeID
	}
	if !IsNil(o.UpdatedDateUTC) {
		toSerialize["UpdatedDateUTC"] = o.UpdatedDateUTC
	}
	if !IsNil(o.LineAmountTypes) {
		toSerialize["LineAmountTypes"] = o.LineAmountTypes
	}
	if !IsNil(o.StatusAttributeString) {
		toSerialize["StatusAttributeString"] = o.StatusAttributeString
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["ValidationErrors"] = o.ValidationErrors
	}
	return toSerialize, nil
}

type NullableQuote struct {
	value *Quote
	isSet bool
}

func (v NullableQuote) Get() *Quote {
	return v.value
}

func (v *NullableQuote) Set(val *Quote) {
	v.value = val
	v.isSet = true
}

func (v NullableQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuote(val *Quote) *NullableQuote {
	return &NullableQuote{value: val, isSet: true}
}

func (v NullableQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


