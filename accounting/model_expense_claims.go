/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExpenseClaims type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpenseClaims{}

// ExpenseClaims struct for ExpenseClaims
type ExpenseClaims struct {
	ExpenseClaims []ExpenseClaim `json:"ExpenseClaims,omitempty"`
}

// NewExpenseClaims instantiates a new ExpenseClaims object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpenseClaims() *ExpenseClaims {
	this := ExpenseClaims{}
	return &this
}

// NewExpenseClaimsWithDefaults instantiates a new ExpenseClaims object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpenseClaimsWithDefaults() *ExpenseClaims {
	this := ExpenseClaims{}
	return &this
}

// GetExpenseClaims returns the ExpenseClaims field value if set, zero value otherwise.
func (o *ExpenseClaims) GetExpenseClaims() []ExpenseClaim {
	if o == nil || IsNil(o.ExpenseClaims) {
		var ret []ExpenseClaim
		return ret
	}
	return o.ExpenseClaims
}

// GetExpenseClaimsOk returns a tuple with the ExpenseClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpenseClaims) GetExpenseClaimsOk() ([]ExpenseClaim, bool) {
	if o == nil || IsNil(o.ExpenseClaims) {
		return nil, false
	}
	return o.ExpenseClaims, true
}

// HasExpenseClaims returns a boolean if a field has been set.
func (o *ExpenseClaims) HasExpenseClaims() bool {
	if o != nil && !IsNil(o.ExpenseClaims) {
		return true
	}

	return false
}

// SetExpenseClaims gets a reference to the given []ExpenseClaim and assigns it to the ExpenseClaims field.
func (o *ExpenseClaims) SetExpenseClaims(v []ExpenseClaim) {
	o.ExpenseClaims = v
}

func (o ExpenseClaims) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpenseClaims) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpenseClaims) {
		toSerialize["ExpenseClaims"] = o.ExpenseClaims
	}
	return toSerialize, nil
}

type NullableExpenseClaims struct {
	value *ExpenseClaims
	isSet bool
}

func (v NullableExpenseClaims) Get() *ExpenseClaims {
	return v.value
}

func (v *NullableExpenseClaims) Set(val *ExpenseClaims) {
	v.value = val
	v.isSet = true
}

func (v NullableExpenseClaims) IsSet() bool {
	return v.isSet
}

func (v *NullableExpenseClaims) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpenseClaims(val *ExpenseClaims) *NullableExpenseClaims {
	return &NullableExpenseClaims{value: val, isSet: true}
}

func (v NullableExpenseClaims) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpenseClaims) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


