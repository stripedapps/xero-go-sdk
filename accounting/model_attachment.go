/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Attachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attachment{}

// Attachment struct for Attachment
type Attachment struct {
	// Unique ID for the file
	AttachmentID *string `json:"AttachmentID,omitempty"`
	// Name of the file
	FileName *string `json:"FileName,omitempty"`
	// URL to the file on xero.com
	Url *string `json:"Url,omitempty"`
	// Type of file
	MimeType *string `json:"MimeType,omitempty"`
	// Length of the file content
	ContentLength *int32 `json:"ContentLength,omitempty"`
	// Include the file with the online invoice
	IncludeOnline *bool `json:"IncludeOnline,omitempty"`
}

// NewAttachment instantiates a new Attachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachment() *Attachment {
	this := Attachment{}
	return &this
}

// NewAttachmentWithDefaults instantiates a new Attachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentWithDefaults() *Attachment {
	this := Attachment{}
	return &this
}

// GetAttachmentID returns the AttachmentID field value if set, zero value otherwise.
func (o *Attachment) GetAttachmentID() string {
	if o == nil || IsNil(o.AttachmentID) {
		var ret string
		return ret
	}
	return *o.AttachmentID
}

// GetAttachmentIDOk returns a tuple with the AttachmentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetAttachmentIDOk() (*string, bool) {
	if o == nil || IsNil(o.AttachmentID) {
		return nil, false
	}
	return o.AttachmentID, true
}

// HasAttachmentID returns a boolean if a field has been set.
func (o *Attachment) HasAttachmentID() bool {
	if o != nil && !IsNil(o.AttachmentID) {
		return true
	}

	return false
}

// SetAttachmentID gets a reference to the given string and assigns it to the AttachmentID field.
func (o *Attachment) SetAttachmentID(v string) {
	o.AttachmentID = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *Attachment) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *Attachment) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *Attachment) SetFileName(v string) {
	o.FileName = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Attachment) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Attachment) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Attachment) SetUrl(v string) {
	o.Url = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *Attachment) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *Attachment) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *Attachment) SetMimeType(v string) {
	o.MimeType = &v
}

// GetContentLength returns the ContentLength field value if set, zero value otherwise.
func (o *Attachment) GetContentLength() int32 {
	if o == nil || IsNil(o.ContentLength) {
		var ret int32
		return ret
	}
	return *o.ContentLength
}

// GetContentLengthOk returns a tuple with the ContentLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetContentLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.ContentLength) {
		return nil, false
	}
	return o.ContentLength, true
}

// HasContentLength returns a boolean if a field has been set.
func (o *Attachment) HasContentLength() bool {
	if o != nil && !IsNil(o.ContentLength) {
		return true
	}

	return false
}

// SetContentLength gets a reference to the given int32 and assigns it to the ContentLength field.
func (o *Attachment) SetContentLength(v int32) {
	o.ContentLength = &v
}

// GetIncludeOnline returns the IncludeOnline field value if set, zero value otherwise.
func (o *Attachment) GetIncludeOnline() bool {
	if o == nil || IsNil(o.IncludeOnline) {
		var ret bool
		return ret
	}
	return *o.IncludeOnline
}

// GetIncludeOnlineOk returns a tuple with the IncludeOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetIncludeOnlineOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeOnline) {
		return nil, false
	}
	return o.IncludeOnline, true
}

// HasIncludeOnline returns a boolean if a field has been set.
func (o *Attachment) HasIncludeOnline() bool {
	if o != nil && !IsNil(o.IncludeOnline) {
		return true
	}

	return false
}

// SetIncludeOnline gets a reference to the given bool and assigns it to the IncludeOnline field.
func (o *Attachment) SetIncludeOnline(v bool) {
	o.IncludeOnline = &v
}

func (o Attachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachmentID) {
		toSerialize["AttachmentID"] = o.AttachmentID
	}
	if !IsNil(o.FileName) {
		toSerialize["FileName"] = o.FileName
	}
	if !IsNil(o.Url) {
		toSerialize["Url"] = o.Url
	}
	if !IsNil(o.MimeType) {
		toSerialize["MimeType"] = o.MimeType
	}
	if !IsNil(o.ContentLength) {
		toSerialize["ContentLength"] = o.ContentLength
	}
	if !IsNil(o.IncludeOnline) {
		toSerialize["IncludeOnline"] = o.IncludeOnline
	}
	return toSerialize, nil
}

type NullableAttachment struct {
	value *Attachment
	isSet bool
}

func (v NullableAttachment) Get() *Attachment {
	return v.value
}

func (v *NullableAttachment) Set(val *Attachment) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachment(val *Attachment) *NullableAttachment {
	return &NullableAttachment{value: val, isSet: true}
}

func (v NullableAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


