/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Purchase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Purchase{}

// Purchase struct for Purchase
type Purchase struct {
	// Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp=4 querystring parameter to your request.
	UnitPrice *float64 `json:"UnitPrice,omitempty"`
	// Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items
	AccountCode *string `json:"AccountCode,omitempty"`
	// Cost of goods sold account. Only applicable to the purchase details of tracked items.
	COGSAccountCode *string `json:"COGSAccountCode,omitempty"`
	// The tax type from TaxRates
	TaxType *string `json:"TaxType,omitempty"`
}

// NewPurchase instantiates a new Purchase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchase() *Purchase {
	this := Purchase{}
	return &this
}

// NewPurchaseWithDefaults instantiates a new Purchase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseWithDefaults() *Purchase {
	this := Purchase{}
	return &this
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *Purchase) GetUnitPrice() float64 {
	if o == nil || IsNil(o.UnitPrice) {
		var ret float64
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purchase) GetUnitPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *Purchase) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given float64 and assigns it to the UnitPrice field.
func (o *Purchase) SetUnitPrice(v float64) {
	o.UnitPrice = &v
}

// GetAccountCode returns the AccountCode field value if set, zero value otherwise.
func (o *Purchase) GetAccountCode() string {
	if o == nil || IsNil(o.AccountCode) {
		var ret string
		return ret
	}
	return *o.AccountCode
}

// GetAccountCodeOk returns a tuple with the AccountCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purchase) GetAccountCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountCode) {
		return nil, false
	}
	return o.AccountCode, true
}

// HasAccountCode returns a boolean if a field has been set.
func (o *Purchase) HasAccountCode() bool {
	if o != nil && !IsNil(o.AccountCode) {
		return true
	}

	return false
}

// SetAccountCode gets a reference to the given string and assigns it to the AccountCode field.
func (o *Purchase) SetAccountCode(v string) {
	o.AccountCode = &v
}

// GetCOGSAccountCode returns the COGSAccountCode field value if set, zero value otherwise.
func (o *Purchase) GetCOGSAccountCode() string {
	if o == nil || IsNil(o.COGSAccountCode) {
		var ret string
		return ret
	}
	return *o.COGSAccountCode
}

// GetCOGSAccountCodeOk returns a tuple with the COGSAccountCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purchase) GetCOGSAccountCodeOk() (*string, bool) {
	if o == nil || IsNil(o.COGSAccountCode) {
		return nil, false
	}
	return o.COGSAccountCode, true
}

// HasCOGSAccountCode returns a boolean if a field has been set.
func (o *Purchase) HasCOGSAccountCode() bool {
	if o != nil && !IsNil(o.COGSAccountCode) {
		return true
	}

	return false
}

// SetCOGSAccountCode gets a reference to the given string and assigns it to the COGSAccountCode field.
func (o *Purchase) SetCOGSAccountCode(v string) {
	o.COGSAccountCode = &v
}

// GetTaxType returns the TaxType field value if set, zero value otherwise.
func (o *Purchase) GetTaxType() string {
	if o == nil || IsNil(o.TaxType) {
		var ret string
		return ret
	}
	return *o.TaxType
}

// GetTaxTypeOk returns a tuple with the TaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Purchase) GetTaxTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TaxType) {
		return nil, false
	}
	return o.TaxType, true
}

// HasTaxType returns a boolean if a field has been set.
func (o *Purchase) HasTaxType() bool {
	if o != nil && !IsNil(o.TaxType) {
		return true
	}

	return false
}

// SetTaxType gets a reference to the given string and assigns it to the TaxType field.
func (o *Purchase) SetTaxType(v string) {
	o.TaxType = &v
}

func (o Purchase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Purchase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UnitPrice) {
		toSerialize["UnitPrice"] = o.UnitPrice
	}
	if !IsNil(o.AccountCode) {
		toSerialize["AccountCode"] = o.AccountCode
	}
	if !IsNil(o.COGSAccountCode) {
		toSerialize["COGSAccountCode"] = o.COGSAccountCode
	}
	if !IsNil(o.TaxType) {
		toSerialize["TaxType"] = o.TaxType
	}
	return toSerialize, nil
}

type NullablePurchase struct {
	value *Purchase
	isSet bool
}

func (v NullablePurchase) Get() *Purchase {
	return v.value
}

func (v *NullablePurchase) Set(val *Purchase) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchase) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchase(val *Purchase) *NullablePurchase {
	return &NullablePurchase{value: val, isSet: true}
}

func (v NullablePurchase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


