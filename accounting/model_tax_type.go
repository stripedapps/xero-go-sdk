/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TaxType See Tax Types â€“ can only be used on update calls
type TaxType string

// List of TaxType
const (
	TAXTYPE_OUTPUT TaxType = "OUTPUT"
	TAXTYPE_INPUT TaxType = "INPUT"
	TAXTYPE_CAPEXINPUT TaxType = "CAPEXINPUT"
	TAXTYPE_EXEMPTEXPORT TaxType = "EXEMPTEXPORT"
	TAXTYPE_EXEMPTEXPENSES TaxType = "EXEMPTEXPENSES"
	TAXTYPE_EXEMPTCAPITAL TaxType = "EXEMPTCAPITAL"
	TAXTYPE_EXEMPTOUTPUT TaxType = "EXEMPTOUTPUT"
	TAXTYPE_INPUTTAXED TaxType = "INPUTTAXED"
	TAXTYPE_BASEXCLUDED TaxType = "BASEXCLUDED"
	TAXTYPE_GSTONCAPIMPORTS TaxType = "GSTONCAPIMPORTS"
	TAXTYPE_GSTONIMPORTS TaxType = "GSTONIMPORTS"
	TAXTYPE_NONE TaxType = "NONE"
	TAXTYPE_INPUT2 TaxType = "INPUT2"
	TAXTYPE_ZERORATED TaxType = "ZERORATED"
	TAXTYPE_OUTPUT2 TaxType = "OUTPUT2"
	TAXTYPE_CAPEXINPUT2 TaxType = "CAPEXINPUT2"
	TAXTYPE_CAPEXOUTPUT TaxType = "CAPEXOUTPUT"
	TAXTYPE_CAPEXOUTPUT2 TaxType = "CAPEXOUTPUT2"
	TAXTYPE_CAPEXSRINPUT TaxType = "CAPEXSRINPUT"
	TAXTYPE_CAPEXSROUTPUT TaxType = "CAPEXSROUTPUT"
	TAXTYPE_ECACQUISITIONS TaxType = "ECACQUISITIONS"
	TAXTYPE_ECZRINPUT TaxType = "ECZRINPUT"
	TAXTYPE_ECZROUTPUT TaxType = "ECZROUTPUT"
	TAXTYPE_ECZROUTPUTSERVICES TaxType = "ECZROUTPUTSERVICES"
	TAXTYPE_EXEMPTINPUT TaxType = "EXEMPTINPUT"
	TAXTYPE_REVERSECHARGES TaxType = "REVERSECHARGES"
	TAXTYPE_RRINPUT TaxType = "RRINPUT"
	TAXTYPE_RROUTPUT TaxType = "RROUTPUT"
	TAXTYPE_SRINPUT TaxType = "SRINPUT"
	TAXTYPE_SROUTPUT TaxType = "SROUTPUT"
	TAXTYPE_ZERORATEDINPUT TaxType = "ZERORATEDINPUT"
	TAXTYPE_ZERORATEDOUTPUT TaxType = "ZERORATEDOUTPUT"
	TAXTYPE_BLINPUT TaxType = "BLINPUT"
	TAXTYPE_DSOUTPUT TaxType = "DSOUTPUT"
	TAXTYPE_EPINPUT TaxType = "EPINPUT"
	TAXTYPE_ES33_OUTPUT TaxType = "ES33OUTPUT"
	TAXTYPE_ESN33_OUTPUT TaxType = "ESN33OUTPUT"
	TAXTYPE_IGDSINPUT2 TaxType = "IGDSINPUT2"
	TAXTYPE_IMINPUT2 TaxType = "IMINPUT2"
	TAXTYPE_MEINPUT TaxType = "MEINPUT"
	TAXTYPE_NRINPUT TaxType = "NRINPUT"
	TAXTYPE_OPINPUT TaxType = "OPINPUT"
	TAXTYPE_OSOUTPUT TaxType = "OSOUTPUT"
	TAXTYPE_TXESSINPUT TaxType = "TXESSINPUT"
	TAXTYPE_TXN33_INPUT TaxType = "TXN33INPUT"
	TAXTYPE_TXPETINPUT TaxType = "TXPETINPUT"
	TAXTYPE_TXREINPUT TaxType = "TXREINPUT"
	TAXTYPE_INPUT3 TaxType = "INPUT3"
	TAXTYPE_INPUT4 TaxType = "INPUT4"
	TAXTYPE_OUTPUT3 TaxType = "OUTPUT3"
	TAXTYPE_OUTPUT4 TaxType = "OUTPUT4"
	TAXTYPE_SROUTPUT2 TaxType = "SROUTPUT2"
	TAXTYPE_TXCA TaxType = "TXCA"
	TAXTYPE_SRCAS TaxType = "SRCAS"
	TAXTYPE_BLINPUT2 TaxType = "BLINPUT2"
	TAXTYPE_DRCHARGESUPPLY20 TaxType = "DRCHARGESUPPLY20"
	TAXTYPE_DRCHARGE20 TaxType = "DRCHARGE20"
	TAXTYPE_DRCHARGESUPPLY5 TaxType = "DRCHARGESUPPLY5"
	TAXTYPE_DRCHARGE5 TaxType = "DRCHARGE5"
	TAXTYPE_BADDEBTRELIEF TaxType = "BADDEBTRELIEF"
	TAXTYPE_IGDSINPUT3 TaxType = "IGDSINPUT3"
	TAXTYPE_SROVR TaxType = "SROVR"
	TAXTYPE_TOURISTREFUND TaxType = "TOURISTREFUND"
	TAXTYPE_TXRCN33 TaxType = "TXRCN33"
	TAXTYPE_TXRCRE TaxType = "TXRCRE"
	TAXTYPE_TXRCESS TaxType = "TXRCESS"
	TAXTYPE_TXRCTS TaxType = "TXRCTS"
	TAXTYPE_OUTPUTY23 TaxType = "OUTPUTY23"
	TAXTYPE_DSOUTPUTY23 TaxType = "DSOUTPUTY23"
	TAXTYPE_INPUTY23 TaxType = "INPUTY23"
	TAXTYPE_IMINPUT2_Y23 TaxType = "IMINPUT2Y23"
	TAXTYPE_IGDSINPUT2_Y23 TaxType = "IGDSINPUT2Y23"
	TAXTYPE_TXPETINPUTY23 TaxType = "TXPETINPUTY23"
	TAXTYPE_TXESSINPUTY23 TaxType = "TXESSINPUTY23"
	TAXTYPE_TXN33_INPUTY23 TaxType = "TXN33INPUTY23"
	TAXTYPE_TXREINPUTY23 TaxType = "TXREINPUTY23"
	TAXTYPE_TXCAY23 TaxType = "TXCAY23"
	TAXTYPE_BADDEBTRELIEFY23 TaxType = "BADDEBTRELIEFY23"
	TAXTYPE_IGDSINPUT3_Y23 TaxType = "IGDSINPUT3Y23"
	TAXTYPE_SROVRRSY23 TaxType = "SROVRRSY23"
	TAXTYPE_SROVRLVGY23 TaxType = "SROVRLVGY23"
	TAXTYPE_SRLVGY23 TaxType = "SRLVGY23"
	TAXTYPE_TXRCN33_Y23 TaxType = "TXRCN33Y23"
	TAXTYPE_TXRCREY23 TaxType = "TXRCREY23"
	TAXTYPE_TXRCESSY23 TaxType = "TXRCESSY23"
	TAXTYPE_TXRCTSY23 TaxType = "TXRCTSY23"
	TAXTYPE_IM TaxType = "IM"
	TAXTYPE_IMY23 TaxType = "IMY23"
	TAXTYPE_IMESS TaxType = "IMESS"
	TAXTYPE_IMESSY23 TaxType = "IMESSY23"
	TAXTYPE_IMN33 TaxType = "IMN33"
	TAXTYPE_IMN33_Y23 TaxType = "IMN33Y23"
	TAXTYPE_IMRE TaxType = "IMRE"
	TAXTYPE_IMREY23 TaxType = "IMREY23"
	TAXTYPE_BADDEBTRECOVERY TaxType = "BADDEBTRECOVERY"
	TAXTYPE_BADDEBTRECOVERYY23 TaxType = "BADDEBTRECOVERYY23"
)

// All allowed values of TaxType enum
var AllowedTaxTypeEnumValues = []TaxType{
	"OUTPUT",
	"INPUT",
	"CAPEXINPUT",
	"EXEMPTEXPORT",
	"EXEMPTEXPENSES",
	"EXEMPTCAPITAL",
	"EXEMPTOUTPUT",
	"INPUTTAXED",
	"BASEXCLUDED",
	"GSTONCAPIMPORTS",
	"GSTONIMPORTS",
	"NONE",
	"INPUT2",
	"ZERORATED",
	"OUTPUT2",
	"CAPEXINPUT2",
	"CAPEXOUTPUT",
	"CAPEXOUTPUT2",
	"CAPEXSRINPUT",
	"CAPEXSROUTPUT",
	"ECACQUISITIONS",
	"ECZRINPUT",
	"ECZROUTPUT",
	"ECZROUTPUTSERVICES",
	"EXEMPTINPUT",
	"REVERSECHARGES",
	"RRINPUT",
	"RROUTPUT",
	"SRINPUT",
	"SROUTPUT",
	"ZERORATEDINPUT",
	"ZERORATEDOUTPUT",
	"BLINPUT",
	"DSOUTPUT",
	"EPINPUT",
	"ES33OUTPUT",
	"ESN33OUTPUT",
	"IGDSINPUT2",
	"IMINPUT2",
	"MEINPUT",
	"NRINPUT",
	"OPINPUT",
	"OSOUTPUT",
	"TXESSINPUT",
	"TXN33INPUT",
	"TXPETINPUT",
	"TXREINPUT",
	"INPUT3",
	"INPUT4",
	"OUTPUT3",
	"OUTPUT4",
	"SROUTPUT2",
	"TXCA",
	"SRCAS",
	"BLINPUT2",
	"DRCHARGESUPPLY20",
	"DRCHARGE20",
	"DRCHARGESUPPLY5",
	"DRCHARGE5",
	"BADDEBTRELIEF",
	"IGDSINPUT3",
	"SROVR",
	"TOURISTREFUND",
	"TXRCN33",
	"TXRCRE",
	"TXRCESS",
	"TXRCTS",
	"OUTPUTY23",
	"DSOUTPUTY23",
	"INPUTY23",
	"IMINPUT2Y23",
	"IGDSINPUT2Y23",
	"TXPETINPUTY23",
	"TXESSINPUTY23",
	"TXN33INPUTY23",
	"TXREINPUTY23",
	"TXCAY23",
	"BADDEBTRELIEFY23",
	"IGDSINPUT3Y23",
	"SROVRRSY23",
	"SROVRLVGY23",
	"SRLVGY23",
	"TXRCN33Y23",
	"TXRCREY23",
	"TXRCESSY23",
	"TXRCTSY23",
	"IM",
	"IMY23",
	"IMESS",
	"IMESSY23",
	"IMN33",
	"IMN33Y23",
	"IMRE",
	"IMREY23",
	"BADDEBTRECOVERY",
	"BADDEBTRECOVERYY23",
}

func (v *TaxType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaxType(value)
	for _, existing := range AllowedTaxTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaxType", value)
}

// NewTaxTypeFromValue returns a pointer to a valid TaxType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaxTypeFromValue(v string) (*TaxType, error) {
	ev := TaxType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaxType: valid values are %v", v, AllowedTaxTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaxType) IsValid() bool {
	for _, existing := range AllowedTaxTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaxType value
func (v TaxType) Ptr() *TaxType {
	return &v
}

type NullableTaxType struct {
	value *TaxType
	isSet bool
}

func (v NullableTaxType) Get() *TaxType {
	return v.value
}

func (v *NullableTaxType) Set(val *TaxType) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxType) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxType(val *TaxType) *NullableTaxType {
	return &NullableTaxType{value: val, isSet: true}
}

func (v NullableTaxType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

