/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreditNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditNote{}

// CreditNote struct for CreditNote
type CreditNote struct {
	// See Credit Note Types
	Type *string `json:"Type,omitempty"`
	Contact *Contact `json:"Contact,omitempty"`
	// The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
	Date *string `json:"Date,omitempty"`
	// Date invoice is due – YYYY-MM-DD
	DueDate *string `json:"DueDate,omitempty"`
	// See Credit Note Status Codes
	Status *string `json:"Status,omitempty"`
	LineAmountTypes *LineAmountTypes `json:"LineAmountTypes,omitempty"`
	// See Invoice Line Items
	LineItems []LineItem `json:"LineItems,omitempty"`
	// The subtotal of the credit note excluding taxes
	SubTotal *float64 `json:"SubTotal,omitempty"`
	// The total tax on the credit note
	TotalTax *float64 `json:"TotalTax,omitempty"`
	// The total of the Credit Note(subtotal + total tax)
	Total *float64 `json:"Total,omitempty"`
	// CIS deduction for UK contractors
	CISDeduction *float64 `json:"CISDeduction,omitempty"`
	// CIS Deduction rate for the organisation
	CISRate *float64 `json:"CISRate,omitempty"`
	// UTC timestamp of last update to the credit note
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	CurrencyCode *CurrencyCode `json:"CurrencyCode,omitempty"`
	// Date when credit note was fully paid(UTC format)
	FullyPaidOnDate *string `json:"FullyPaidOnDate,omitempty"`
	// Xero generated unique identifier
	CreditNoteID *string `json:"CreditNoteID,omitempty"`
	// ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings)
	CreditNoteNumber *string `json:"CreditNoteNumber,omitempty"`
	// ACCRECCREDIT only – additional reference number
	Reference *string `json:"Reference,omitempty"`
	// boolean to indicate if a credit note has been sent to a contact via  the Xero app (currently read only)
	SentToContact *bool `json:"SentToContact,omitempty"`
	// The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used
	CurrencyRate *float64 `json:"CurrencyRate,omitempty"`
	// The remaining credit balance on the Credit Note
	RemainingCredit *float64 `json:"RemainingCredit,omitempty"`
	// See Allocations
	Allocations []Allocation `json:"Allocations,omitempty"`
	// The amount of applied to an invoice
	AppliedAmount *float64 `json:"AppliedAmount,omitempty"`
	// See Payments
	Payments []Payment `json:"Payments,omitempty"`
	// See BrandingThemes
	BrandingThemeID *string `json:"BrandingThemeID,omitempty"`
	// A string to indicate if a invoice status
	StatusAttributeString *string `json:"StatusAttributeString,omitempty"`
	// boolean to indicate if a credit note has an attachment
	HasAttachments *bool `json:"HasAttachments,omitempty"`
	// A boolean to indicate if a credit note has an validation errors
	HasErrors *bool `json:"HasErrors,omitempty"`
	// Displays array of validation error messages from the API
	ValidationErrors []ValidationError `json:"ValidationErrors,omitempty"`
	// Displays array of warning messages from the API
	Warnings []ValidationError `json:"Warnings,omitempty"`
}

// NewCreditNote instantiates a new CreditNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditNote() *CreditNote {
	this := CreditNote{}
	var hasAttachments bool = false
	this.HasAttachments = &hasAttachments
	var hasErrors bool = false
	this.HasErrors = &hasErrors
	return &this
}

// NewCreditNoteWithDefaults instantiates a new CreditNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditNoteWithDefaults() *CreditNote {
	this := CreditNote{}
	var hasAttachments bool = false
	this.HasAttachments = &hasAttachments
	var hasErrors bool = false
	this.HasErrors = &hasErrors
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreditNote) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreditNote) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreditNote) SetType(v string) {
	o.Type = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *CreditNote) GetContact() Contact {
	if o == nil || IsNil(o.Contact) {
		var ret Contact
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *CreditNote) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given Contact and assigns it to the Contact field.
func (o *CreditNote) SetContact(v Contact) {
	o.Contact = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *CreditNote) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *CreditNote) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *CreditNote) SetDate(v string) {
	o.Date = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *CreditNote) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *CreditNote) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *CreditNote) SetDueDate(v string) {
	o.DueDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CreditNote) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CreditNote) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CreditNote) SetStatus(v string) {
	o.Status = &v
}

// GetLineAmountTypes returns the LineAmountTypes field value if set, zero value otherwise.
func (o *CreditNote) GetLineAmountTypes() LineAmountTypes {
	if o == nil || IsNil(o.LineAmountTypes) {
		var ret LineAmountTypes
		return ret
	}
	return *o.LineAmountTypes
}

// GetLineAmountTypesOk returns a tuple with the LineAmountTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetLineAmountTypesOk() (*LineAmountTypes, bool) {
	if o == nil || IsNil(o.LineAmountTypes) {
		return nil, false
	}
	return o.LineAmountTypes, true
}

// HasLineAmountTypes returns a boolean if a field has been set.
func (o *CreditNote) HasLineAmountTypes() bool {
	if o != nil && !IsNil(o.LineAmountTypes) {
		return true
	}

	return false
}

// SetLineAmountTypes gets a reference to the given LineAmountTypes and assigns it to the LineAmountTypes field.
func (o *CreditNote) SetLineAmountTypes(v LineAmountTypes) {
	o.LineAmountTypes = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *CreditNote) GetLineItems() []LineItem {
	if o == nil || IsNil(o.LineItems) {
		var ret []LineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetLineItemsOk() ([]LineItem, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *CreditNote) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []LineItem and assigns it to the LineItems field.
func (o *CreditNote) SetLineItems(v []LineItem) {
	o.LineItems = v
}

// GetSubTotal returns the SubTotal field value if set, zero value otherwise.
func (o *CreditNote) GetSubTotal() float64 {
	if o == nil || IsNil(o.SubTotal) {
		var ret float64
		return ret
	}
	return *o.SubTotal
}

// GetSubTotalOk returns a tuple with the SubTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetSubTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.SubTotal) {
		return nil, false
	}
	return o.SubTotal, true
}

// HasSubTotal returns a boolean if a field has been set.
func (o *CreditNote) HasSubTotal() bool {
	if o != nil && !IsNil(o.SubTotal) {
		return true
	}

	return false
}

// SetSubTotal gets a reference to the given float64 and assigns it to the SubTotal field.
func (o *CreditNote) SetSubTotal(v float64) {
	o.SubTotal = &v
}

// GetTotalTax returns the TotalTax field value if set, zero value otherwise.
func (o *CreditNote) GetTotalTax() float64 {
	if o == nil || IsNil(o.TotalTax) {
		var ret float64
		return ret
	}
	return *o.TotalTax
}

// GetTotalTaxOk returns a tuple with the TotalTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetTotalTaxOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalTax) {
		return nil, false
	}
	return o.TotalTax, true
}

// HasTotalTax returns a boolean if a field has been set.
func (o *CreditNote) HasTotalTax() bool {
	if o != nil && !IsNil(o.TotalTax) {
		return true
	}

	return false
}

// SetTotalTax gets a reference to the given float64 and assigns it to the TotalTax field.
func (o *CreditNote) SetTotalTax(v float64) {
	o.TotalTax = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *CreditNote) GetTotal() float64 {
	if o == nil || IsNil(o.Total) {
		var ret float64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *CreditNote) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float64 and assigns it to the Total field.
func (o *CreditNote) SetTotal(v float64) {
	o.Total = &v
}

// GetCISDeduction returns the CISDeduction field value if set, zero value otherwise.
func (o *CreditNote) GetCISDeduction() float64 {
	if o == nil || IsNil(o.CISDeduction) {
		var ret float64
		return ret
	}
	return *o.CISDeduction
}

// GetCISDeductionOk returns a tuple with the CISDeduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetCISDeductionOk() (*float64, bool) {
	if o == nil || IsNil(o.CISDeduction) {
		return nil, false
	}
	return o.CISDeduction, true
}

// HasCISDeduction returns a boolean if a field has been set.
func (o *CreditNote) HasCISDeduction() bool {
	if o != nil && !IsNil(o.CISDeduction) {
		return true
	}

	return false
}

// SetCISDeduction gets a reference to the given float64 and assigns it to the CISDeduction field.
func (o *CreditNote) SetCISDeduction(v float64) {
	o.CISDeduction = &v
}

// GetCISRate returns the CISRate field value if set, zero value otherwise.
func (o *CreditNote) GetCISRate() float64 {
	if o == nil || IsNil(o.CISRate) {
		var ret float64
		return ret
	}
	return *o.CISRate
}

// GetCISRateOk returns a tuple with the CISRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetCISRateOk() (*float64, bool) {
	if o == nil || IsNil(o.CISRate) {
		return nil, false
	}
	return o.CISRate, true
}

// HasCISRate returns a boolean if a field has been set.
func (o *CreditNote) HasCISRate() bool {
	if o != nil && !IsNil(o.CISRate) {
		return true
	}

	return false
}

// SetCISRate gets a reference to the given float64 and assigns it to the CISRate field.
func (o *CreditNote) SetCISRate(v float64) {
	o.CISRate = &v
}

// GetUpdatedDateUTC returns the UpdatedDateUTC field value if set, zero value otherwise.
func (o *CreditNote) GetUpdatedDateUTC() string {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		var ret string
		return ret
	}
	return *o.UpdatedDateUTC
}

// GetUpdatedDateUTCOk returns a tuple with the UpdatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetUpdatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		return nil, false
	}
	return o.UpdatedDateUTC, true
}

// HasUpdatedDateUTC returns a boolean if a field has been set.
func (o *CreditNote) HasUpdatedDateUTC() bool {
	if o != nil && !IsNil(o.UpdatedDateUTC) {
		return true
	}

	return false
}

// SetUpdatedDateUTC gets a reference to the given string and assigns it to the UpdatedDateUTC field.
func (o *CreditNote) SetUpdatedDateUTC(v string) {
	o.UpdatedDateUTC = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *CreditNote) GetCurrencyCode() CurrencyCode {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret CurrencyCode
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetCurrencyCodeOk() (*CurrencyCode, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *CreditNote) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given CurrencyCode and assigns it to the CurrencyCode field.
func (o *CreditNote) SetCurrencyCode(v CurrencyCode) {
	o.CurrencyCode = &v
}

// GetFullyPaidOnDate returns the FullyPaidOnDate field value if set, zero value otherwise.
func (o *CreditNote) GetFullyPaidOnDate() string {
	if o == nil || IsNil(o.FullyPaidOnDate) {
		var ret string
		return ret
	}
	return *o.FullyPaidOnDate
}

// GetFullyPaidOnDateOk returns a tuple with the FullyPaidOnDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetFullyPaidOnDateOk() (*string, bool) {
	if o == nil || IsNil(o.FullyPaidOnDate) {
		return nil, false
	}
	return o.FullyPaidOnDate, true
}

// HasFullyPaidOnDate returns a boolean if a field has been set.
func (o *CreditNote) HasFullyPaidOnDate() bool {
	if o != nil && !IsNil(o.FullyPaidOnDate) {
		return true
	}

	return false
}

// SetFullyPaidOnDate gets a reference to the given string and assigns it to the FullyPaidOnDate field.
func (o *CreditNote) SetFullyPaidOnDate(v string) {
	o.FullyPaidOnDate = &v
}

// GetCreditNoteID returns the CreditNoteID field value if set, zero value otherwise.
func (o *CreditNote) GetCreditNoteID() string {
	if o == nil || IsNil(o.CreditNoteID) {
		var ret string
		return ret
	}
	return *o.CreditNoteID
}

// GetCreditNoteIDOk returns a tuple with the CreditNoteID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetCreditNoteIDOk() (*string, bool) {
	if o == nil || IsNil(o.CreditNoteID) {
		return nil, false
	}
	return o.CreditNoteID, true
}

// HasCreditNoteID returns a boolean if a field has been set.
func (o *CreditNote) HasCreditNoteID() bool {
	if o != nil && !IsNil(o.CreditNoteID) {
		return true
	}

	return false
}

// SetCreditNoteID gets a reference to the given string and assigns it to the CreditNoteID field.
func (o *CreditNote) SetCreditNoteID(v string) {
	o.CreditNoteID = &v
}

// GetCreditNoteNumber returns the CreditNoteNumber field value if set, zero value otherwise.
func (o *CreditNote) GetCreditNoteNumber() string {
	if o == nil || IsNil(o.CreditNoteNumber) {
		var ret string
		return ret
	}
	return *o.CreditNoteNumber
}

// GetCreditNoteNumberOk returns a tuple with the CreditNoteNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetCreditNoteNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CreditNoteNumber) {
		return nil, false
	}
	return o.CreditNoteNumber, true
}

// HasCreditNoteNumber returns a boolean if a field has been set.
func (o *CreditNote) HasCreditNoteNumber() bool {
	if o != nil && !IsNil(o.CreditNoteNumber) {
		return true
	}

	return false
}

// SetCreditNoteNumber gets a reference to the given string and assigns it to the CreditNoteNumber field.
func (o *CreditNote) SetCreditNoteNumber(v string) {
	o.CreditNoteNumber = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *CreditNote) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *CreditNote) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *CreditNote) SetReference(v string) {
	o.Reference = &v
}

// GetSentToContact returns the SentToContact field value if set, zero value otherwise.
func (o *CreditNote) GetSentToContact() bool {
	if o == nil || IsNil(o.SentToContact) {
		var ret bool
		return ret
	}
	return *o.SentToContact
}

// GetSentToContactOk returns a tuple with the SentToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetSentToContactOk() (*bool, bool) {
	if o == nil || IsNil(o.SentToContact) {
		return nil, false
	}
	return o.SentToContact, true
}

// HasSentToContact returns a boolean if a field has been set.
func (o *CreditNote) HasSentToContact() bool {
	if o != nil && !IsNil(o.SentToContact) {
		return true
	}

	return false
}

// SetSentToContact gets a reference to the given bool and assigns it to the SentToContact field.
func (o *CreditNote) SetSentToContact(v bool) {
	o.SentToContact = &v
}

// GetCurrencyRate returns the CurrencyRate field value if set, zero value otherwise.
func (o *CreditNote) GetCurrencyRate() float64 {
	if o == nil || IsNil(o.CurrencyRate) {
		var ret float64
		return ret
	}
	return *o.CurrencyRate
}

// GetCurrencyRateOk returns a tuple with the CurrencyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetCurrencyRateOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrencyRate) {
		return nil, false
	}
	return o.CurrencyRate, true
}

// HasCurrencyRate returns a boolean if a field has been set.
func (o *CreditNote) HasCurrencyRate() bool {
	if o != nil && !IsNil(o.CurrencyRate) {
		return true
	}

	return false
}

// SetCurrencyRate gets a reference to the given float64 and assigns it to the CurrencyRate field.
func (o *CreditNote) SetCurrencyRate(v float64) {
	o.CurrencyRate = &v
}

// GetRemainingCredit returns the RemainingCredit field value if set, zero value otherwise.
func (o *CreditNote) GetRemainingCredit() float64 {
	if o == nil || IsNil(o.RemainingCredit) {
		var ret float64
		return ret
	}
	return *o.RemainingCredit
}

// GetRemainingCreditOk returns a tuple with the RemainingCredit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetRemainingCreditOk() (*float64, bool) {
	if o == nil || IsNil(o.RemainingCredit) {
		return nil, false
	}
	return o.RemainingCredit, true
}

// HasRemainingCredit returns a boolean if a field has been set.
func (o *CreditNote) HasRemainingCredit() bool {
	if o != nil && !IsNil(o.RemainingCredit) {
		return true
	}

	return false
}

// SetRemainingCredit gets a reference to the given float64 and assigns it to the RemainingCredit field.
func (o *CreditNote) SetRemainingCredit(v float64) {
	o.RemainingCredit = &v
}

// GetAllocations returns the Allocations field value if set, zero value otherwise.
func (o *CreditNote) GetAllocations() []Allocation {
	if o == nil || IsNil(o.Allocations) {
		var ret []Allocation
		return ret
	}
	return o.Allocations
}

// GetAllocationsOk returns a tuple with the Allocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetAllocationsOk() ([]Allocation, bool) {
	if o == nil || IsNil(o.Allocations) {
		return nil, false
	}
	return o.Allocations, true
}

// HasAllocations returns a boolean if a field has been set.
func (o *CreditNote) HasAllocations() bool {
	if o != nil && !IsNil(o.Allocations) {
		return true
	}

	return false
}

// SetAllocations gets a reference to the given []Allocation and assigns it to the Allocations field.
func (o *CreditNote) SetAllocations(v []Allocation) {
	o.Allocations = v
}

// GetAppliedAmount returns the AppliedAmount field value if set, zero value otherwise.
func (o *CreditNote) GetAppliedAmount() float64 {
	if o == nil || IsNil(o.AppliedAmount) {
		var ret float64
		return ret
	}
	return *o.AppliedAmount
}

// GetAppliedAmountOk returns a tuple with the AppliedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetAppliedAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.AppliedAmount) {
		return nil, false
	}
	return o.AppliedAmount, true
}

// HasAppliedAmount returns a boolean if a field has been set.
func (o *CreditNote) HasAppliedAmount() bool {
	if o != nil && !IsNil(o.AppliedAmount) {
		return true
	}

	return false
}

// SetAppliedAmount gets a reference to the given float64 and assigns it to the AppliedAmount field.
func (o *CreditNote) SetAppliedAmount(v float64) {
	o.AppliedAmount = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *CreditNote) GetPayments() []Payment {
	if o == nil || IsNil(o.Payments) {
		var ret []Payment
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetPaymentsOk() ([]Payment, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *CreditNote) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []Payment and assigns it to the Payments field.
func (o *CreditNote) SetPayments(v []Payment) {
	o.Payments = v
}

// GetBrandingThemeID returns the BrandingThemeID field value if set, zero value otherwise.
func (o *CreditNote) GetBrandingThemeID() string {
	if o == nil || IsNil(o.BrandingThemeID) {
		var ret string
		return ret
	}
	return *o.BrandingThemeID
}

// GetBrandingThemeIDOk returns a tuple with the BrandingThemeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetBrandingThemeIDOk() (*string, bool) {
	if o == nil || IsNil(o.BrandingThemeID) {
		return nil, false
	}
	return o.BrandingThemeID, true
}

// HasBrandingThemeID returns a boolean if a field has been set.
func (o *CreditNote) HasBrandingThemeID() bool {
	if o != nil && !IsNil(o.BrandingThemeID) {
		return true
	}

	return false
}

// SetBrandingThemeID gets a reference to the given string and assigns it to the BrandingThemeID field.
func (o *CreditNote) SetBrandingThemeID(v string) {
	o.BrandingThemeID = &v
}

// GetStatusAttributeString returns the StatusAttributeString field value if set, zero value otherwise.
func (o *CreditNote) GetStatusAttributeString() string {
	if o == nil || IsNil(o.StatusAttributeString) {
		var ret string
		return ret
	}
	return *o.StatusAttributeString
}

// GetStatusAttributeStringOk returns a tuple with the StatusAttributeString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetStatusAttributeStringOk() (*string, bool) {
	if o == nil || IsNil(o.StatusAttributeString) {
		return nil, false
	}
	return o.StatusAttributeString, true
}

// HasStatusAttributeString returns a boolean if a field has been set.
func (o *CreditNote) HasStatusAttributeString() bool {
	if o != nil && !IsNil(o.StatusAttributeString) {
		return true
	}

	return false
}

// SetStatusAttributeString gets a reference to the given string and assigns it to the StatusAttributeString field.
func (o *CreditNote) SetStatusAttributeString(v string) {
	o.StatusAttributeString = &v
}

// GetHasAttachments returns the HasAttachments field value if set, zero value otherwise.
func (o *CreditNote) GetHasAttachments() bool {
	if o == nil || IsNil(o.HasAttachments) {
		var ret bool
		return ret
	}
	return *o.HasAttachments
}

// GetHasAttachmentsOk returns a tuple with the HasAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetHasAttachmentsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAttachments) {
		return nil, false
	}
	return o.HasAttachments, true
}

// HasHasAttachments returns a boolean if a field has been set.
func (o *CreditNote) HasHasAttachments() bool {
	if o != nil && !IsNil(o.HasAttachments) {
		return true
	}

	return false
}

// SetHasAttachments gets a reference to the given bool and assigns it to the HasAttachments field.
func (o *CreditNote) SetHasAttachments(v bool) {
	o.HasAttachments = &v
}

// GetHasErrors returns the HasErrors field value if set, zero value otherwise.
func (o *CreditNote) GetHasErrors() bool {
	if o == nil || IsNil(o.HasErrors) {
		var ret bool
		return ret
	}
	return *o.HasErrors
}

// GetHasErrorsOk returns a tuple with the HasErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetHasErrorsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasErrors) {
		return nil, false
	}
	return o.HasErrors, true
}

// HasHasErrors returns a boolean if a field has been set.
func (o *CreditNote) HasHasErrors() bool {
	if o != nil && !IsNil(o.HasErrors) {
		return true
	}

	return false
}

// SetHasErrors gets a reference to the given bool and assigns it to the HasErrors field.
func (o *CreditNote) SetHasErrors(v bool) {
	o.HasErrors = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *CreditNote) GetValidationErrors() []ValidationError {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret []ValidationError
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetValidationErrorsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *CreditNote) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []ValidationError and assigns it to the ValidationErrors field.
func (o *CreditNote) SetValidationErrors(v []ValidationError) {
	o.ValidationErrors = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CreditNote) GetWarnings() []ValidationError {
	if o == nil || IsNil(o.Warnings) {
		var ret []ValidationError
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNote) GetWarningsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CreditNote) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []ValidationError and assigns it to the Warnings field.
func (o *CreditNote) SetWarnings(v []ValidationError) {
	o.Warnings = v
}

func (o CreditNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Contact) {
		toSerialize["Contact"] = o.Contact
	}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.DueDate) {
		toSerialize["DueDate"] = o.DueDate
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.LineAmountTypes) {
		toSerialize["LineAmountTypes"] = o.LineAmountTypes
	}
	if !IsNil(o.LineItems) {
		toSerialize["LineItems"] = o.LineItems
	}
	if !IsNil(o.SubTotal) {
		toSerialize["SubTotal"] = o.SubTotal
	}
	if !IsNil(o.TotalTax) {
		toSerialize["TotalTax"] = o.TotalTax
	}
	if !IsNil(o.Total) {
		toSerialize["Total"] = o.Total
	}
	if !IsNil(o.CISDeduction) {
		toSerialize["CISDeduction"] = o.CISDeduction
	}
	if !IsNil(o.CISRate) {
		toSerialize["CISRate"] = o.CISRate
	}
	if !IsNil(o.UpdatedDateUTC) {
		toSerialize["UpdatedDateUTC"] = o.UpdatedDateUTC
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["CurrencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.FullyPaidOnDate) {
		toSerialize["FullyPaidOnDate"] = o.FullyPaidOnDate
	}
	if !IsNil(o.CreditNoteID) {
		toSerialize["CreditNoteID"] = o.CreditNoteID
	}
	if !IsNil(o.CreditNoteNumber) {
		toSerialize["CreditNoteNumber"] = o.CreditNoteNumber
	}
	if !IsNil(o.Reference) {
		toSerialize["Reference"] = o.Reference
	}
	if !IsNil(o.SentToContact) {
		toSerialize["SentToContact"] = o.SentToContact
	}
	if !IsNil(o.CurrencyRate) {
		toSerialize["CurrencyRate"] = o.CurrencyRate
	}
	if !IsNil(o.RemainingCredit) {
		toSerialize["RemainingCredit"] = o.RemainingCredit
	}
	if !IsNil(o.Allocations) {
		toSerialize["Allocations"] = o.Allocations
	}
	if !IsNil(o.AppliedAmount) {
		toSerialize["AppliedAmount"] = o.AppliedAmount
	}
	if !IsNil(o.Payments) {
		toSerialize["Payments"] = o.Payments
	}
	if !IsNil(o.BrandingThemeID) {
		toSerialize["BrandingThemeID"] = o.BrandingThemeID
	}
	if !IsNil(o.StatusAttributeString) {
		toSerialize["StatusAttributeString"] = o.StatusAttributeString
	}
	if !IsNil(o.HasAttachments) {
		toSerialize["HasAttachments"] = o.HasAttachments
	}
	if !IsNil(o.HasErrors) {
		toSerialize["HasErrors"] = o.HasErrors
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["ValidationErrors"] = o.ValidationErrors
	}
	if !IsNil(o.Warnings) {
		toSerialize["Warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCreditNote struct {
	value *CreditNote
	isSet bool
}

func (v NullableCreditNote) Get() *CreditNote {
	return v.value
}

func (v *NullableCreditNote) Set(val *CreditNote) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditNote) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditNote(val *CreditNote) *NullableCreditNote {
	return &NullableCreditNote{value: val, isSet: true}
}

func (v NullableCreditNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


