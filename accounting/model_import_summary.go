/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ImportSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportSummary{}

// ImportSummary A summary of the import from setup endpoint
type ImportSummary struct {
	Accounts *ImportSummaryAccounts `json:"Accounts,omitempty"`
	Organisation *ImportSummaryOrganisation `json:"Organisation,omitempty"`
}

// NewImportSummary instantiates a new ImportSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportSummary() *ImportSummary {
	this := ImportSummary{}
	return &this
}

// NewImportSummaryWithDefaults instantiates a new ImportSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportSummaryWithDefaults() *ImportSummary {
	this := ImportSummary{}
	return &this
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *ImportSummary) GetAccounts() ImportSummaryAccounts {
	if o == nil || IsNil(o.Accounts) {
		var ret ImportSummaryAccounts
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportSummary) GetAccountsOk() (*ImportSummaryAccounts, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *ImportSummary) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given ImportSummaryAccounts and assigns it to the Accounts field.
func (o *ImportSummary) SetAccounts(v ImportSummaryAccounts) {
	o.Accounts = &v
}

// GetOrganisation returns the Organisation field value if set, zero value otherwise.
func (o *ImportSummary) GetOrganisation() ImportSummaryOrganisation {
	if o == nil || IsNil(o.Organisation) {
		var ret ImportSummaryOrganisation
		return ret
	}
	return *o.Organisation
}

// GetOrganisationOk returns a tuple with the Organisation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportSummary) GetOrganisationOk() (*ImportSummaryOrganisation, bool) {
	if o == nil || IsNil(o.Organisation) {
		return nil, false
	}
	return o.Organisation, true
}

// HasOrganisation returns a boolean if a field has been set.
func (o *ImportSummary) HasOrganisation() bool {
	if o != nil && !IsNil(o.Organisation) {
		return true
	}

	return false
}

// SetOrganisation gets a reference to the given ImportSummaryOrganisation and assigns it to the Organisation field.
func (o *ImportSummary) SetOrganisation(v ImportSummaryOrganisation) {
	o.Organisation = &v
}

func (o ImportSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accounts) {
		toSerialize["Accounts"] = o.Accounts
	}
	if !IsNil(o.Organisation) {
		toSerialize["Organisation"] = o.Organisation
	}
	return toSerialize, nil
}

type NullableImportSummary struct {
	value *ImportSummary
	isSet bool
}

func (v NullableImportSummary) Get() *ImportSummary {
	return v.value
}

func (v *NullableImportSummary) Set(val *ImportSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableImportSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableImportSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportSummary(val *ImportSummary) *NullableImportSummary {
	return &NullableImportSummary{value: val, isSet: true}
}

func (v NullableImportSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


