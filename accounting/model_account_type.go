/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AccountType See Account Types
type AccountType string

// List of AccountType
const (
	ACCOUNTTYPE_BANK AccountType = "BANK"
	ACCOUNTTYPE_CURRENT AccountType = "CURRENT"
	ACCOUNTTYPE_CURRLIAB AccountType = "CURRLIAB"
	ACCOUNTTYPE_DEPRECIATN AccountType = "DEPRECIATN"
	ACCOUNTTYPE_DIRECTCOSTS AccountType = "DIRECTCOSTS"
	ACCOUNTTYPE_EQUITY AccountType = "EQUITY"
	ACCOUNTTYPE_EXPENSE AccountType = "EXPENSE"
	ACCOUNTTYPE_FIXED AccountType = "FIXED"
	ACCOUNTTYPE_INVENTORY AccountType = "INVENTORY"
	ACCOUNTTYPE_LIABILITY AccountType = "LIABILITY"
	ACCOUNTTYPE_NONCURRENT AccountType = "NONCURRENT"
	ACCOUNTTYPE_OTHERINCOME AccountType = "OTHERINCOME"
	ACCOUNTTYPE_OVERHEADS AccountType = "OVERHEADS"
	ACCOUNTTYPE_PREPAYMENT AccountType = "PREPAYMENT"
	ACCOUNTTYPE_REVENUE AccountType = "REVENUE"
	ACCOUNTTYPE_SALES AccountType = "SALES"
	ACCOUNTTYPE_TERMLIAB AccountType = "TERMLIAB"
	ACCOUNTTYPE_PAYG AccountType = "PAYG"
)

// All allowed values of AccountType enum
var AllowedAccountTypeEnumValues = []AccountType{
	"BANK",
	"CURRENT",
	"CURRLIAB",
	"DEPRECIATN",
	"DIRECTCOSTS",
	"EQUITY",
	"EXPENSE",
	"FIXED",
	"INVENTORY",
	"LIABILITY",
	"NONCURRENT",
	"OTHERINCOME",
	"OVERHEADS",
	"PREPAYMENT",
	"REVENUE",
	"SALES",
	"TERMLIAB",
	"PAYG",
}

func (v *AccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountType(value)
	for _, existing := range AllowedAccountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountType", value)
}

// NewAccountTypeFromValue returns a pointer to a valid AccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountTypeFromValue(v string) (*AccountType, error) {
	ev := AccountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountType: valid values are %v", v, AllowedAccountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountType) IsValid() bool {
	for _, existing := range AllowedAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountType value
func (v AccountType) Ptr() *AccountType {
	return &v
}

type NullableAccountType struct {
	value *AccountType
	isSet bool
}

func (v NullableAccountType) Get() *AccountType {
	return v.value
}

func (v *NullableAccountType) Set(val *AccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountType(val *AccountType) *NullableAccountType {
	return &NullableAccountType{value: val, isSet: true}
}

func (v NullableAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

