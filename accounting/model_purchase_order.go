/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PurchaseOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PurchaseOrder{}

// PurchaseOrder struct for PurchaseOrder
type PurchaseOrder struct {
	Contact *Contact `json:"Contact,omitempty"`
	// See LineItems
	LineItems []LineItem `json:"LineItems,omitempty"`
	// Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation
	Date *string `json:"Date,omitempty"`
	// Date the goods are to be delivered – YYYY-MM-DD
	DeliveryDate *string `json:"DeliveryDate,omitempty"`
	LineAmountTypes *LineAmountTypes `json:"LineAmountTypes,omitempty"`
	// Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings)
	PurchaseOrderNumber *string `json:"PurchaseOrderNumber,omitempty"`
	// Additional reference number
	Reference *string `json:"Reference,omitempty"`
	// See BrandingThemes
	BrandingThemeID *string `json:"BrandingThemeID,omitempty"`
	CurrencyCode *CurrencyCode `json:"CurrencyCode,omitempty"`
	// See Purchase Order Status Codes
	Status *string `json:"Status,omitempty"`
	// Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed
	SentToContact *bool `json:"SentToContact,omitempty"`
	// The address the goods are to be delivered to
	DeliveryAddress *string `json:"DeliveryAddress,omitempty"`
	// The person that the delivery is going to
	AttentionTo *string `json:"AttentionTo,omitempty"`
	// The phone number for the person accepting the delivery
	Telephone *string `json:"Telephone,omitempty"`
	// A free text feild for instructions (500 characters max)
	DeliveryInstructions *string `json:"DeliveryInstructions,omitempty"`
	// The date the goods are expected to arrive.
	ExpectedArrivalDate *string `json:"ExpectedArrivalDate,omitempty"`
	// Xero generated unique identifier for purchase order
	PurchaseOrderID *string `json:"PurchaseOrderID,omitempty"`
	// The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.
	CurrencyRate *float64 `json:"CurrencyRate,omitempty"`
	// Total of purchase order excluding taxes
	SubTotal *float64 `json:"SubTotal,omitempty"`
	// Total tax on purchase order
	TotalTax *float64 `json:"TotalTax,omitempty"`
	// Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
	Total *float64 `json:"Total,omitempty"`
	// Total of discounts applied on the purchase order line items
	TotalDiscount *float64 `json:"TotalDiscount,omitempty"`
	// boolean to indicate if a purchase order has an attachment
	HasAttachmentsField *bool `json:"HasAttachments,omitempty"`
	// Last modified date UTC format
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	// A string to indicate if a invoice status
	StatusAttributeString *string `json:"StatusAttributeString,omitempty"`
	// Displays array of validation error messages from the API
	ValidationErrors []ValidationError `json:"ValidationErrors,omitempty"`
	// Displays array of warning messages from the API
	Warnings []ValidationError `json:"Warnings,omitempty"`
	// Displays array of attachments from the API
	Attachments []Attachment `json:"Attachments,omitempty"`
}

// NewPurchaseOrder instantiates a new PurchaseOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPurchaseOrder() *PurchaseOrder {
	this := PurchaseOrder{}
	return &this
}

// NewPurchaseOrderWithDefaults instantiates a new PurchaseOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPurchaseOrderWithDefaults() *PurchaseOrder {
	this := PurchaseOrder{}
	return &this
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *PurchaseOrder) GetContact() Contact {
	if o == nil || IsNil(o.Contact) {
		var ret Contact
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *PurchaseOrder) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given Contact and assigns it to the Contact field.
func (o *PurchaseOrder) SetContact(v Contact) {
	o.Contact = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *PurchaseOrder) GetLineItems() []LineItem {
	if o == nil || IsNil(o.LineItems) {
		var ret []LineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetLineItemsOk() ([]LineItem, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *PurchaseOrder) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []LineItem and assigns it to the LineItems field.
func (o *PurchaseOrder) SetLineItems(v []LineItem) {
	o.LineItems = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PurchaseOrder) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PurchaseOrder) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *PurchaseOrder) SetDate(v string) {
	o.Date = &v
}

// GetDeliveryDate returns the DeliveryDate field value if set, zero value otherwise.
func (o *PurchaseOrder) GetDeliveryDate() string {
	if o == nil || IsNil(o.DeliveryDate) {
		var ret string
		return ret
	}
	return *o.DeliveryDate
}

// GetDeliveryDateOk returns a tuple with the DeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetDeliveryDateOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryDate) {
		return nil, false
	}
	return o.DeliveryDate, true
}

// HasDeliveryDate returns a boolean if a field has been set.
func (o *PurchaseOrder) HasDeliveryDate() bool {
	if o != nil && !IsNil(o.DeliveryDate) {
		return true
	}

	return false
}

// SetDeliveryDate gets a reference to the given string and assigns it to the DeliveryDate field.
func (o *PurchaseOrder) SetDeliveryDate(v string) {
	o.DeliveryDate = &v
}

// GetLineAmountTypes returns the LineAmountTypes field value if set, zero value otherwise.
func (o *PurchaseOrder) GetLineAmountTypes() LineAmountTypes {
	if o == nil || IsNil(o.LineAmountTypes) {
		var ret LineAmountTypes
		return ret
	}
	return *o.LineAmountTypes
}

// GetLineAmountTypesOk returns a tuple with the LineAmountTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetLineAmountTypesOk() (*LineAmountTypes, bool) {
	if o == nil || IsNil(o.LineAmountTypes) {
		return nil, false
	}
	return o.LineAmountTypes, true
}

// HasLineAmountTypes returns a boolean if a field has been set.
func (o *PurchaseOrder) HasLineAmountTypes() bool {
	if o != nil && !IsNil(o.LineAmountTypes) {
		return true
	}

	return false
}

// SetLineAmountTypes gets a reference to the given LineAmountTypes and assigns it to the LineAmountTypes field.
func (o *PurchaseOrder) SetLineAmountTypes(v LineAmountTypes) {
	o.LineAmountTypes = &v
}

// GetPurchaseOrderNumber returns the PurchaseOrderNumber field value if set, zero value otherwise.
func (o *PurchaseOrder) GetPurchaseOrderNumber() string {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		var ret string
		return ret
	}
	return *o.PurchaseOrderNumber
}

// GetPurchaseOrderNumberOk returns a tuple with the PurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetPurchaseOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		return nil, false
	}
	return o.PurchaseOrderNumber, true
}

// HasPurchaseOrderNumber returns a boolean if a field has been set.
func (o *PurchaseOrder) HasPurchaseOrderNumber() bool {
	if o != nil && !IsNil(o.PurchaseOrderNumber) {
		return true
	}

	return false
}

// SetPurchaseOrderNumber gets a reference to the given string and assigns it to the PurchaseOrderNumber field.
func (o *PurchaseOrder) SetPurchaseOrderNumber(v string) {
	o.PurchaseOrderNumber = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *PurchaseOrder) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *PurchaseOrder) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *PurchaseOrder) SetReference(v string) {
	o.Reference = &v
}

// GetBrandingThemeID returns the BrandingThemeID field value if set, zero value otherwise.
func (o *PurchaseOrder) GetBrandingThemeID() string {
	if o == nil || IsNil(o.BrandingThemeID) {
		var ret string
		return ret
	}
	return *o.BrandingThemeID
}

// GetBrandingThemeIDOk returns a tuple with the BrandingThemeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetBrandingThemeIDOk() (*string, bool) {
	if o == nil || IsNil(o.BrandingThemeID) {
		return nil, false
	}
	return o.BrandingThemeID, true
}

// HasBrandingThemeID returns a boolean if a field has been set.
func (o *PurchaseOrder) HasBrandingThemeID() bool {
	if o != nil && !IsNil(o.BrandingThemeID) {
		return true
	}

	return false
}

// SetBrandingThemeID gets a reference to the given string and assigns it to the BrandingThemeID field.
func (o *PurchaseOrder) SetBrandingThemeID(v string) {
	o.BrandingThemeID = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCurrencyCode() CurrencyCode {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret CurrencyCode
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCurrencyCodeOk() (*CurrencyCode, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given CurrencyCode and assigns it to the CurrencyCode field.
func (o *PurchaseOrder) SetCurrencyCode(v CurrencyCode) {
	o.CurrencyCode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PurchaseOrder) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PurchaseOrder) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PurchaseOrder) SetStatus(v string) {
	o.Status = &v
}

// GetSentToContact returns the SentToContact field value if set, zero value otherwise.
func (o *PurchaseOrder) GetSentToContact() bool {
	if o == nil || IsNil(o.SentToContact) {
		var ret bool
		return ret
	}
	return *o.SentToContact
}

// GetSentToContactOk returns a tuple with the SentToContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetSentToContactOk() (*bool, bool) {
	if o == nil || IsNil(o.SentToContact) {
		return nil, false
	}
	return o.SentToContact, true
}

// HasSentToContact returns a boolean if a field has been set.
func (o *PurchaseOrder) HasSentToContact() bool {
	if o != nil && !IsNil(o.SentToContact) {
		return true
	}

	return false
}

// SetSentToContact gets a reference to the given bool and assigns it to the SentToContact field.
func (o *PurchaseOrder) SetSentToContact(v bool) {
	o.SentToContact = &v
}

// GetDeliveryAddress returns the DeliveryAddress field value if set, zero value otherwise.
func (o *PurchaseOrder) GetDeliveryAddress() string {
	if o == nil || IsNil(o.DeliveryAddress) {
		var ret string
		return ret
	}
	return *o.DeliveryAddress
}

// GetDeliveryAddressOk returns a tuple with the DeliveryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetDeliveryAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryAddress) {
		return nil, false
	}
	return o.DeliveryAddress, true
}

// HasDeliveryAddress returns a boolean if a field has been set.
func (o *PurchaseOrder) HasDeliveryAddress() bool {
	if o != nil && !IsNil(o.DeliveryAddress) {
		return true
	}

	return false
}

// SetDeliveryAddress gets a reference to the given string and assigns it to the DeliveryAddress field.
func (o *PurchaseOrder) SetDeliveryAddress(v string) {
	o.DeliveryAddress = &v
}

// GetAttentionTo returns the AttentionTo field value if set, zero value otherwise.
func (o *PurchaseOrder) GetAttentionTo() string {
	if o == nil || IsNil(o.AttentionTo) {
		var ret string
		return ret
	}
	return *o.AttentionTo
}

// GetAttentionToOk returns a tuple with the AttentionTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetAttentionToOk() (*string, bool) {
	if o == nil || IsNil(o.AttentionTo) {
		return nil, false
	}
	return o.AttentionTo, true
}

// HasAttentionTo returns a boolean if a field has been set.
func (o *PurchaseOrder) HasAttentionTo() bool {
	if o != nil && !IsNil(o.AttentionTo) {
		return true
	}

	return false
}

// SetAttentionTo gets a reference to the given string and assigns it to the AttentionTo field.
func (o *PurchaseOrder) SetAttentionTo(v string) {
	o.AttentionTo = &v
}

// GetTelephone returns the Telephone field value if set, zero value otherwise.
func (o *PurchaseOrder) GetTelephone() string {
	if o == nil || IsNil(o.Telephone) {
		var ret string
		return ret
	}
	return *o.Telephone
}

// GetTelephoneOk returns a tuple with the Telephone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetTelephoneOk() (*string, bool) {
	if o == nil || IsNil(o.Telephone) {
		return nil, false
	}
	return o.Telephone, true
}

// HasTelephone returns a boolean if a field has been set.
func (o *PurchaseOrder) HasTelephone() bool {
	if o != nil && !IsNil(o.Telephone) {
		return true
	}

	return false
}

// SetTelephone gets a reference to the given string and assigns it to the Telephone field.
func (o *PurchaseOrder) SetTelephone(v string) {
	o.Telephone = &v
}

// GetDeliveryInstructions returns the DeliveryInstructions field value if set, zero value otherwise.
func (o *PurchaseOrder) GetDeliveryInstructions() string {
	if o == nil || IsNil(o.DeliveryInstructions) {
		var ret string
		return ret
	}
	return *o.DeliveryInstructions
}

// GetDeliveryInstructionsOk returns a tuple with the DeliveryInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetDeliveryInstructionsOk() (*string, bool) {
	if o == nil || IsNil(o.DeliveryInstructions) {
		return nil, false
	}
	return o.DeliveryInstructions, true
}

// HasDeliveryInstructions returns a boolean if a field has been set.
func (o *PurchaseOrder) HasDeliveryInstructions() bool {
	if o != nil && !IsNil(o.DeliveryInstructions) {
		return true
	}

	return false
}

// SetDeliveryInstructions gets a reference to the given string and assigns it to the DeliveryInstructions field.
func (o *PurchaseOrder) SetDeliveryInstructions(v string) {
	o.DeliveryInstructions = &v
}

// GetExpectedArrivalDate returns the ExpectedArrivalDate field value if set, zero value otherwise.
func (o *PurchaseOrder) GetExpectedArrivalDate() string {
	if o == nil || IsNil(o.ExpectedArrivalDate) {
		var ret string
		return ret
	}
	return *o.ExpectedArrivalDate
}

// GetExpectedArrivalDateOk returns a tuple with the ExpectedArrivalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetExpectedArrivalDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedArrivalDate) {
		return nil, false
	}
	return o.ExpectedArrivalDate, true
}

// HasExpectedArrivalDate returns a boolean if a field has been set.
func (o *PurchaseOrder) HasExpectedArrivalDate() bool {
	if o != nil && !IsNil(o.ExpectedArrivalDate) {
		return true
	}

	return false
}

// SetExpectedArrivalDate gets a reference to the given string and assigns it to the ExpectedArrivalDate field.
func (o *PurchaseOrder) SetExpectedArrivalDate(v string) {
	o.ExpectedArrivalDate = &v
}

// GetPurchaseOrderID returns the PurchaseOrderID field value if set, zero value otherwise.
func (o *PurchaseOrder) GetPurchaseOrderID() string {
	if o == nil || IsNil(o.PurchaseOrderID) {
		var ret string
		return ret
	}
	return *o.PurchaseOrderID
}

// GetPurchaseOrderIDOk returns a tuple with the PurchaseOrderID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetPurchaseOrderIDOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseOrderID) {
		return nil, false
	}
	return o.PurchaseOrderID, true
}

// HasPurchaseOrderID returns a boolean if a field has been set.
func (o *PurchaseOrder) HasPurchaseOrderID() bool {
	if o != nil && !IsNil(o.PurchaseOrderID) {
		return true
	}

	return false
}

// SetPurchaseOrderID gets a reference to the given string and assigns it to the PurchaseOrderID field.
func (o *PurchaseOrder) SetPurchaseOrderID(v string) {
	o.PurchaseOrderID = &v
}

// GetCurrencyRate returns the CurrencyRate field value if set, zero value otherwise.
func (o *PurchaseOrder) GetCurrencyRate() float64 {
	if o == nil || IsNil(o.CurrencyRate) {
		var ret float64
		return ret
	}
	return *o.CurrencyRate
}

// GetCurrencyRateOk returns a tuple with the CurrencyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetCurrencyRateOk() (*float64, bool) {
	if o == nil || IsNil(o.CurrencyRate) {
		return nil, false
	}
	return o.CurrencyRate, true
}

// HasCurrencyRate returns a boolean if a field has been set.
func (o *PurchaseOrder) HasCurrencyRate() bool {
	if o != nil && !IsNil(o.CurrencyRate) {
		return true
	}

	return false
}

// SetCurrencyRate gets a reference to the given float64 and assigns it to the CurrencyRate field.
func (o *PurchaseOrder) SetCurrencyRate(v float64) {
	o.CurrencyRate = &v
}

// GetSubTotal returns the SubTotal field value if set, zero value otherwise.
func (o *PurchaseOrder) GetSubTotal() float64 {
	if o == nil || IsNil(o.SubTotal) {
		var ret float64
		return ret
	}
	return *o.SubTotal
}

// GetSubTotalOk returns a tuple with the SubTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetSubTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.SubTotal) {
		return nil, false
	}
	return o.SubTotal, true
}

// HasSubTotal returns a boolean if a field has been set.
func (o *PurchaseOrder) HasSubTotal() bool {
	if o != nil && !IsNil(o.SubTotal) {
		return true
	}

	return false
}

// SetSubTotal gets a reference to the given float64 and assigns it to the SubTotal field.
func (o *PurchaseOrder) SetSubTotal(v float64) {
	o.SubTotal = &v
}

// GetTotalTax returns the TotalTax field value if set, zero value otherwise.
func (o *PurchaseOrder) GetTotalTax() float64 {
	if o == nil || IsNil(o.TotalTax) {
		var ret float64
		return ret
	}
	return *o.TotalTax
}

// GetTotalTaxOk returns a tuple with the TotalTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetTotalTaxOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalTax) {
		return nil, false
	}
	return o.TotalTax, true
}

// HasTotalTax returns a boolean if a field has been set.
func (o *PurchaseOrder) HasTotalTax() bool {
	if o != nil && !IsNil(o.TotalTax) {
		return true
	}

	return false
}

// SetTotalTax gets a reference to the given float64 and assigns it to the TotalTax field.
func (o *PurchaseOrder) SetTotalTax(v float64) {
	o.TotalTax = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *PurchaseOrder) GetTotal() float64 {
	if o == nil || IsNil(o.Total) {
		var ret float64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *PurchaseOrder) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float64 and assigns it to the Total field.
func (o *PurchaseOrder) SetTotal(v float64) {
	o.Total = &v
}

// GetTotalDiscount returns the TotalDiscount field value if set, zero value otherwise.
func (o *PurchaseOrder) GetTotalDiscount() float64 {
	if o == nil || IsNil(o.TotalDiscount) {
		var ret float64
		return ret
	}
	return *o.TotalDiscount
}

// GetTotalDiscountOk returns a tuple with the TotalDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetTotalDiscountOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalDiscount) {
		return nil, false
	}
	return o.TotalDiscount, true
}

// HasTotalDiscount returns a boolean if a field has been set.
func (o *PurchaseOrder) HasTotalDiscount() bool {
	if o != nil && !IsNil(o.TotalDiscount) {
		return true
	}

	return false
}

// SetTotalDiscount gets a reference to the given float64 and assigns it to the TotalDiscount field.
func (o *PurchaseOrder) SetTotalDiscount(v float64) {
	o.TotalDiscount = &v
}

// GetHasAttachmentsField returns the HasAttachmentsField field value if set, zero value otherwise.
func (o *PurchaseOrder) GetHasAttachmentsField() bool {
	if o == nil || IsNil(o.HasAttachmentsField) {
		var ret bool
		return ret
	}
	return *o.HasAttachmentsField
}

// GetHasAttachmentsFieldOk returns a tuple with the HasAttachmentsField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetHasAttachmentsFieldOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAttachmentsField) {
		return nil, false
	}
	return o.HasAttachmentsField, true
}

// HasHasAttachmentsField returns a boolean if a field has been set.
func (o *PurchaseOrder) HasHasAttachmentsField() bool {
	if o != nil && !IsNil(o.HasAttachmentsField) {
		return true
	}

	return false
}

// SetHasAttachmentsField gets a reference to the given bool and assigns it to the HasAttachmentsField field.
func (o *PurchaseOrder) SetHasAttachmentsField(v bool) {
	o.HasAttachmentsField = &v
}

// GetUpdatedDateUTC returns the UpdatedDateUTC field value if set, zero value otherwise.
func (o *PurchaseOrder) GetUpdatedDateUTC() string {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		var ret string
		return ret
	}
	return *o.UpdatedDateUTC
}

// GetUpdatedDateUTCOk returns a tuple with the UpdatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetUpdatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		return nil, false
	}
	return o.UpdatedDateUTC, true
}

// HasUpdatedDateUTC returns a boolean if a field has been set.
func (o *PurchaseOrder) HasUpdatedDateUTC() bool {
	if o != nil && !IsNil(o.UpdatedDateUTC) {
		return true
	}

	return false
}

// SetUpdatedDateUTC gets a reference to the given string and assigns it to the UpdatedDateUTC field.
func (o *PurchaseOrder) SetUpdatedDateUTC(v string) {
	o.UpdatedDateUTC = &v
}

// GetStatusAttributeString returns the StatusAttributeString field value if set, zero value otherwise.
func (o *PurchaseOrder) GetStatusAttributeString() string {
	if o == nil || IsNil(o.StatusAttributeString) {
		var ret string
		return ret
	}
	return *o.StatusAttributeString
}

// GetStatusAttributeStringOk returns a tuple with the StatusAttributeString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetStatusAttributeStringOk() (*string, bool) {
	if o == nil || IsNil(o.StatusAttributeString) {
		return nil, false
	}
	return o.StatusAttributeString, true
}

// HasStatusAttributeString returns a boolean if a field has been set.
func (o *PurchaseOrder) HasStatusAttributeString() bool {
	if o != nil && !IsNil(o.StatusAttributeString) {
		return true
	}

	return false
}

// SetStatusAttributeString gets a reference to the given string and assigns it to the StatusAttributeString field.
func (o *PurchaseOrder) SetStatusAttributeString(v string) {
	o.StatusAttributeString = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *PurchaseOrder) GetValidationErrors() []ValidationError {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret []ValidationError
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetValidationErrorsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *PurchaseOrder) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []ValidationError and assigns it to the ValidationErrors field.
func (o *PurchaseOrder) SetValidationErrors(v []ValidationError) {
	o.ValidationErrors = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PurchaseOrder) GetWarnings() []ValidationError {
	if o == nil || IsNil(o.Warnings) {
		var ret []ValidationError
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetWarningsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PurchaseOrder) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []ValidationError and assigns it to the Warnings field.
func (o *PurchaseOrder) SetWarnings(v []ValidationError) {
	o.Warnings = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *PurchaseOrder) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PurchaseOrder) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *PurchaseOrder) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *PurchaseOrder) SetAttachments(v []Attachment) {
	o.Attachments = v
}

func (o PurchaseOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PurchaseOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contact) {
		toSerialize["Contact"] = o.Contact
	}
	if !IsNil(o.LineItems) {
		toSerialize["LineItems"] = o.LineItems
	}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.DeliveryDate) {
		toSerialize["DeliveryDate"] = o.DeliveryDate
	}
	if !IsNil(o.LineAmountTypes) {
		toSerialize["LineAmountTypes"] = o.LineAmountTypes
	}
	if !IsNil(o.PurchaseOrderNumber) {
		toSerialize["PurchaseOrderNumber"] = o.PurchaseOrderNumber
	}
	if !IsNil(o.Reference) {
		toSerialize["Reference"] = o.Reference
	}
	if !IsNil(o.BrandingThemeID) {
		toSerialize["BrandingThemeID"] = o.BrandingThemeID
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["CurrencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.SentToContact) {
		toSerialize["SentToContact"] = o.SentToContact
	}
	if !IsNil(o.DeliveryAddress) {
		toSerialize["DeliveryAddress"] = o.DeliveryAddress
	}
	if !IsNil(o.AttentionTo) {
		toSerialize["AttentionTo"] = o.AttentionTo
	}
	if !IsNil(o.Telephone) {
		toSerialize["Telephone"] = o.Telephone
	}
	if !IsNil(o.DeliveryInstructions) {
		toSerialize["DeliveryInstructions"] = o.DeliveryInstructions
	}
	if !IsNil(o.ExpectedArrivalDate) {
		toSerialize["ExpectedArrivalDate"] = o.ExpectedArrivalDate
	}
	if !IsNil(o.PurchaseOrderID) {
		toSerialize["PurchaseOrderID"] = o.PurchaseOrderID
	}
	if !IsNil(o.CurrencyRate) {
		toSerialize["CurrencyRate"] = o.CurrencyRate
	}
	if !IsNil(o.SubTotal) {
		toSerialize["SubTotal"] = o.SubTotal
	}
	if !IsNil(o.TotalTax) {
		toSerialize["TotalTax"] = o.TotalTax
	}
	if !IsNil(o.Total) {
		toSerialize["Total"] = o.Total
	}
	if !IsNil(o.TotalDiscount) {
		toSerialize["TotalDiscount"] = o.TotalDiscount
	}
	if !IsNil(o.HasAttachmentsField) {
		toSerialize["HasAttachments"] = o.HasAttachmentsField
	}
	if !IsNil(o.UpdatedDateUTC) {
		toSerialize["UpdatedDateUTC"] = o.UpdatedDateUTC
	}
	if !IsNil(o.StatusAttributeString) {
		toSerialize["StatusAttributeString"] = o.StatusAttributeString
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["ValidationErrors"] = o.ValidationErrors
	}
	if !IsNil(o.Warnings) {
		toSerialize["Warnings"] = o.Warnings
	}
	if !IsNil(o.Attachments) {
		toSerialize["Attachments"] = o.Attachments
	}
	return toSerialize, nil
}

type NullablePurchaseOrder struct {
	value *PurchaseOrder
	isSet bool
}

func (v NullablePurchaseOrder) Get() *PurchaseOrder {
	return v.value
}

func (v *NullablePurchaseOrder) Set(val *PurchaseOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrder(val *PurchaseOrder) *NullablePurchaseOrder {
	return &NullablePurchaseOrder{value: val, isSet: true}
}

func (v NullablePurchaseOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


