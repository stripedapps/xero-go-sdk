/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ImportSummaryOrganisation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportSummaryOrganisation{}

// ImportSummaryOrganisation struct for ImportSummaryOrganisation
type ImportSummaryOrganisation struct {
	Present *bool `json:"Present,omitempty"`
}

// NewImportSummaryOrganisation instantiates a new ImportSummaryOrganisation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportSummaryOrganisation() *ImportSummaryOrganisation {
	this := ImportSummaryOrganisation{}
	return &this
}

// NewImportSummaryOrganisationWithDefaults instantiates a new ImportSummaryOrganisation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportSummaryOrganisationWithDefaults() *ImportSummaryOrganisation {
	this := ImportSummaryOrganisation{}
	return &this
}

// GetPresent returns the Present field value if set, zero value otherwise.
func (o *ImportSummaryOrganisation) GetPresent() bool {
	if o == nil || IsNil(o.Present) {
		var ret bool
		return ret
	}
	return *o.Present
}

// GetPresentOk returns a tuple with the Present field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportSummaryOrganisation) GetPresentOk() (*bool, bool) {
	if o == nil || IsNil(o.Present) {
		return nil, false
	}
	return o.Present, true
}

// HasPresent returns a boolean if a field has been set.
func (o *ImportSummaryOrganisation) HasPresent() bool {
	if o != nil && !IsNil(o.Present) {
		return true
	}

	return false
}

// SetPresent gets a reference to the given bool and assigns it to the Present field.
func (o *ImportSummaryOrganisation) SetPresent(v bool) {
	o.Present = &v
}

func (o ImportSummaryOrganisation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportSummaryOrganisation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Present) {
		toSerialize["Present"] = o.Present
	}
	return toSerialize, nil
}

type NullableImportSummaryOrganisation struct {
	value *ImportSummaryOrganisation
	isSet bool
}

func (v NullableImportSummaryOrganisation) Get() *ImportSummaryOrganisation {
	return v.value
}

func (v *NullableImportSummaryOrganisation) Set(val *ImportSummaryOrganisation) {
	v.value = val
	v.isSet = true
}

func (v NullableImportSummaryOrganisation) IsSet() bool {
	return v.isSet
}

func (v *NullableImportSummaryOrganisation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportSummaryOrganisation(val *ImportSummaryOrganisation) *NullableImportSummaryOrganisation {
	return &NullableImportSummaryOrganisation{value: val, isSet: true}
}

func (v NullableImportSummaryOrganisation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportSummaryOrganisation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


