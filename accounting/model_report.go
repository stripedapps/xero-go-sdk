/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Report type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Report{}

// Report struct for Report
type Report struct {
	// See Prepayment Types
	ReportName *string `json:"ReportName,omitempty"`
	// See Prepayment Types
	ReportType *string `json:"ReportType,omitempty"`
	// See Prepayment Types
	ReportTitle *string `json:"ReportTitle,omitempty"`
	// Date of report
	ReportDate *string `json:"ReportDate,omitempty"`
	// Updated Date
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	Contacts []TenNinetyNineContact `json:"Contacts,omitempty"`
}

// NewReport instantiates a new Report object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReport() *Report {
	this := Report{}
	return &this
}

// NewReportWithDefaults instantiates a new Report object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportWithDefaults() *Report {
	this := Report{}
	return &this
}

// GetReportName returns the ReportName field value if set, zero value otherwise.
func (o *Report) GetReportName() string {
	if o == nil || IsNil(o.ReportName) {
		var ret string
		return ret
	}
	return *o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportName) {
		return nil, false
	}
	return o.ReportName, true
}

// HasReportName returns a boolean if a field has been set.
func (o *Report) HasReportName() bool {
	if o != nil && !IsNil(o.ReportName) {
		return true
	}

	return false
}

// SetReportName gets a reference to the given string and assigns it to the ReportName field.
func (o *Report) SetReportName(v string) {
	o.ReportName = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *Report) GetReportType() string {
	if o == nil || IsNil(o.ReportType) {
		var ret string
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetReportTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReportType) {
		return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *Report) HasReportType() bool {
	if o != nil && !IsNil(o.ReportType) {
		return true
	}

	return false
}

// SetReportType gets a reference to the given string and assigns it to the ReportType field.
func (o *Report) SetReportType(v string) {
	o.ReportType = &v
}

// GetReportTitle returns the ReportTitle field value if set, zero value otherwise.
func (o *Report) GetReportTitle() string {
	if o == nil || IsNil(o.ReportTitle) {
		var ret string
		return ret
	}
	return *o.ReportTitle
}

// GetReportTitleOk returns a tuple with the ReportTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetReportTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ReportTitle) {
		return nil, false
	}
	return o.ReportTitle, true
}

// HasReportTitle returns a boolean if a field has been set.
func (o *Report) HasReportTitle() bool {
	if o != nil && !IsNil(o.ReportTitle) {
		return true
	}

	return false
}

// SetReportTitle gets a reference to the given string and assigns it to the ReportTitle field.
func (o *Report) SetReportTitle(v string) {
	o.ReportTitle = &v
}

// GetReportDate returns the ReportDate field value if set, zero value otherwise.
func (o *Report) GetReportDate() string {
	if o == nil || IsNil(o.ReportDate) {
		var ret string
		return ret
	}
	return *o.ReportDate
}

// GetReportDateOk returns a tuple with the ReportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetReportDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReportDate) {
		return nil, false
	}
	return o.ReportDate, true
}

// HasReportDate returns a boolean if a field has been set.
func (o *Report) HasReportDate() bool {
	if o != nil && !IsNil(o.ReportDate) {
		return true
	}

	return false
}

// SetReportDate gets a reference to the given string and assigns it to the ReportDate field.
func (o *Report) SetReportDate(v string) {
	o.ReportDate = &v
}

// GetUpdatedDateUTC returns the UpdatedDateUTC field value if set, zero value otherwise.
func (o *Report) GetUpdatedDateUTC() string {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		var ret string
		return ret
	}
	return *o.UpdatedDateUTC
}

// GetUpdatedDateUTCOk returns a tuple with the UpdatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetUpdatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		return nil, false
	}
	return o.UpdatedDateUTC, true
}

// HasUpdatedDateUTC returns a boolean if a field has been set.
func (o *Report) HasUpdatedDateUTC() bool {
	if o != nil && !IsNil(o.UpdatedDateUTC) {
		return true
	}

	return false
}

// SetUpdatedDateUTC gets a reference to the given string and assigns it to the UpdatedDateUTC field.
func (o *Report) SetUpdatedDateUTC(v string) {
	o.UpdatedDateUTC = &v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *Report) GetContacts() []TenNinetyNineContact {
	if o == nil || IsNil(o.Contacts) {
		var ret []TenNinetyNineContact
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetContactsOk() ([]TenNinetyNineContact, bool) {
	if o == nil || IsNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *Report) HasContacts() bool {
	if o != nil && !IsNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []TenNinetyNineContact and assigns it to the Contacts field.
func (o *Report) SetContacts(v []TenNinetyNineContact) {
	o.Contacts = v
}

func (o Report) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Report) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReportName) {
		toSerialize["ReportName"] = o.ReportName
	}
	if !IsNil(o.ReportType) {
		toSerialize["ReportType"] = o.ReportType
	}
	if !IsNil(o.ReportTitle) {
		toSerialize["ReportTitle"] = o.ReportTitle
	}
	if !IsNil(o.ReportDate) {
		toSerialize["ReportDate"] = o.ReportDate
	}
	if !IsNil(o.UpdatedDateUTC) {
		toSerialize["UpdatedDateUTC"] = o.UpdatedDateUTC
	}
	if !IsNil(o.Contacts) {
		toSerialize["Contacts"] = o.Contacts
	}
	return toSerialize, nil
}

type NullableReport struct {
	value *Report
	isSet bool
}

func (v NullableReport) Get() *Report {
	return v.value
}

func (v *NullableReport) Set(val *Report) {
	v.value = val
	v.isSet = true
}

func (v NullableReport) IsSet() bool {
	return v.isSet
}

func (v *NullableReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReport(val *Report) *NullableReport {
	return &NullableReport{value: val, isSet: true}
}

func (v NullableReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


