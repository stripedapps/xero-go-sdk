/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContactGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactGroups{}

// ContactGroups struct for ContactGroups
type ContactGroups struct {
	ContactGroups []ContactGroup `json:"ContactGroups,omitempty"`
}

// NewContactGroups instantiates a new ContactGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactGroups() *ContactGroups {
	this := ContactGroups{}
	return &this
}

// NewContactGroupsWithDefaults instantiates a new ContactGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactGroupsWithDefaults() *ContactGroups {
	this := ContactGroups{}
	return &this
}

// GetContactGroups returns the ContactGroups field value if set, zero value otherwise.
func (o *ContactGroups) GetContactGroups() []ContactGroup {
	if o == nil || IsNil(o.ContactGroups) {
		var ret []ContactGroup
		return ret
	}
	return o.ContactGroups
}

// GetContactGroupsOk returns a tuple with the ContactGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactGroups) GetContactGroupsOk() ([]ContactGroup, bool) {
	if o == nil || IsNil(o.ContactGroups) {
		return nil, false
	}
	return o.ContactGroups, true
}

// HasContactGroups returns a boolean if a field has been set.
func (o *ContactGroups) HasContactGroups() bool {
	if o != nil && !IsNil(o.ContactGroups) {
		return true
	}

	return false
}

// SetContactGroups gets a reference to the given []ContactGroup and assigns it to the ContactGroups field.
func (o *ContactGroups) SetContactGroups(v []ContactGroup) {
	o.ContactGroups = v
}

func (o ContactGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContactGroups) {
		toSerialize["ContactGroups"] = o.ContactGroups
	}
	return toSerialize, nil
}

type NullableContactGroups struct {
	value *ContactGroups
	isSet bool
}

func (v NullableContactGroups) Get() *ContactGroups {
	return v.value
}

func (v *NullableContactGroups) Set(val *ContactGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableContactGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableContactGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactGroups(val *ContactGroups) *NullableContactGroups {
	return &NullableContactGroups{value: val, isSet: true}
}

func (v NullableContactGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


