/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CountryCode the model 'CountryCode'
type CountryCode string

// List of CountryCode
const (
	COUNTRYCODE_AD CountryCode = "AD"
	COUNTRYCODE_AE CountryCode = "AE"
	COUNTRYCODE_AF CountryCode = "AF"
	COUNTRYCODE_AG CountryCode = "AG"
	COUNTRYCODE_AI CountryCode = "AI"
	COUNTRYCODE_AL CountryCode = "AL"
	COUNTRYCODE_AM CountryCode = "AM"
	COUNTRYCODE_AN CountryCode = "AN"
	COUNTRYCODE_AO CountryCode = "AO"
	COUNTRYCODE_AQ CountryCode = "AQ"
	COUNTRYCODE_AR CountryCode = "AR"
	COUNTRYCODE_AS CountryCode = "AS"
	COUNTRYCODE_AT CountryCode = "AT"
	COUNTRYCODE_AU CountryCode = "AU"
	COUNTRYCODE_AW CountryCode = "AW"
	COUNTRYCODE_AZ CountryCode = "AZ"
	COUNTRYCODE_BA CountryCode = "BA"
	COUNTRYCODE_BB CountryCode = "BB"
	COUNTRYCODE_BD CountryCode = "BD"
	COUNTRYCODE_BE CountryCode = "BE"
	COUNTRYCODE_BF CountryCode = "BF"
	COUNTRYCODE_BG CountryCode = "BG"
	COUNTRYCODE_BH CountryCode = "BH"
	COUNTRYCODE_BI CountryCode = "BI"
	COUNTRYCODE_BJ CountryCode = "BJ"
	COUNTRYCODE_BL CountryCode = "BL"
	COUNTRYCODE_BM CountryCode = "BM"
	COUNTRYCODE_BN CountryCode = "BN"
	COUNTRYCODE_BO CountryCode = "BO"
	COUNTRYCODE_BR CountryCode = "BR"
	COUNTRYCODE_BS CountryCode = "BS"
	COUNTRYCODE_BT CountryCode = "BT"
	COUNTRYCODE_BW CountryCode = "BW"
	COUNTRYCODE_BY CountryCode = "BY"
	COUNTRYCODE_BZ CountryCode = "BZ"
	COUNTRYCODE_CA CountryCode = "CA"
	COUNTRYCODE_CC CountryCode = "CC"
	COUNTRYCODE_CD CountryCode = "CD"
	COUNTRYCODE_CF CountryCode = "CF"
	COUNTRYCODE_CG CountryCode = "CG"
	COUNTRYCODE_CH CountryCode = "CH"
	COUNTRYCODE_CI CountryCode = "CI"
	COUNTRYCODE_CK CountryCode = "CK"
	COUNTRYCODE_CL CountryCode = "CL"
	COUNTRYCODE_CM CountryCode = "CM"
	COUNTRYCODE_CN CountryCode = "CN"
	COUNTRYCODE_CO CountryCode = "CO"
	COUNTRYCODE_CR CountryCode = "CR"
	COUNTRYCODE_CU CountryCode = "CU"
	COUNTRYCODE_CV CountryCode = "CV"
	COUNTRYCODE_CW CountryCode = "CW"
	COUNTRYCODE_CX CountryCode = "CX"
	COUNTRYCODE_CY CountryCode = "CY"
	COUNTRYCODE_CZ CountryCode = "CZ"
	COUNTRYCODE_DE CountryCode = "DE"
	COUNTRYCODE_DJ CountryCode = "DJ"
	COUNTRYCODE_DK CountryCode = "DK"
	COUNTRYCODE_DM CountryCode = "DM"
	COUNTRYCODE_DO CountryCode = "DO"
	COUNTRYCODE_DZ CountryCode = "DZ"
	COUNTRYCODE_EC CountryCode = "EC"
	COUNTRYCODE_EE CountryCode = "EE"
	COUNTRYCODE_EG CountryCode = "EG"
	COUNTRYCODE_EH CountryCode = "EH"
	COUNTRYCODE_ER CountryCode = "ER"
	COUNTRYCODE_ES CountryCode = "ES"
	COUNTRYCODE_ET CountryCode = "ET"
	COUNTRYCODE_FI CountryCode = "FI"
	COUNTRYCODE_FJ CountryCode = "FJ"
	COUNTRYCODE_FK CountryCode = "FK"
	COUNTRYCODE_FM CountryCode = "FM"
	COUNTRYCODE_FO CountryCode = "FO"
	COUNTRYCODE_FR CountryCode = "FR"
	COUNTRYCODE_GA CountryCode = "GA"
	COUNTRYCODE_GB CountryCode = "GB"
	COUNTRYCODE_GD CountryCode = "GD"
	COUNTRYCODE_GE CountryCode = "GE"
	COUNTRYCODE_GG CountryCode = "GG"
	COUNTRYCODE_GH CountryCode = "GH"
	COUNTRYCODE_GI CountryCode = "GI"
	COUNTRYCODE_GL CountryCode = "GL"
	COUNTRYCODE_GM CountryCode = "GM"
	COUNTRYCODE_GN CountryCode = "GN"
	COUNTRYCODE_GQ CountryCode = "GQ"
	COUNTRYCODE_GR CountryCode = "GR"
	COUNTRYCODE_GT CountryCode = "GT"
	COUNTRYCODE_GU CountryCode = "GU"
	COUNTRYCODE_GW CountryCode = "GW"
	COUNTRYCODE_GY CountryCode = "GY"
	COUNTRYCODE_HK CountryCode = "HK"
	COUNTRYCODE_HN CountryCode = "HN"
	COUNTRYCODE_HR CountryCode = "HR"
	COUNTRYCODE_HT CountryCode = "HT"
	COUNTRYCODE_HU CountryCode = "HU"
	COUNTRYCODE_ID CountryCode = "ID"
	COUNTRYCODE_IE CountryCode = "IE"
	COUNTRYCODE_IL CountryCode = "IL"
	COUNTRYCODE_IM CountryCode = "IM"
	COUNTRYCODE_IN CountryCode = "IN"
	COUNTRYCODE_IO CountryCode = "IO"
	COUNTRYCODE_IQ CountryCode = "IQ"
	COUNTRYCODE_IR CountryCode = "IR"
	COUNTRYCODE_IS CountryCode = "IS"
	COUNTRYCODE_IT CountryCode = "IT"
	COUNTRYCODE_JE CountryCode = "JE"
	COUNTRYCODE_JM CountryCode = "JM"
	COUNTRYCODE_JO CountryCode = "JO"
	COUNTRYCODE_JP CountryCode = "JP"
	COUNTRYCODE_KE CountryCode = "KE"
	COUNTRYCODE_KG CountryCode = "KG"
	COUNTRYCODE_KH CountryCode = "KH"
	COUNTRYCODE_KI CountryCode = "KI"
	COUNTRYCODE_KM CountryCode = "KM"
	COUNTRYCODE_KN CountryCode = "KN"
	COUNTRYCODE_KP CountryCode = "KP"
	COUNTRYCODE_KR CountryCode = "KR"
	COUNTRYCODE_KW CountryCode = "KW"
	COUNTRYCODE_KY CountryCode = "KY"
	COUNTRYCODE_KZ CountryCode = "KZ"
	COUNTRYCODE_LA CountryCode = "LA"
	COUNTRYCODE_LB CountryCode = "LB"
	COUNTRYCODE_LC CountryCode = "LC"
	COUNTRYCODE_LI CountryCode = "LI"
	COUNTRYCODE_LK CountryCode = "LK"
	COUNTRYCODE_LR CountryCode = "LR"
	COUNTRYCODE_LS CountryCode = "LS"
	COUNTRYCODE_LT CountryCode = "LT"
	COUNTRYCODE_LU CountryCode = "LU"
	COUNTRYCODE_LV CountryCode = "LV"
	COUNTRYCODE_LY CountryCode = "LY"
	COUNTRYCODE_MA CountryCode = "MA"
	COUNTRYCODE_MC CountryCode = "MC"
	COUNTRYCODE_MD CountryCode = "MD"
	COUNTRYCODE_ME CountryCode = "ME"
	COUNTRYCODE_MF CountryCode = "MF"
	COUNTRYCODE_MG CountryCode = "MG"
	COUNTRYCODE_MH CountryCode = "MH"
	COUNTRYCODE_MK CountryCode = "MK"
	COUNTRYCODE_ML CountryCode = "ML"
	COUNTRYCODE_MM CountryCode = "MM"
	COUNTRYCODE_MN CountryCode = "MN"
	COUNTRYCODE_MO CountryCode = "MO"
	COUNTRYCODE_MP CountryCode = "MP"
	COUNTRYCODE_MR CountryCode = "MR"
	COUNTRYCODE_MS CountryCode = "MS"
	COUNTRYCODE_MT CountryCode = "MT"
	COUNTRYCODE_MU CountryCode = "MU"
	COUNTRYCODE_MV CountryCode = "MV"
	COUNTRYCODE_MW CountryCode = "MW"
	COUNTRYCODE_MX CountryCode = "MX"
	COUNTRYCODE_MY CountryCode = "MY"
	COUNTRYCODE_MZ CountryCode = "MZ"
	COUNTRYCODE_NA CountryCode = "NA"
	COUNTRYCODE_NC CountryCode = "NC"
	COUNTRYCODE_NE CountryCode = "NE"
	COUNTRYCODE_NG CountryCode = "NG"
	COUNTRYCODE_NI CountryCode = "NI"
	COUNTRYCODE_NL CountryCode = "NL"
	COUNTRYCODE_NO CountryCode = "NO"
	COUNTRYCODE_NP CountryCode = "NP"
	COUNTRYCODE_NR CountryCode = "NR"
	COUNTRYCODE_NU CountryCode = "NU"
	COUNTRYCODE_NZ CountryCode = "NZ"
	COUNTRYCODE_OM CountryCode = "OM"
	COUNTRYCODE_PA CountryCode = "PA"
	COUNTRYCODE_PE CountryCode = "PE"
	COUNTRYCODE_PF CountryCode = "PF"
	COUNTRYCODE_PG CountryCode = "PG"
	COUNTRYCODE_PH CountryCode = "PH"
	COUNTRYCODE_PK CountryCode = "PK"
	COUNTRYCODE_PL CountryCode = "PL"
	COUNTRYCODE_PM CountryCode = "PM"
	COUNTRYCODE_PN CountryCode = "PN"
	COUNTRYCODE_PR CountryCode = "PR"
	COUNTRYCODE_PS CountryCode = "PS"
	COUNTRYCODE_PT CountryCode = "PT"
	COUNTRYCODE_PW CountryCode = "PW"
	COUNTRYCODE_PY CountryCode = "PY"
	COUNTRYCODE_QA CountryCode = "QA"
	COUNTRYCODE_RE CountryCode = "RE"
	COUNTRYCODE_RO CountryCode = "RO"
	COUNTRYCODE_RS CountryCode = "RS"
	COUNTRYCODE_RU CountryCode = "RU"
	COUNTRYCODE_RW CountryCode = "RW"
	COUNTRYCODE_SA CountryCode = "SA"
	COUNTRYCODE_SB CountryCode = "SB"
	COUNTRYCODE_SC CountryCode = "SC"
	COUNTRYCODE_SD CountryCode = "SD"
	COUNTRYCODE_SE CountryCode = "SE"
	COUNTRYCODE_SG CountryCode = "SG"
	COUNTRYCODE_SH CountryCode = "SH"
	COUNTRYCODE_SI CountryCode = "SI"
	COUNTRYCODE_SJ CountryCode = "SJ"
	COUNTRYCODE_SK CountryCode = "SK"
	COUNTRYCODE_SL CountryCode = "SL"
	COUNTRYCODE_SM CountryCode = "SM"
	COUNTRYCODE_SN CountryCode = "SN"
	COUNTRYCODE_SO CountryCode = "SO"
	COUNTRYCODE_SR CountryCode = "SR"
	COUNTRYCODE_SS CountryCode = "SS"
	COUNTRYCODE_ST CountryCode = "ST"
	COUNTRYCODE_SV CountryCode = "SV"
	COUNTRYCODE_SX CountryCode = "SX"
	COUNTRYCODE_SY CountryCode = "SY"
	COUNTRYCODE_SZ CountryCode = "SZ"
	COUNTRYCODE_TC CountryCode = "TC"
	COUNTRYCODE_TD CountryCode = "TD"
	COUNTRYCODE_TG CountryCode = "TG"
	COUNTRYCODE_TH CountryCode = "TH"
	COUNTRYCODE_TJ CountryCode = "TJ"
	COUNTRYCODE_TK CountryCode = "TK"
	COUNTRYCODE_TL CountryCode = "TL"
	COUNTRYCODE_TM CountryCode = "TM"
	COUNTRYCODE_TN CountryCode = "TN"
	COUNTRYCODE_TO CountryCode = "TO"
	COUNTRYCODE_TR CountryCode = "TR"
	COUNTRYCODE_TT CountryCode = "TT"
	COUNTRYCODE_TV CountryCode = "TV"
	COUNTRYCODE_TW CountryCode = "TW"
	COUNTRYCODE_TZ CountryCode = "TZ"
	COUNTRYCODE_UA CountryCode = "UA"
	COUNTRYCODE_UG CountryCode = "UG"
	COUNTRYCODE_US CountryCode = "US"
	COUNTRYCODE_UY CountryCode = "UY"
	COUNTRYCODE_UZ CountryCode = "UZ"
	COUNTRYCODE_VA CountryCode = "VA"
	COUNTRYCODE_VC CountryCode = "VC"
	COUNTRYCODE_VE CountryCode = "VE"
	COUNTRYCODE_VG CountryCode = "VG"
	COUNTRYCODE_VI CountryCode = "VI"
	COUNTRYCODE_VN CountryCode = "VN"
	COUNTRYCODE_VU CountryCode = "VU"
	COUNTRYCODE_WF CountryCode = "WF"
	COUNTRYCODE_WS CountryCode = "WS"
	COUNTRYCODE_XK CountryCode = "XK"
	COUNTRYCODE_YE CountryCode = "YE"
	COUNTRYCODE_YT CountryCode = "YT"
	COUNTRYCODE_ZA CountryCode = "ZA"
	COUNTRYCODE_ZM CountryCode = "ZM"
	COUNTRYCODE_ZW CountryCode = "ZW"
)

// All allowed values of CountryCode enum
var AllowedCountryCodeEnumValues = []CountryCode{
	"AD",
	"AE",
	"AF",
	"AG",
	"AI",
	"AL",
	"AM",
	"AN",
	"AO",
	"AQ",
	"AR",
	"AS",
	"AT",
	"AU",
	"AW",
	"AZ",
	"BA",
	"BB",
	"BD",
	"BE",
	"BF",
	"BG",
	"BH",
	"BI",
	"BJ",
	"BL",
	"BM",
	"BN",
	"BO",
	"BR",
	"BS",
	"BT",
	"BW",
	"BY",
	"BZ",
	"CA",
	"CC",
	"CD",
	"CF",
	"CG",
	"CH",
	"CI",
	"CK",
	"CL",
	"CM",
	"CN",
	"CO",
	"CR",
	"CU",
	"CV",
	"CW",
	"CX",
	"CY",
	"CZ",
	"DE",
	"DJ",
	"DK",
	"DM",
	"DO",
	"DZ",
	"EC",
	"EE",
	"EG",
	"EH",
	"ER",
	"ES",
	"ET",
	"FI",
	"FJ",
	"FK",
	"FM",
	"FO",
	"FR",
	"GA",
	"GB",
	"GD",
	"GE",
	"GG",
	"GH",
	"GI",
	"GL",
	"GM",
	"GN",
	"GQ",
	"GR",
	"GT",
	"GU",
	"GW",
	"GY",
	"HK",
	"HN",
	"HR",
	"HT",
	"HU",
	"ID",
	"IE",
	"IL",
	"IM",
	"IN",
	"IO",
	"IQ",
	"IR",
	"IS",
	"IT",
	"JE",
	"JM",
	"JO",
	"JP",
	"KE",
	"KG",
	"KH",
	"KI",
	"KM",
	"KN",
	"KP",
	"KR",
	"KW",
	"KY",
	"KZ",
	"LA",
	"LB",
	"LC",
	"LI",
	"LK",
	"LR",
	"LS",
	"LT",
	"LU",
	"LV",
	"LY",
	"MA",
	"MC",
	"MD",
	"ME",
	"MF",
	"MG",
	"MH",
	"MK",
	"ML",
	"MM",
	"MN",
	"MO",
	"MP",
	"MR",
	"MS",
	"MT",
	"MU",
	"MV",
	"MW",
	"MX",
	"MY",
	"MZ",
	"NA",
	"NC",
	"NE",
	"NG",
	"NI",
	"NL",
	"NO",
	"NP",
	"NR",
	"NU",
	"NZ",
	"OM",
	"PA",
	"PE",
	"PF",
	"PG",
	"PH",
	"PK",
	"PL",
	"PM",
	"PN",
	"PR",
	"PS",
	"PT",
	"PW",
	"PY",
	"QA",
	"RE",
	"RO",
	"RS",
	"RU",
	"RW",
	"SA",
	"SB",
	"SC",
	"SD",
	"SE",
	"SG",
	"SH",
	"SI",
	"SJ",
	"SK",
	"SL",
	"SM",
	"SN",
	"SO",
	"SR",
	"SS",
	"ST",
	"SV",
	"SX",
	"SY",
	"SZ",
	"TC",
	"TD",
	"TG",
	"TH",
	"TJ",
	"TK",
	"TL",
	"TM",
	"TN",
	"TO",
	"TR",
	"TT",
	"TV",
	"TW",
	"TZ",
	"UA",
	"UG",
	"US",
	"UY",
	"UZ",
	"VA",
	"VC",
	"VE",
	"VG",
	"VI",
	"VN",
	"VU",
	"WF",
	"WS",
	"XK",
	"YE",
	"YT",
	"ZA",
	"ZM",
	"ZW",
}

func (v *CountryCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CountryCode(value)
	for _, existing := range AllowedCountryCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CountryCode", value)
}

// NewCountryCodeFromValue returns a pointer to a valid CountryCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCountryCodeFromValue(v string) (*CountryCode, error) {
	ev := CountryCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CountryCode: valid values are %v", v, AllowedCountryCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CountryCode) IsValid() bool {
	for _, existing := range AllowedCountryCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CountryCode value
func (v CountryCode) Ptr() *CountryCode {
	return &v
}

type NullableCountryCode struct {
	value *CountryCode
	isSet bool
}

func (v NullableCountryCode) Get() *CountryCode {
	return v.value
}

func (v *NullableCountryCode) Set(val *CountryCode) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryCode(val *CountryCode) *NullableCountryCode {
	return &NullableCountryCode{value: val, isSet: true}
}

func (v NullableCountryCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

