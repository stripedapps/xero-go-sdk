/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchPayment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchPayment{}

// BatchPayment struct for BatchPayment
type BatchPayment struct {
	Account *Account `json:"Account,omitempty"`
	// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
	Reference *string `json:"Reference,omitempty"`
	// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
	Particulars *string `json:"Particulars,omitempty"`
	// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
	Code *string `json:"Code,omitempty"`
	// (Non-NZ Only) These details are sent to the orgâ€™s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18
	Details *string `json:"Details,omitempty"`
	// (UK Only) Only shows on the statement line in Xero. Max length =18
	Narrative *string `json:"Narrative,omitempty"`
	// The Xero generated unique identifier for the bank transaction (read-only)
	BatchPaymentID *string `json:"BatchPaymentID,omitempty"`
	// Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
	DateString *string `json:"DateString,omitempty"`
	// Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
	Date *string `json:"Date,omitempty"`
	// The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
	Amount *float64 `json:"Amount,omitempty"`
	// An array of payments
	Payments []Payment `json:"Payments,omitempty"`
	// PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
	Type *string `json:"Type,omitempty"`
	// AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
	Status *string `json:"Status,omitempty"`
	// The total of the payments that make up the batch (read-only)
	TotalAmount *float64 `json:"TotalAmount,omitempty"`
	// UTC timestamp of last update to the payment
	UpdatedDateUTC *string `json:"UpdatedDateUTC,omitempty"`
	// Booelan that tells you if the batch payment has been reconciled (read-only)
	IsReconciled *bool `json:"IsReconciled,omitempty"`
	// Displays array of validation error messages from the API
	ValidationErrors []ValidationError `json:"ValidationErrors,omitempty"`
}

// NewBatchPayment instantiates a new BatchPayment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchPayment() *BatchPayment {
	this := BatchPayment{}
	return &this
}

// NewBatchPaymentWithDefaults instantiates a new BatchPayment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchPaymentWithDefaults() *BatchPayment {
	this := BatchPayment{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *BatchPayment) GetAccount() Account {
	if o == nil || IsNil(o.Account) {
		var ret Account
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetAccountOk() (*Account, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *BatchPayment) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given Account and assigns it to the Account field.
func (o *BatchPayment) SetAccount(v Account) {
	o.Account = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *BatchPayment) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *BatchPayment) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *BatchPayment) SetReference(v string) {
	o.Reference = &v
}

// GetParticulars returns the Particulars field value if set, zero value otherwise.
func (o *BatchPayment) GetParticulars() string {
	if o == nil || IsNil(o.Particulars) {
		var ret string
		return ret
	}
	return *o.Particulars
}

// GetParticularsOk returns a tuple with the Particulars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetParticularsOk() (*string, bool) {
	if o == nil || IsNil(o.Particulars) {
		return nil, false
	}
	return o.Particulars, true
}

// HasParticulars returns a boolean if a field has been set.
func (o *BatchPayment) HasParticulars() bool {
	if o != nil && !IsNil(o.Particulars) {
		return true
	}

	return false
}

// SetParticulars gets a reference to the given string and assigns it to the Particulars field.
func (o *BatchPayment) SetParticulars(v string) {
	o.Particulars = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *BatchPayment) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *BatchPayment) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *BatchPayment) SetCode(v string) {
	o.Code = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *BatchPayment) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *BatchPayment) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *BatchPayment) SetDetails(v string) {
	o.Details = &v
}

// GetNarrative returns the Narrative field value if set, zero value otherwise.
func (o *BatchPayment) GetNarrative() string {
	if o == nil || IsNil(o.Narrative) {
		var ret string
		return ret
	}
	return *o.Narrative
}

// GetNarrativeOk returns a tuple with the Narrative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetNarrativeOk() (*string, bool) {
	if o == nil || IsNil(o.Narrative) {
		return nil, false
	}
	return o.Narrative, true
}

// HasNarrative returns a boolean if a field has been set.
func (o *BatchPayment) HasNarrative() bool {
	if o != nil && !IsNil(o.Narrative) {
		return true
	}

	return false
}

// SetNarrative gets a reference to the given string and assigns it to the Narrative field.
func (o *BatchPayment) SetNarrative(v string) {
	o.Narrative = &v
}

// GetBatchPaymentID returns the BatchPaymentID field value if set, zero value otherwise.
func (o *BatchPayment) GetBatchPaymentID() string {
	if o == nil || IsNil(o.BatchPaymentID) {
		var ret string
		return ret
	}
	return *o.BatchPaymentID
}

// GetBatchPaymentIDOk returns a tuple with the BatchPaymentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetBatchPaymentIDOk() (*string, bool) {
	if o == nil || IsNil(o.BatchPaymentID) {
		return nil, false
	}
	return o.BatchPaymentID, true
}

// HasBatchPaymentID returns a boolean if a field has been set.
func (o *BatchPayment) HasBatchPaymentID() bool {
	if o != nil && !IsNil(o.BatchPaymentID) {
		return true
	}

	return false
}

// SetBatchPaymentID gets a reference to the given string and assigns it to the BatchPaymentID field.
func (o *BatchPayment) SetBatchPaymentID(v string) {
	o.BatchPaymentID = &v
}

// GetDateString returns the DateString field value if set, zero value otherwise.
func (o *BatchPayment) GetDateString() string {
	if o == nil || IsNil(o.DateString) {
		var ret string
		return ret
	}
	return *o.DateString
}

// GetDateStringOk returns a tuple with the DateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetDateStringOk() (*string, bool) {
	if o == nil || IsNil(o.DateString) {
		return nil, false
	}
	return o.DateString, true
}

// HasDateString returns a boolean if a field has been set.
func (o *BatchPayment) HasDateString() bool {
	if o != nil && !IsNil(o.DateString) {
		return true
	}

	return false
}

// SetDateString gets a reference to the given string and assigns it to the DateString field.
func (o *BatchPayment) SetDateString(v string) {
	o.DateString = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BatchPayment) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BatchPayment) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *BatchPayment) SetDate(v string) {
	o.Date = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BatchPayment) GetAmount() float64 {
	if o == nil || IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BatchPayment) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *BatchPayment) SetAmount(v float64) {
	o.Amount = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *BatchPayment) GetPayments() []Payment {
	if o == nil || IsNil(o.Payments) {
		var ret []Payment
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetPaymentsOk() ([]Payment, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *BatchPayment) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []Payment and assigns it to the Payments field.
func (o *BatchPayment) SetPayments(v []Payment) {
	o.Payments = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BatchPayment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BatchPayment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BatchPayment) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BatchPayment) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BatchPayment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BatchPayment) SetStatus(v string) {
	o.Status = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *BatchPayment) GetTotalAmount() float64 {
	if o == nil || IsNil(o.TotalAmount) {
		var ret float64
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetTotalAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *BatchPayment) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given float64 and assigns it to the TotalAmount field.
func (o *BatchPayment) SetTotalAmount(v float64) {
	o.TotalAmount = &v
}

// GetUpdatedDateUTC returns the UpdatedDateUTC field value if set, zero value otherwise.
func (o *BatchPayment) GetUpdatedDateUTC() string {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		var ret string
		return ret
	}
	return *o.UpdatedDateUTC
}

// GetUpdatedDateUTCOk returns a tuple with the UpdatedDateUTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetUpdatedDateUTCOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedDateUTC) {
		return nil, false
	}
	return o.UpdatedDateUTC, true
}

// HasUpdatedDateUTC returns a boolean if a field has been set.
func (o *BatchPayment) HasUpdatedDateUTC() bool {
	if o != nil && !IsNil(o.UpdatedDateUTC) {
		return true
	}

	return false
}

// SetUpdatedDateUTC gets a reference to the given string and assigns it to the UpdatedDateUTC field.
func (o *BatchPayment) SetUpdatedDateUTC(v string) {
	o.UpdatedDateUTC = &v
}

// GetIsReconciled returns the IsReconciled field value if set, zero value otherwise.
func (o *BatchPayment) GetIsReconciled() bool {
	if o == nil || IsNil(o.IsReconciled) {
		var ret bool
		return ret
	}
	return *o.IsReconciled
}

// GetIsReconciledOk returns a tuple with the IsReconciled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetIsReconciledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReconciled) {
		return nil, false
	}
	return o.IsReconciled, true
}

// HasIsReconciled returns a boolean if a field has been set.
func (o *BatchPayment) HasIsReconciled() bool {
	if o != nil && !IsNil(o.IsReconciled) {
		return true
	}

	return false
}

// SetIsReconciled gets a reference to the given bool and assigns it to the IsReconciled field.
func (o *BatchPayment) SetIsReconciled(v bool) {
	o.IsReconciled = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *BatchPayment) GetValidationErrors() []ValidationError {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret []ValidationError
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPayment) GetValidationErrorsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *BatchPayment) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []ValidationError and assigns it to the ValidationErrors field.
func (o *BatchPayment) SetValidationErrors(v []ValidationError) {
	o.ValidationErrors = v
}

func (o BatchPayment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchPayment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["Account"] = o.Account
	}
	if !IsNil(o.Reference) {
		toSerialize["Reference"] = o.Reference
	}
	if !IsNil(o.Particulars) {
		toSerialize["Particulars"] = o.Particulars
	}
	if !IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !IsNil(o.Details) {
		toSerialize["Details"] = o.Details
	}
	if !IsNil(o.Narrative) {
		toSerialize["Narrative"] = o.Narrative
	}
	if !IsNil(o.BatchPaymentID) {
		toSerialize["BatchPaymentID"] = o.BatchPaymentID
	}
	if !IsNil(o.DateString) {
		toSerialize["DateString"] = o.DateString
	}
	if !IsNil(o.Date) {
		toSerialize["Date"] = o.Date
	}
	if !IsNil(o.Amount) {
		toSerialize["Amount"] = o.Amount
	}
	if !IsNil(o.Payments) {
		toSerialize["Payments"] = o.Payments
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["TotalAmount"] = o.TotalAmount
	}
	if !IsNil(o.UpdatedDateUTC) {
		toSerialize["UpdatedDateUTC"] = o.UpdatedDateUTC
	}
	if !IsNil(o.IsReconciled) {
		toSerialize["IsReconciled"] = o.IsReconciled
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["ValidationErrors"] = o.ValidationErrors
	}
	return toSerialize, nil
}

type NullableBatchPayment struct {
	value *BatchPayment
	isSet bool
}

func (v NullableBatchPayment) Get() *BatchPayment {
	return v.value
}

func (v *NullableBatchPayment) Set(val *BatchPayment) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchPayment) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchPayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchPayment(val *BatchPayment) *NullableBatchPayment {
	return &NullableBatchPayment{value: val, isSet: true}
}

func (v NullableBatchPayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchPayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


