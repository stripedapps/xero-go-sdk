/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BudgetBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BudgetBalance{}

// BudgetBalance struct for BudgetBalance
type BudgetBalance struct {
	// Period the amount applies to (e.g. “2019-08”)
	Period *string `json:"Period,omitempty"`
	// LineItem Quantity
	Amount *float64 `json:"Amount,omitempty"`
	// Budgeted amount
	UnitAmount *float64 `json:"UnitAmount,omitempty"`
	// Any footnotes associated with this balance
	Notes *string `json:"Notes,omitempty"`
}

// NewBudgetBalance instantiates a new BudgetBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetBalance() *BudgetBalance {
	this := BudgetBalance{}
	return &this
}

// NewBudgetBalanceWithDefaults instantiates a new BudgetBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetBalanceWithDefaults() *BudgetBalance {
	this := BudgetBalance{}
	return &this
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *BudgetBalance) GetPeriod() string {
	if o == nil || IsNil(o.Period) {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetBalance) GetPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *BudgetBalance) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *BudgetBalance) SetPeriod(v string) {
	o.Period = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BudgetBalance) GetAmount() float64 {
	if o == nil || IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetBalance) GetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BudgetBalance) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *BudgetBalance) SetAmount(v float64) {
	o.Amount = &v
}

// GetUnitAmount returns the UnitAmount field value if set, zero value otherwise.
func (o *BudgetBalance) GetUnitAmount() float64 {
	if o == nil || IsNil(o.UnitAmount) {
		var ret float64
		return ret
	}
	return *o.UnitAmount
}

// GetUnitAmountOk returns a tuple with the UnitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetBalance) GetUnitAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.UnitAmount) {
		return nil, false
	}
	return o.UnitAmount, true
}

// HasUnitAmount returns a boolean if a field has been set.
func (o *BudgetBalance) HasUnitAmount() bool {
	if o != nil && !IsNil(o.UnitAmount) {
		return true
	}

	return false
}

// SetUnitAmount gets a reference to the given float64 and assigns it to the UnitAmount field.
func (o *BudgetBalance) SetUnitAmount(v float64) {
	o.UnitAmount = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *BudgetBalance) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetBalance) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *BudgetBalance) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *BudgetBalance) SetNotes(v string) {
	o.Notes = &v
}

func (o BudgetBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BudgetBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Period) {
		toSerialize["Period"] = o.Period
	}
	if !IsNil(o.Amount) {
		toSerialize["Amount"] = o.Amount
	}
	if !IsNil(o.UnitAmount) {
		toSerialize["UnitAmount"] = o.UnitAmount
	}
	if !IsNil(o.Notes) {
		toSerialize["Notes"] = o.Notes
	}
	return toSerialize, nil
}

type NullableBudgetBalance struct {
	value *BudgetBalance
	isSet bool
}

func (v NullableBudgetBalance) Get() *BudgetBalance {
	return v.value
}

func (v *NullableBudgetBalance) Set(val *BudgetBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetBalance(val *BudgetBalance) *NullableBudgetBalance {
	return &NullableBudgetBalance{value: val, isSet: true}
}

func (v NullableBudgetBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


