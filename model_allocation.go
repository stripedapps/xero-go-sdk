/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Allocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Allocation{}

// Allocation struct for Allocation
type Allocation struct {
	// Xero generated unique identifier
	AllocationID *string `json:"AllocationID,omitempty"`
	Invoice Invoice `json:"Invoice"`
	Overpayment *Overpayment `json:"Overpayment,omitempty"`
	Prepayment *Prepayment `json:"Prepayment,omitempty"`
	CreditNote *CreditNote `json:"CreditNote,omitempty"`
	// the amount being applied to the invoice
	Amount float64 `json:"Amount"`
	// the date the allocation is applied YYYY-MM-DD.
	Date string `json:"Date"`
	// A flag that returns true when the allocation is succesfully deleted
	IsDeleted *bool `json:"IsDeleted,omitempty"`
	// A string to indicate if a invoice status
	StatusAttributeString *string `json:"StatusAttributeString,omitempty"`
	// Displays array of validation error messages from the API
	ValidationErrors []ValidationError `json:"ValidationErrors,omitempty"`
}

// NewAllocation instantiates a new Allocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocation(invoice Invoice, amount float64, date string) *Allocation {
	this := Allocation{}
	this.Invoice = invoice
	this.Amount = amount
	this.Date = date
	return &this
}

// NewAllocationWithDefaults instantiates a new Allocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationWithDefaults() *Allocation {
	this := Allocation{}
	return &this
}

// GetAllocationID returns the AllocationID field value if set, zero value otherwise.
func (o *Allocation) GetAllocationID() string {
	if o == nil || IsNil(o.AllocationID) {
		var ret string
		return ret
	}
	return *o.AllocationID
}

// GetAllocationIDOk returns a tuple with the AllocationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetAllocationIDOk() (*string, bool) {
	if o == nil || IsNil(o.AllocationID) {
		return nil, false
	}
	return o.AllocationID, true
}

// HasAllocationID returns a boolean if a field has been set.
func (o *Allocation) HasAllocationID() bool {
	if o != nil && !IsNil(o.AllocationID) {
		return true
	}

	return false
}

// SetAllocationID gets a reference to the given string and assigns it to the AllocationID field.
func (o *Allocation) SetAllocationID(v string) {
	o.AllocationID = &v
}

// GetInvoice returns the Invoice field value
func (o *Allocation) GetInvoice() Invoice {
	if o == nil {
		var ret Invoice
		return ret
	}

	return o.Invoice
}

// GetInvoiceOk returns a tuple with the Invoice field value
// and a boolean to check if the value has been set.
func (o *Allocation) GetInvoiceOk() (*Invoice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Invoice, true
}

// SetInvoice sets field value
func (o *Allocation) SetInvoice(v Invoice) {
	o.Invoice = v
}

// GetOverpayment returns the Overpayment field value if set, zero value otherwise.
func (o *Allocation) GetOverpayment() Overpayment {
	if o == nil || IsNil(o.Overpayment) {
		var ret Overpayment
		return ret
	}
	return *o.Overpayment
}

// GetOverpaymentOk returns a tuple with the Overpayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetOverpaymentOk() (*Overpayment, bool) {
	if o == nil || IsNil(o.Overpayment) {
		return nil, false
	}
	return o.Overpayment, true
}

// HasOverpayment returns a boolean if a field has been set.
func (o *Allocation) HasOverpayment() bool {
	if o != nil && !IsNil(o.Overpayment) {
		return true
	}

	return false
}

// SetOverpayment gets a reference to the given Overpayment and assigns it to the Overpayment field.
func (o *Allocation) SetOverpayment(v Overpayment) {
	o.Overpayment = &v
}

// GetPrepayment returns the Prepayment field value if set, zero value otherwise.
func (o *Allocation) GetPrepayment() Prepayment {
	if o == nil || IsNil(o.Prepayment) {
		var ret Prepayment
		return ret
	}
	return *o.Prepayment
}

// GetPrepaymentOk returns a tuple with the Prepayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetPrepaymentOk() (*Prepayment, bool) {
	if o == nil || IsNil(o.Prepayment) {
		return nil, false
	}
	return o.Prepayment, true
}

// HasPrepayment returns a boolean if a field has been set.
func (o *Allocation) HasPrepayment() bool {
	if o != nil && !IsNil(o.Prepayment) {
		return true
	}

	return false
}

// SetPrepayment gets a reference to the given Prepayment and assigns it to the Prepayment field.
func (o *Allocation) SetPrepayment(v Prepayment) {
	o.Prepayment = &v
}

// GetCreditNote returns the CreditNote field value if set, zero value otherwise.
func (o *Allocation) GetCreditNote() CreditNote {
	if o == nil || IsNil(o.CreditNote) {
		var ret CreditNote
		return ret
	}
	return *o.CreditNote
}

// GetCreditNoteOk returns a tuple with the CreditNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetCreditNoteOk() (*CreditNote, bool) {
	if o == nil || IsNil(o.CreditNote) {
		return nil, false
	}
	return o.CreditNote, true
}

// HasCreditNote returns a boolean if a field has been set.
func (o *Allocation) HasCreditNote() bool {
	if o != nil && !IsNil(o.CreditNote) {
		return true
	}

	return false
}

// SetCreditNote gets a reference to the given CreditNote and assigns it to the CreditNote field.
func (o *Allocation) SetCreditNote(v CreditNote) {
	o.CreditNote = &v
}

// GetAmount returns the Amount field value
func (o *Allocation) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Allocation) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Allocation) SetAmount(v float64) {
	o.Amount = v
}

// GetDate returns the Date field value
func (o *Allocation) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Allocation) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Allocation) SetDate(v string) {
	o.Date = v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *Allocation) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *Allocation) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *Allocation) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetStatusAttributeString returns the StatusAttributeString field value if set, zero value otherwise.
func (o *Allocation) GetStatusAttributeString() string {
	if o == nil || IsNil(o.StatusAttributeString) {
		var ret string
		return ret
	}
	return *o.StatusAttributeString
}

// GetStatusAttributeStringOk returns a tuple with the StatusAttributeString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetStatusAttributeStringOk() (*string, bool) {
	if o == nil || IsNil(o.StatusAttributeString) {
		return nil, false
	}
	return o.StatusAttributeString, true
}

// HasStatusAttributeString returns a boolean if a field has been set.
func (o *Allocation) HasStatusAttributeString() bool {
	if o != nil && !IsNil(o.StatusAttributeString) {
		return true
	}

	return false
}

// SetStatusAttributeString gets a reference to the given string and assigns it to the StatusAttributeString field.
func (o *Allocation) SetStatusAttributeString(v string) {
	o.StatusAttributeString = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *Allocation) GetValidationErrors() []ValidationError {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret []ValidationError
		return ret
	}
	return o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocation) GetValidationErrorsOk() ([]ValidationError, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *Allocation) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given []ValidationError and assigns it to the ValidationErrors field.
func (o *Allocation) SetValidationErrors(v []ValidationError) {
	o.ValidationErrors = v
}

func (o Allocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Allocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocationID) {
		toSerialize["AllocationID"] = o.AllocationID
	}
	toSerialize["Invoice"] = o.Invoice
	if !IsNil(o.Overpayment) {
		toSerialize["Overpayment"] = o.Overpayment
	}
	if !IsNil(o.Prepayment) {
		toSerialize["Prepayment"] = o.Prepayment
	}
	if !IsNil(o.CreditNote) {
		toSerialize["CreditNote"] = o.CreditNote
	}
	toSerialize["Amount"] = o.Amount
	toSerialize["Date"] = o.Date
	if !IsNil(o.IsDeleted) {
		toSerialize["IsDeleted"] = o.IsDeleted
	}
	if !IsNil(o.StatusAttributeString) {
		toSerialize["StatusAttributeString"] = o.StatusAttributeString
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["ValidationErrors"] = o.ValidationErrors
	}
	return toSerialize, nil
}

type NullableAllocation struct {
	value *Allocation
	isSet bool
}

func (v NullableAllocation) Get() *Allocation {
	return v.value
}

func (v *NullableAllocation) Set(val *Allocation) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocation) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocation(val *Allocation) *NullableAllocation {
	return &NullableAllocation{value: val, isSet: true}
}

func (v NullableAllocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


