/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchPaymentDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchPaymentDetails{}

// BatchPaymentDetails Bank details for use on a batch payment stored with each contact
type BatchPaymentDetails struct {
	// Bank account number for use with Batch Payments
	BankAccountNumber *string `json:"BankAccountNumber,omitempty"`
	// Name of bank for use with Batch Payments
	BankAccountName *string `json:"BankAccountName,omitempty"`
	// (Non-NZ Only) These details are sent to the orgâ€™s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18
	Details *string `json:"Details,omitempty"`
	// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
	Code *string `json:"Code,omitempty"`
	// (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
	Reference *string `json:"Reference,omitempty"`
}

// NewBatchPaymentDetails instantiates a new BatchPaymentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchPaymentDetails() *BatchPaymentDetails {
	this := BatchPaymentDetails{}
	return &this
}

// NewBatchPaymentDetailsWithDefaults instantiates a new BatchPaymentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchPaymentDetailsWithDefaults() *BatchPaymentDetails {
	this := BatchPaymentDetails{}
	return &this
}

// GetBankAccountNumber returns the BankAccountNumber field value if set, zero value otherwise.
func (o *BatchPaymentDetails) GetBankAccountNumber() string {
	if o == nil || IsNil(o.BankAccountNumber) {
		var ret string
		return ret
	}
	return *o.BankAccountNumber
}

// GetBankAccountNumberOk returns a tuple with the BankAccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPaymentDetails) GetBankAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BankAccountNumber) {
		return nil, false
	}
	return o.BankAccountNumber, true
}

// HasBankAccountNumber returns a boolean if a field has been set.
func (o *BatchPaymentDetails) HasBankAccountNumber() bool {
	if o != nil && !IsNil(o.BankAccountNumber) {
		return true
	}

	return false
}

// SetBankAccountNumber gets a reference to the given string and assigns it to the BankAccountNumber field.
func (o *BatchPaymentDetails) SetBankAccountNumber(v string) {
	o.BankAccountNumber = &v
}

// GetBankAccountName returns the BankAccountName field value if set, zero value otherwise.
func (o *BatchPaymentDetails) GetBankAccountName() string {
	if o == nil || IsNil(o.BankAccountName) {
		var ret string
		return ret
	}
	return *o.BankAccountName
}

// GetBankAccountNameOk returns a tuple with the BankAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPaymentDetails) GetBankAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.BankAccountName) {
		return nil, false
	}
	return o.BankAccountName, true
}

// HasBankAccountName returns a boolean if a field has been set.
func (o *BatchPaymentDetails) HasBankAccountName() bool {
	if o != nil && !IsNil(o.BankAccountName) {
		return true
	}

	return false
}

// SetBankAccountName gets a reference to the given string and assigns it to the BankAccountName field.
func (o *BatchPaymentDetails) SetBankAccountName(v string) {
	o.BankAccountName = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *BatchPaymentDetails) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPaymentDetails) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *BatchPaymentDetails) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *BatchPaymentDetails) SetDetails(v string) {
	o.Details = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *BatchPaymentDetails) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPaymentDetails) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *BatchPaymentDetails) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *BatchPaymentDetails) SetCode(v string) {
	o.Code = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *BatchPaymentDetails) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchPaymentDetails) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *BatchPaymentDetails) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *BatchPaymentDetails) SetReference(v string) {
	o.Reference = &v
}

func (o BatchPaymentDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchPaymentDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankAccountNumber) {
		toSerialize["BankAccountNumber"] = o.BankAccountNumber
	}
	if !IsNil(o.BankAccountName) {
		toSerialize["BankAccountName"] = o.BankAccountName
	}
	if !IsNil(o.Details) {
		toSerialize["Details"] = o.Details
	}
	if !IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !IsNil(o.Reference) {
		toSerialize["Reference"] = o.Reference
	}
	return toSerialize, nil
}

type NullableBatchPaymentDetails struct {
	value *BatchPaymentDetails
	isSet bool
}

func (v NullableBatchPaymentDetails) Get() *BatchPaymentDetails {
	return v.value
}

func (v *NullableBatchPaymentDetails) Set(val *BatchPaymentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchPaymentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchPaymentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchPaymentDetails(val *BatchPaymentDetails) *NullableBatchPaymentDetails {
	return &NullableBatchPaymentDetails{value: val, isSet: true}
}

func (v NullableBatchPaymentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchPaymentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


