/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Contacts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contacts{}

// Contacts struct for Contacts
type Contacts struct {
	Contacts []Contact `json:"Contacts,omitempty"`
}

// NewContacts instantiates a new Contacts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContacts() *Contacts {
	this := Contacts{}
	return &this
}

// NewContactsWithDefaults instantiates a new Contacts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactsWithDefaults() *Contacts {
	this := Contacts{}
	return &this
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *Contacts) GetContacts() []Contact {
	if o == nil || IsNil(o.Contacts) {
		var ret []Contact
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contacts) GetContactsOk() ([]Contact, bool) {
	if o == nil || IsNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *Contacts) HasContacts() bool {
	if o != nil && !IsNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []Contact and assigns it to the Contacts field.
func (o *Contacts) SetContacts(v []Contact) {
	o.Contacts = v
}

func (o Contacts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contacts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contacts) {
		toSerialize["Contacts"] = o.Contacts
	}
	return toSerialize, nil
}

type NullableContacts struct {
	value *Contacts
	isSet bool
}

func (v NullableContacts) Get() *Contacts {
	return v.value
}

func (v *NullableContacts) Set(val *Contacts) {
	v.value = val
	v.isSet = true
}

func (v NullableContacts) IsSet() bool {
	return v.isSet
}

func (v *NullableContacts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContacts(val *Contacts) *NullableContacts {
	return &NullableContacts{value: val, isSet: true}
}

func (v NullableContacts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContacts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


