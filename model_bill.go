/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Bill type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bill{}

// Bill struct for Bill
type Bill struct {
	// Day of Month (0-31)
	Day *int32 `json:"Day,omitempty"`
	Type *PaymentTermType `json:"Type,omitempty"`
}

// NewBill instantiates a new Bill object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBill() *Bill {
	this := Bill{}
	return &this
}

// NewBillWithDefaults instantiates a new Bill object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillWithDefaults() *Bill {
	this := Bill{}
	return &this
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *Bill) GetDay() int32 {
	if o == nil || IsNil(o.Day) {
		var ret int32
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bill) GetDayOk() (*int32, bool) {
	if o == nil || IsNil(o.Day) {
		return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *Bill) HasDay() bool {
	if o != nil && !IsNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given int32 and assigns it to the Day field.
func (o *Bill) SetDay(v int32) {
	o.Day = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Bill) GetType() PaymentTermType {
	if o == nil || IsNil(o.Type) {
		var ret PaymentTermType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bill) GetTypeOk() (*PaymentTermType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Bill) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given PaymentTermType and assigns it to the Type field.
func (o *Bill) SetType(v PaymentTermType) {
	o.Type = &v
}

func (o Bill) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bill) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Day) {
		toSerialize["Day"] = o.Day
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	return toSerialize, nil
}

type NullableBill struct {
	value *Bill
	isSet bool
}

func (v NullableBill) Get() *Bill {
	return v.value
}

func (v *NullableBill) Set(val *Bill) {
	v.value = val
	v.isSet = true
}

func (v NullableBill) IsSet() bool {
	return v.isSet
}

func (v *NullableBill) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBill(val *Bill) *NullableBill {
	return &NullableBill{value: val, isSet: true}
}

func (v NullableBill) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBill) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


