/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PaymentTermType the model 'PaymentTermType'
type PaymentTermType string

// List of PaymentTermType
const (
	DAYSAFTERBILLDATE PaymentTermType = "DAYSAFTERBILLDATE"
	DAYSAFTERBILLMONTH PaymentTermType = "DAYSAFTERBILLMONTH"
	OFCURRENTMONTH PaymentTermType = "OFCURRENTMONTH"
	OFFOLLOWINGMONTH PaymentTermType = "OFFOLLOWINGMONTH"
)

// All allowed values of PaymentTermType enum
var AllowedPaymentTermTypeEnumValues = []PaymentTermType{
	"DAYSAFTERBILLDATE",
	"DAYSAFTERBILLMONTH",
	"OFCURRENTMONTH",
	"OFFOLLOWINGMONTH",
}

func (v *PaymentTermType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentTermType(value)
	for _, existing := range AllowedPaymentTermTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentTermType", value)
}

// NewPaymentTermTypeFromValue returns a pointer to a valid PaymentTermType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentTermTypeFromValue(v string) (*PaymentTermType, error) {
	ev := PaymentTermType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentTermType: valid values are %v", v, AllowedPaymentTermTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentTermType) IsValid() bool {
	for _, existing := range AllowedPaymentTermTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentTermType value
func (v PaymentTermType) Ptr() *PaymentTermType {
	return &v
}

type NullablePaymentTermType struct {
	value *PaymentTermType
	isSet bool
}

func (v NullablePaymentTermType) Get() *PaymentTermType {
	return v.value
}

func (v *NullablePaymentTermType) Set(val *PaymentTermType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTermType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTermType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTermType(val *PaymentTermType) *NullablePaymentTermType {
	return &NullablePaymentTermType{value: val, isSet: true}
}

func (v NullablePaymentTermType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTermType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

