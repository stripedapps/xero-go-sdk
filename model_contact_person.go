/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContactPerson type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactPerson{}

// ContactPerson struct for ContactPerson
type ContactPerson struct {
	// First name of person
	FirstName *string `json:"FirstName,omitempty"`
	// Last name of person
	LastName *string `json:"LastName,omitempty"`
	// Email address of person
	EmailAddress *string `json:"EmailAddress,omitempty"`
	// boolean to indicate whether contact should be included on emails with invoices etc.
	IncludeInEmails *bool `json:"IncludeInEmails,omitempty"`
}

// NewContactPerson instantiates a new ContactPerson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactPerson() *ContactPerson {
	this := ContactPerson{}
	return &this
}

// NewContactPersonWithDefaults instantiates a new ContactPerson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactPersonWithDefaults() *ContactPerson {
	this := ContactPerson{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *ContactPerson) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactPerson) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *ContactPerson) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *ContactPerson) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *ContactPerson) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactPerson) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *ContactPerson) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *ContactPerson) SetLastName(v string) {
	o.LastName = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *ContactPerson) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactPerson) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *ContactPerson) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *ContactPerson) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetIncludeInEmails returns the IncludeInEmails field value if set, zero value otherwise.
func (o *ContactPerson) GetIncludeInEmails() bool {
	if o == nil || IsNil(o.IncludeInEmails) {
		var ret bool
		return ret
	}
	return *o.IncludeInEmails
}

// GetIncludeInEmailsOk returns a tuple with the IncludeInEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactPerson) GetIncludeInEmailsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeInEmails) {
		return nil, false
	}
	return o.IncludeInEmails, true
}

// HasIncludeInEmails returns a boolean if a field has been set.
func (o *ContactPerson) HasIncludeInEmails() bool {
	if o != nil && !IsNil(o.IncludeInEmails) {
		return true
	}

	return false
}

// SetIncludeInEmails gets a reference to the given bool and assigns it to the IncludeInEmails field.
func (o *ContactPerson) SetIncludeInEmails(v bool) {
	o.IncludeInEmails = &v
}

func (o ContactPerson) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactPerson) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["FirstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["LastName"] = o.LastName
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["EmailAddress"] = o.EmailAddress
	}
	if !IsNil(o.IncludeInEmails) {
		toSerialize["IncludeInEmails"] = o.IncludeInEmails
	}
	return toSerialize, nil
}

type NullableContactPerson struct {
	value *ContactPerson
	isSet bool
}

func (v NullableContactPerson) Get() *ContactPerson {
	return v.value
}

func (v *NullableContactPerson) Set(val *ContactPerson) {
	v.value = val
	v.isSet = true
}

func (v NullableContactPerson) IsSet() bool {
	return v.isSet
}

func (v *NullableContactPerson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactPerson(val *ContactPerson) *NullableContactPerson {
	return &NullableContactPerson{value: val, isSet: true}
}

func (v NullableContactPerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactPerson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


