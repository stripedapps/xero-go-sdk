/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RepeatingInvoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepeatingInvoice{}

// RepeatingInvoice struct for RepeatingInvoice
type RepeatingInvoice struct {
	// See Invoice Types
	Type *string `json:"Type,omitempty"`
	Contact *Contact `json:"Contact,omitempty"`
	Schedule *Schedule `json:"Schedule,omitempty"`
	// See LineItems
	LineItems []LineItem `json:"LineItems,omitempty"`
	LineAmountTypes *LineAmountTypes `json:"LineAmountTypes,omitempty"`
	// ACCREC only – additional reference number
	Reference *string `json:"Reference,omitempty"`
	// See BrandingThemes
	BrandingThemeID *string `json:"BrandingThemeID,omitempty"`
	CurrencyCode *CurrencyCode `json:"CurrencyCode,omitempty"`
	// One of the following - DRAFT or AUTHORISED – See Invoice Status Codes
	Status *string `json:"Status,omitempty"`
	// Total of invoice excluding taxes
	SubTotal *float64 `json:"SubTotal,omitempty"`
	// Total tax on invoice
	TotalTax *float64 `json:"TotalTax,omitempty"`
	// Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)
	Total *float64 `json:"Total,omitempty"`
	// Xero generated unique identifier for repeating invoice template
	RepeatingInvoiceID *string `json:"RepeatingInvoiceID,omitempty"`
	// Xero generated unique identifier for repeating invoice template
	ID *string `json:"ID,omitempty"`
	// Boolean to indicate if an invoice has an attachment
	HasAttachments *bool `json:"HasAttachments,omitempty"`
	// Displays array of attachments from the API
	Attachments []Attachment `json:"Attachments,omitempty"`
	// Boolean to indicate whether the invoice has been approved for sending
	ApprovedForSending *bool `json:"ApprovedForSending,omitempty"`
	// Boolean to indicate whether a copy is sent to sender's email
	SendCopy *bool `json:"SendCopy,omitempty"`
	// Boolean to indicate whether the invoice in the Xero app displays as \"sent\"
	MarkAsSent *bool `json:"MarkAsSent,omitempty"`
	// Boolean to indicate whether to include PDF attachment
	IncludePDF *bool `json:"IncludePDF,omitempty"`
}

// NewRepeatingInvoice instantiates a new RepeatingInvoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepeatingInvoice() *RepeatingInvoice {
	this := RepeatingInvoice{}
	var approvedForSending bool = false
	this.ApprovedForSending = &approvedForSending
	var sendCopy bool = false
	this.SendCopy = &sendCopy
	var markAsSent bool = false
	this.MarkAsSent = &markAsSent
	var includePDF bool = false
	this.IncludePDF = &includePDF
	return &this
}

// NewRepeatingInvoiceWithDefaults instantiates a new RepeatingInvoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepeatingInvoiceWithDefaults() *RepeatingInvoice {
	this := RepeatingInvoice{}
	var approvedForSending bool = false
	this.ApprovedForSending = &approvedForSending
	var sendCopy bool = false
	this.SendCopy = &sendCopy
	var markAsSent bool = false
	this.MarkAsSent = &markAsSent
	var includePDF bool = false
	this.IncludePDF = &includePDF
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RepeatingInvoice) SetType(v string) {
	o.Type = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetContact() Contact {
	if o == nil || IsNil(o.Contact) {
		var ret Contact
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetContactOk() (*Contact, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given Contact and assigns it to the Contact field.
func (o *RepeatingInvoice) SetContact(v Contact) {
	o.Contact = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetSchedule() Schedule {
	if o == nil || IsNil(o.Schedule) {
		var ret Schedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetScheduleOk() (*Schedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given Schedule and assigns it to the Schedule field.
func (o *RepeatingInvoice) SetSchedule(v Schedule) {
	o.Schedule = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetLineItems() []LineItem {
	if o == nil || IsNil(o.LineItems) {
		var ret []LineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetLineItemsOk() ([]LineItem, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []LineItem and assigns it to the LineItems field.
func (o *RepeatingInvoice) SetLineItems(v []LineItem) {
	o.LineItems = v
}

// GetLineAmountTypes returns the LineAmountTypes field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetLineAmountTypes() LineAmountTypes {
	if o == nil || IsNil(o.LineAmountTypes) {
		var ret LineAmountTypes
		return ret
	}
	return *o.LineAmountTypes
}

// GetLineAmountTypesOk returns a tuple with the LineAmountTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetLineAmountTypesOk() (*LineAmountTypes, bool) {
	if o == nil || IsNil(o.LineAmountTypes) {
		return nil, false
	}
	return o.LineAmountTypes, true
}

// HasLineAmountTypes returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasLineAmountTypes() bool {
	if o != nil && !IsNil(o.LineAmountTypes) {
		return true
	}

	return false
}

// SetLineAmountTypes gets a reference to the given LineAmountTypes and assigns it to the LineAmountTypes field.
func (o *RepeatingInvoice) SetLineAmountTypes(v LineAmountTypes) {
	o.LineAmountTypes = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *RepeatingInvoice) SetReference(v string) {
	o.Reference = &v
}

// GetBrandingThemeID returns the BrandingThemeID field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetBrandingThemeID() string {
	if o == nil || IsNil(o.BrandingThemeID) {
		var ret string
		return ret
	}
	return *o.BrandingThemeID
}

// GetBrandingThemeIDOk returns a tuple with the BrandingThemeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetBrandingThemeIDOk() (*string, bool) {
	if o == nil || IsNil(o.BrandingThemeID) {
		return nil, false
	}
	return o.BrandingThemeID, true
}

// HasBrandingThemeID returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasBrandingThemeID() bool {
	if o != nil && !IsNil(o.BrandingThemeID) {
		return true
	}

	return false
}

// SetBrandingThemeID gets a reference to the given string and assigns it to the BrandingThemeID field.
func (o *RepeatingInvoice) SetBrandingThemeID(v string) {
	o.BrandingThemeID = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetCurrencyCode() CurrencyCode {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret CurrencyCode
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetCurrencyCodeOk() (*CurrencyCode, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given CurrencyCode and assigns it to the CurrencyCode field.
func (o *RepeatingInvoice) SetCurrencyCode(v CurrencyCode) {
	o.CurrencyCode = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RepeatingInvoice) SetStatus(v string) {
	o.Status = &v
}

// GetSubTotal returns the SubTotal field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetSubTotal() float64 {
	if o == nil || IsNil(o.SubTotal) {
		var ret float64
		return ret
	}
	return *o.SubTotal
}

// GetSubTotalOk returns a tuple with the SubTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetSubTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.SubTotal) {
		return nil, false
	}
	return o.SubTotal, true
}

// HasSubTotal returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasSubTotal() bool {
	if o != nil && !IsNil(o.SubTotal) {
		return true
	}

	return false
}

// SetSubTotal gets a reference to the given float64 and assigns it to the SubTotal field.
func (o *RepeatingInvoice) SetSubTotal(v float64) {
	o.SubTotal = &v
}

// GetTotalTax returns the TotalTax field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetTotalTax() float64 {
	if o == nil || IsNil(o.TotalTax) {
		var ret float64
		return ret
	}
	return *o.TotalTax
}

// GetTotalTaxOk returns a tuple with the TotalTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetTotalTaxOk() (*float64, bool) {
	if o == nil || IsNil(o.TotalTax) {
		return nil, false
	}
	return o.TotalTax, true
}

// HasTotalTax returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasTotalTax() bool {
	if o != nil && !IsNil(o.TotalTax) {
		return true
	}

	return false
}

// SetTotalTax gets a reference to the given float64 and assigns it to the TotalTax field.
func (o *RepeatingInvoice) SetTotalTax(v float64) {
	o.TotalTax = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetTotal() float64 {
	if o == nil || IsNil(o.Total) {
		var ret float64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetTotalOk() (*float64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float64 and assigns it to the Total field.
func (o *RepeatingInvoice) SetTotal(v float64) {
	o.Total = &v
}

// GetRepeatingInvoiceID returns the RepeatingInvoiceID field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetRepeatingInvoiceID() string {
	if o == nil || IsNil(o.RepeatingInvoiceID) {
		var ret string
		return ret
	}
	return *o.RepeatingInvoiceID
}

// GetRepeatingInvoiceIDOk returns a tuple with the RepeatingInvoiceID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetRepeatingInvoiceIDOk() (*string, bool) {
	if o == nil || IsNil(o.RepeatingInvoiceID) {
		return nil, false
	}
	return o.RepeatingInvoiceID, true
}

// HasRepeatingInvoiceID returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasRepeatingInvoiceID() bool {
	if o != nil && !IsNil(o.RepeatingInvoiceID) {
		return true
	}

	return false
}

// SetRepeatingInvoiceID gets a reference to the given string and assigns it to the RepeatingInvoiceID field.
func (o *RepeatingInvoice) SetRepeatingInvoiceID(v string) {
	o.RepeatingInvoiceID = &v
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetID() string {
	if o == nil || IsNil(o.ID) {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetIDOk() (*string, bool) {
	if o == nil || IsNil(o.ID) {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasID() bool {
	if o != nil && !IsNil(o.ID) {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *RepeatingInvoice) SetID(v string) {
	o.ID = &v
}

// GetHasAttachments returns the HasAttachments field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetHasAttachments() bool {
	if o == nil || IsNil(o.HasAttachments) {
		var ret bool
		return ret
	}
	return *o.HasAttachments
}

// GetHasAttachmentsOk returns a tuple with the HasAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetHasAttachmentsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAttachments) {
		return nil, false
	}
	return o.HasAttachments, true
}

// HasHasAttachments returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasHasAttachments() bool {
	if o != nil && !IsNil(o.HasAttachments) {
		return true
	}

	return false
}

// SetHasAttachments gets a reference to the given bool and assigns it to the HasAttachments field.
func (o *RepeatingInvoice) SetHasAttachments(v bool) {
	o.HasAttachments = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *RepeatingInvoice) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetApprovedForSending returns the ApprovedForSending field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetApprovedForSending() bool {
	if o == nil || IsNil(o.ApprovedForSending) {
		var ret bool
		return ret
	}
	return *o.ApprovedForSending
}

// GetApprovedForSendingOk returns a tuple with the ApprovedForSending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetApprovedForSendingOk() (*bool, bool) {
	if o == nil || IsNil(o.ApprovedForSending) {
		return nil, false
	}
	return o.ApprovedForSending, true
}

// HasApprovedForSending returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasApprovedForSending() bool {
	if o != nil && !IsNil(o.ApprovedForSending) {
		return true
	}

	return false
}

// SetApprovedForSending gets a reference to the given bool and assigns it to the ApprovedForSending field.
func (o *RepeatingInvoice) SetApprovedForSending(v bool) {
	o.ApprovedForSending = &v
}

// GetSendCopy returns the SendCopy field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetSendCopy() bool {
	if o == nil || IsNil(o.SendCopy) {
		var ret bool
		return ret
	}
	return *o.SendCopy
}

// GetSendCopyOk returns a tuple with the SendCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetSendCopyOk() (*bool, bool) {
	if o == nil || IsNil(o.SendCopy) {
		return nil, false
	}
	return o.SendCopy, true
}

// HasSendCopy returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasSendCopy() bool {
	if o != nil && !IsNil(o.SendCopy) {
		return true
	}

	return false
}

// SetSendCopy gets a reference to the given bool and assigns it to the SendCopy field.
func (o *RepeatingInvoice) SetSendCopy(v bool) {
	o.SendCopy = &v
}

// GetMarkAsSent returns the MarkAsSent field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetMarkAsSent() bool {
	if o == nil || IsNil(o.MarkAsSent) {
		var ret bool
		return ret
	}
	return *o.MarkAsSent
}

// GetMarkAsSentOk returns a tuple with the MarkAsSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetMarkAsSentOk() (*bool, bool) {
	if o == nil || IsNil(o.MarkAsSent) {
		return nil, false
	}
	return o.MarkAsSent, true
}

// HasMarkAsSent returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasMarkAsSent() bool {
	if o != nil && !IsNil(o.MarkAsSent) {
		return true
	}

	return false
}

// SetMarkAsSent gets a reference to the given bool and assigns it to the MarkAsSent field.
func (o *RepeatingInvoice) SetMarkAsSent(v bool) {
	o.MarkAsSent = &v
}

// GetIncludePDF returns the IncludePDF field value if set, zero value otherwise.
func (o *RepeatingInvoice) GetIncludePDF() bool {
	if o == nil || IsNil(o.IncludePDF) {
		var ret bool
		return ret
	}
	return *o.IncludePDF
}

// GetIncludePDFOk returns a tuple with the IncludePDF field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepeatingInvoice) GetIncludePDFOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludePDF) {
		return nil, false
	}
	return o.IncludePDF, true
}

// HasIncludePDF returns a boolean if a field has been set.
func (o *RepeatingInvoice) HasIncludePDF() bool {
	if o != nil && !IsNil(o.IncludePDF) {
		return true
	}

	return false
}

// SetIncludePDF gets a reference to the given bool and assigns it to the IncludePDF field.
func (o *RepeatingInvoice) SetIncludePDF(v bool) {
	o.IncludePDF = &v
}

func (o RepeatingInvoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepeatingInvoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Contact) {
		toSerialize["Contact"] = o.Contact
	}
	if !IsNil(o.Schedule) {
		toSerialize["Schedule"] = o.Schedule
	}
	if !IsNil(o.LineItems) {
		toSerialize["LineItems"] = o.LineItems
	}
	if !IsNil(o.LineAmountTypes) {
		toSerialize["LineAmountTypes"] = o.LineAmountTypes
	}
	if !IsNil(o.Reference) {
		toSerialize["Reference"] = o.Reference
	}
	if !IsNil(o.BrandingThemeID) {
		toSerialize["BrandingThemeID"] = o.BrandingThemeID
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["CurrencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.SubTotal) {
		toSerialize["SubTotal"] = o.SubTotal
	}
	if !IsNil(o.TotalTax) {
		toSerialize["TotalTax"] = o.TotalTax
	}
	if !IsNil(o.Total) {
		toSerialize["Total"] = o.Total
	}
	if !IsNil(o.RepeatingInvoiceID) {
		toSerialize["RepeatingInvoiceID"] = o.RepeatingInvoiceID
	}
	if !IsNil(o.ID) {
		toSerialize["ID"] = o.ID
	}
	if !IsNil(o.HasAttachments) {
		toSerialize["HasAttachments"] = o.HasAttachments
	}
	if !IsNil(o.Attachments) {
		toSerialize["Attachments"] = o.Attachments
	}
	if !IsNil(o.ApprovedForSending) {
		toSerialize["ApprovedForSending"] = o.ApprovedForSending
	}
	if !IsNil(o.SendCopy) {
		toSerialize["SendCopy"] = o.SendCopy
	}
	if !IsNil(o.MarkAsSent) {
		toSerialize["MarkAsSent"] = o.MarkAsSent
	}
	if !IsNil(o.IncludePDF) {
		toSerialize["IncludePDF"] = o.IncludePDF
	}
	return toSerialize, nil
}

type NullableRepeatingInvoice struct {
	value *RepeatingInvoice
	isSet bool
}

func (v NullableRepeatingInvoice) Get() *RepeatingInvoice {
	return v.value
}

func (v *NullableRepeatingInvoice) Set(val *RepeatingInvoice) {
	v.value = val
	v.isSet = true
}

func (v NullableRepeatingInvoice) IsSet() bool {
	return v.isSet
}

func (v *NullableRepeatingInvoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepeatingInvoice(val *RepeatingInvoice) *NullableRepeatingInvoice {
	return &NullableRepeatingInvoice{value: val, isSet: true}
}

func (v NullableRepeatingInvoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepeatingInvoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


