/*
Xero Accounting API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.40.0
Contact: api@xero.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Allocations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Allocations{}

// Allocations struct for Allocations
type Allocations struct {
	Allocations []Allocation `json:"Allocations,omitempty"`
}

// NewAllocations instantiates a new Allocations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocations() *Allocations {
	this := Allocations{}
	return &this
}

// NewAllocationsWithDefaults instantiates a new Allocations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationsWithDefaults() *Allocations {
	this := Allocations{}
	return &this
}

// GetAllocations returns the Allocations field value if set, zero value otherwise.
func (o *Allocations) GetAllocations() []Allocation {
	if o == nil || IsNil(o.Allocations) {
		var ret []Allocation
		return ret
	}
	return o.Allocations
}

// GetAllocationsOk returns a tuple with the Allocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allocations) GetAllocationsOk() ([]Allocation, bool) {
	if o == nil || IsNil(o.Allocations) {
		return nil, false
	}
	return o.Allocations, true
}

// HasAllocations returns a boolean if a field has been set.
func (o *Allocations) HasAllocations() bool {
	if o != nil && !IsNil(o.Allocations) {
		return true
	}

	return false
}

// SetAllocations gets a reference to the given []Allocation and assigns it to the Allocations field.
func (o *Allocations) SetAllocations(v []Allocation) {
	o.Allocations = v
}

func (o Allocations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Allocations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allocations) {
		toSerialize["Allocations"] = o.Allocations
	}
	return toSerialize, nil
}

type NullableAllocations struct {
	value *Allocations
	isSet bool
}

func (v NullableAllocations) Get() *Allocations {
	return v.value
}

func (v *NullableAllocations) Set(val *Allocations) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocations) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocations(val *Allocations) *NullableAllocations {
	return &NullableAllocations{value: val, isSet: true}
}

func (v NullableAllocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


